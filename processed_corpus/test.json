[
  {
    "intent": "send a signal `signal.SIGUSR1` to the current process",
    "code": "os.kill(os.getpid(), signal.SIGUSR1)",
    "slot_map": {
      "str_0": "signal.SIGUSR1"
    },
    "intent_indx": [
      433,
      3,
      433,
      5,
      8,
      17,
      174,
      283
    ]
  },
  {
    "intent": "decode a hex string '4a4b4c' to UTF-8.",
    "code": "bytes.fromhex('4a4b4c').decode('utf-8')",
    "slot_map": {
      "str_0": "4a4b4c"
    },
    "intent_indx": [
      178,
      3,
      115,
      13,
      5,
      8,
      179,
      155
    ]
  },
  {
    "intent": "check if all elements in list `myList` are identical",
    "code": "all(x == myList[0] for x in myList)",
    "slot_map": {
      "var_0": "myList"
    },
    "intent_indx": [
      227,
      147,
      36,
      1,
      23,
      4,
      25,
      234,
      433
    ]
  },
  {
    "intent": "format number of spaces between strings `Python`, `:` and `Very Good` to be `20`",
    "code": "print('%*s : %*s' % (20, 'Python', 20, 'Very Good'))",
    "slot_map": {
      "var_0": "Python",
      "str_0": ":",
      "str_1": "Very Good",
      "str_2": "20"
    },
    "intent_indx": [
      15,
      74,
      2,
      133,
      269,
      13,
      25,
      60,
      5,
      29,
      30,
      8,
      349,
      188
    ]
  },
  {
    "intent": "How to convert a string from CP-1251 to UTF-8?",
    "code": "d.decode('cp1251').encode('utf8')",
    "slot_map": {},
    "intent_indx": [
      75,
      8,
      10,
      3,
      13,
      56,
      433,
      8,
      179,
      49
    ]
  },
  {
    "intent": "get rid of None values in dictionary `kwargs`",
    "code": "res = {k: v for k, v in list(kwargs.items()) if v is not None}",
    "slot_map": {
      "var_0": "kwargs"
    },
    "intent_indx": [
      16,
      433,
      2,
      433,
      19,
      23,
      24,
      25
    ]
  },
  {
    "intent": "get rid of None values in dictionary `kwargs`",
    "code": "res = dict((k, v) for k, v in kwargs.items() if v is not None)",
    "slot_map": {
      "var_0": "kwargs"
    },
    "intent_indx": [
      16,
      433,
      2,
      433,
      19,
      23,
      24,
      25
    ]
  },
  {
    "intent": "capture final output of a chain of system commands `ps -ef | grep something | wc -l`",
    "code": "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)",
    "slot_map": {
      "str_0": "ps -ef | grep something | wc -l"
    },
    "intent_indx": [
      433,
      433,
      248,
      2,
      3,
      433,
      2,
      433,
      138,
      5
    ]
  },
  {
    "intent": "concatenate a list of strings `['a', 'b', 'c']`",
    "code": "\"\"\"\"\"\".join(['a', 'b', 'c'])",
    "slot_map": {
      "str_0": "['a', 'b', 'c']",
      "[str_0]": "['a', 'b', 'c']"
    },
    "intent_indx": [
      0,
      3,
      4,
      2,
      13,
      5
    ]
  },
  {
    "intent": "find intersection data between series `s1` and series `s2`",
    "code": "pd.Series(list(set(s1).intersection(set(s2))))",
    "slot_map": {
      "var_0": "s1",
      "var_1": "s2"
    },
    "intent_indx": [
      45,
      433,
      63,
      269,
      324,
      25,
      29,
      324,
      61
    ]
  },
  {
    "intent": "sending http headers to `client`",
    "code": "client.send('HTTP/1.0 200 OK\\r\\n')",
    "slot_map": {
      "var_0": "client"
    },
    "intent_indx": [
      433,
      329,
      401,
      8,
      25
    ]
  },
  {
    "intent": "Format a datetime string `when` to extract date only",
    "code": "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()",
    "slot_map": {
      "var_0": "when"
    },
    "intent_indx": [
      15,
      3,
      12,
      13,
      25,
      8,
      102,
      134,
      338
    ]
  },
  {
    "intent": "split a multi-line string `inputString` into separate strings",
    "code": "inputString.split('\\n')",
    "slot_map": {
      "var_0": "inputString"
    },
    "intent_indx": [
      139,
      3,
      433,
      13,
      25,
      11,
      95,
      13
    ]
  },
  {
    "intent": "Split a multi-line string ` a \\n b \\r\\n c ` by new line character `\\n`",
    "code": "' a \\n b \\r\\n c '.split('\\n')",
    "slot_map": {
      "str_0": "a \\n b \\r\\n c",
      "str_1": "\\n"
    },
    "intent_indx": [
      139,
      3,
      433,
      13,
      5,
      42,
      186,
      167,
      96,
      30
    ]
  },
  {
    "intent": "concatenate elements of list `b` by a colon \":\"",
    "code": "\"\"\":\"\"\".join(str(x) for x in b)",
    "slot_map": {
      "var_0": "b",
      "str_0": ":"
    },
    "intent_indx": [
      0,
      1,
      2,
      4,
      25,
      42,
      3,
      433,
      5
    ]
  },
  {
    "intent": "get the first object from a queryset in django model `Entry`",
    "code": "Entry.objects.filter()[:1].get()",
    "slot_map": {
      "var_0": "Entry"
    },
    "intent_indx": [
      16,
      17,
      148,
      14,
      56,
      3,
      433,
      23,
      85,
      86,
      25
    ]
  },
  {
    "intent": "Calculate sum over all rows of 2D numpy array",
    "code": "a.sum(axis=1)",
    "slot_map": {},
    "intent_indx": [
      243,
      111,
      387,
      36,
      43,
      2,
      228,
      81,
      82
    ]
  },
  {
    "intent": "enable warnings using action 'always'",
    "code": "warnings.simplefilter('always')",
    "slot_map": {
      "str_0": "always"
    },
    "intent_indx": [
      433,
      433,
      108,
      433,
      5
    ]
  },
  {
    "intent": "concatenate items of list `l` with a space ' '",
    "code": "print(' '.join(map(str, l)))",
    "slot_map": {
      "var_0": "l",
      "str_0": ""
    },
    "intent_indx": [
      0,
      37,
      2,
      4,
      25,
      77,
      3,
      133,
      5
    ]
  },
  {
    "intent": "run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable",
    "code": "subprocess.call(['python.exe', 'hello.py', 'htmlfilename.htm'])",
    "slot_map": {
      "str_0": "hello.py",
      "str_1": "htmlfilename.htm"
    },
    "intent_indx": [
      241,
      236,
      5,
      77,
      295,
      30,
      140,
      433,
      108,
      47,
      433
    ]
  },
  {
    "intent": "How can I parse a time string containing milliseconds in it with python?",
    "code": "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')",
    "slot_map": {},
    "intent_indx": [
      75,
      367,
      313,
      71,
      3,
      135,
      13,
      32,
      433,
      23,
      89,
      77,
      47,
      49
    ]
  },
  {
    "intent": "convert a string `my_string` with dot and comma into a float number `my_float`",
    "code": "my_float = float(my_string.replace(',', ''))",
    "slot_map": {
      "var_0": "my_string",
      "var_1": "my_float"
    },
    "intent_indx": [
      10,
      3,
      13,
      25,
      77,
      129,
      29,
      250,
      11,
      3,
      92,
      74,
      61
    ]
  },
  {
    "intent": "convert a string `123,456.908` with dot and comma into a floating number",
    "code": "float('123,456.908'.replace(',', ''))",
    "slot_map": {
      "str_0": "123,456.908"
    },
    "intent_indx": [
      10,
      3,
      13,
      5,
      77,
      129,
      29,
      250,
      11,
      3,
      261,
      74
    ]
  },
  {
    "intent": "set pythonpath in python script.",
    "code": "sys.path.append('/path/to/whatever')",
    "slot_map": {},
    "intent_indx": [
      57,
      433,
      23,
      47,
      236,
      155
    ]
  },
  {
    "intent": "split string 'Words, words, words.' using a regex '(\\\\W+)'",
    "code": "re.split('(\\\\W+)', 'Words, words, words.')",
    "slot_map": {
      "str_0": "Words, words, words.",
      "str_1": "(\\\\W+)",
      "(str_1)": "(\\\\W+)"
    },
    "intent_indx": [
      139,
      13,
      5,
      108,
      3,
      38,
      30
    ]
  },
  {
    "intent": "open a file `Output.txt` in append mode",
    "code": "file = open('Output.txt', 'a')",
    "slot_map": {
      "str_0": "Output.txt"
    },
    "intent_indx": [
      275,
      3,
      126,
      5,
      23,
      110,
      276
    ]
  },
  {
    "intent": "download a file \"http://www.example.com/songs/mp3.mp3\" over HTTP and save to \"mp3.mp3\"",
    "code": "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')",
    "slot_map": {
      "str_0": "http://www.example.com/songs/mp3.mp3",
      "str_1": "mp3.mp3"
    },
    "intent_indx": [
      390,
      3,
      126,
      5,
      387,
      329,
      29,
      318,
      8,
      30
    ]
  },
  {
    "intent": "download a file `url` over HTTP and save to `file_name`",
    "code": "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()",
    "slot_map": {
      "var_0": "url",
      "var_1": "file_name"
    },
    "intent_indx": [
      390,
      3,
      126,
      25,
      387,
      329,
      29,
      318,
      8,
      61
    ]
  },
  {
    "intent": "download a file 'http://www.example.com/' over HTTP",
    "code": "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()",
    "slot_map": {
      "str_0": "http://www.example.com/"
    },
    "intent_indx": [
      390,
      3,
      126,
      5,
      387,
      329
    ]
  },
  {
    "intent": "download a file `url` over HTTP",
    "code": "r = requests.get(url)",
    "slot_map": {
      "var_0": "url"
    },
    "intent_indx": [
      390,
      3,
      126,
      25,
      387,
      329
    ]
  },
  {
    "intent": "download a file `url` over HTTP and save to \"10MB\"",
    "code": "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)",
    "slot_map": {
      "var_0": "url",
      "str_0": "10MB"
    },
    "intent_indx": [
      390,
      3,
      126,
      25,
      387,
      329,
      29,
      318,
      8,
      5
    ]
  },
  {
    "intent": "argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`",
    "code": "parser.add_argument('--version', action='version', version='%(prog)s 2.0')",
    "slot_map": {
      "str_0": "--version",
      "str_1": "%(prog)s 2.0",
      "var_0": "parser"
    },
    "intent_indx": [
      433,
      58,
      295,
      77,
      433,
      5,
      29,
      433,
      433,
      2,
      30,
      8,
      433,
      25
    ]
  },
  {
    "intent": "remove key 'c' from dictionary `d`",
    "code": "{i: d[i] for i in d if i != 'c'}",
    "slot_map": {
      "str_0": "c",
      "var_0": "d"
    },
    "intent_indx": [
      258,
      22,
      5,
      56,
      24,
      25
    ]
  },
  {
    "intent": "Create new DataFrame object by merging columns \"key\" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively",
    "code": "pd.merge(split_df, csv_df, on=['key'], suffixes=('_left', '_right'))",
    "slot_map": {
      "str_0": "key",
      "var_0": "split_df",
      "var_1": "csv_df",
      "var_2": "split_df",
      "var_3": "csv_df",
      "var_4": "_left",
      "var_5": "_right"
    },
    "intent_indx": [
      145,
      186,
      41,
      14,
      42,
      433,
      59,
      5,
      2,
      238,
      25,
      29,
      61,
      29,
      372,
      17,
      59,
      56,
      238,
      25,
      29,
      61,
      77,
      433,
      433,
      29,
      433,
      433
    ]
  },
  {
    "intent": "Split a string `s` by space with `4` splits",
    "code": "s.split(' ', 4)",
    "slot_map": {
      "var_0": "s",
      "str_0": "4"
    },
    "intent_indx": [
      139,
      3,
      13,
      25,
      42,
      133,
      77,
      5,
      139
    ]
  },
  {
    "intent": "read keyboard-input",
    "code": "input('Enter your input:')",
    "slot_map": {},
    "intent_indx": [
      124,
      433
    ]
  },
  {
    "intent": "enable debug mode on Flask application `app`",
    "code": "app.run(debug=True)",
    "slot_map": {
      "var_0": "app"
    },
    "intent_indx": [
      433,
      433,
      276,
      140,
      384,
      433,
      25
    ]
  },
  {
    "intent": "python save list `mylist` to file object 'save.txt'",
    "code": "pickle.dump(mylist, open('save.txt', 'wb'))",
    "slot_map": {
      "var_0": "mylist",
      "str_0": "save.txt"
    },
    "intent_indx": [
      47,
      318,
      4,
      25,
      8,
      126,
      14,
      5
    ]
  },
  {
    "intent": "Multiply a matrix `P` with a 3d tensor `T` in scipy",
    "code": "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)",
    "slot_map": {
      "var_0": "P",
      "var_1": "T"
    },
    "intent_indx": [
      375,
      3,
      183,
      25,
      77,
      3,
      160,
      433,
      61,
      23,
      433
    ]
  },
  {
    "intent": "Create 3d array of zeroes of size `(3,3,3)`",
    "code": "numpy.zeros((3, 3, 3))",
    "slot_map": {
      "str_0": "(3,3,3)",
      "(str_0)": "(3,3,3)"
    },
    "intent_indx": [
      145,
      160,
      82,
      2,
      177,
      2,
      319,
      5
    ]
  },
  {
    "intent": "cut off the last word of a sentence `content`",
    "code": "\"\"\" \"\"\".join(content.split(' ')[:-1])",
    "slot_map": {
      "var_0": "content"
    },
    "intent_indx": [
      433,
      433,
      17,
      165,
      39,
      2,
      3,
      407,
      25
    ]
  },
  {
    "intent": "convert scalar `x` to array",
    "code": "x = np.asarray(x).reshape(1, -1)[(0), :]",
    "slot_map": {
      "var_0": "x"
    },
    "intent_indx": [
      10,
      433,
      25,
      8,
      82
    ]
  },
  {
    "intent": "sum all elements of nested list `L`",
    "code": "sum(sum(i) if isinstance(i, list) else i for i in L)",
    "slot_map": {
      "var_0": "L"
    },
    "intent_indx": [
      111,
      36,
      1,
      2,
      151,
      4,
      25
    ]
  },
  {
    "intent": "convert hex string '470FC614' to a float number",
    "code": "struct.unpack('!f', '470FC614'.decode('hex'))[0]",
    "slot_map": {
      "str_0": "470FC614"
    },
    "intent_indx": [
      10,
      115,
      13,
      5,
      8,
      3,
      92,
      74
    ]
  },
  {
    "intent": "Multiple each value by `2` for all keys in a dictionary `my_dict`",
    "code": "my_dict.update((x, y * 2) for x, y in list(my_dict.items()))",
    "slot_map": {
      "str_0": "2",
      "var_0": "my_dict"
    },
    "intent_indx": [
      6,
      21,
      19,
      42,
      5,
      20,
      36,
      22,
      23,
      3,
      24,
      25
    ]
  },
  {
    "intent": "running bash script 'sleep.sh'",
    "code": "subprocess.call('sleep.sh', shell=True)",
    "slot_map": {
      "str_0": "sleep.sh"
    },
    "intent_indx": [
      433,
      348,
      236,
      5
    ]
  },
  {
    "intent": "Join elements of list `l` with a comma `,`",
    "code": "\"\"\",\"\"\".join(l)",
    "slot_map": {
      "var_0": "l",
      "str_0": ","
    },
    "intent_indx": [
      272,
      1,
      2,
      4,
      25,
      77,
      3,
      250,
      5
    ]
  },
  {
    "intent": "make a comma-separated string from a list `myList`",
    "code": "myList = ','.join(map(str, myList))",
    "slot_map": {
      "var_0": "myList"
    },
    "intent_indx": [
      185,
      3,
      433,
      13,
      56,
      3,
      4,
      25
    ]
  },
  {
    "intent": "reverse the list that contains 1 to 10",
    "code": "list(reversed(list(range(10))))",
    "slot_map": {},
    "intent_indx": [
      273,
      17,
      4,
      189,
      73,
      229,
      8,
      337
    ]
  },
  {
    "intent": "remove substring 'bag,' from a string 'lamp, bag, mirror'",
    "code": "print('lamp, bag, mirror'.replace('bag,', ''))",
    "slot_map": {
      "str_0": "bag,",
      "str_1": "lamp, bag, mirror"
    },
    "intent_indx": [
      258,
      340,
      5,
      56,
      3,
      13,
      30
    ]
  },
  {
    "intent": "Reverse the order of words, delimited by `.`, in string `s`",
    "code": "\"\"\".\"\"\".join(s.split('.')[::-1])",
    "slot_map": {
      "str_0": ".",
      "var_0": "s"
    },
    "intent_indx": [
      273,
      17,
      158,
      2,
      39,
      60,
      433,
      42,
      5,
      60,
      23,
      13,
      25
    ]
  },
  {
    "intent": "convert epoch time represented as milliseconds `s` to string using format '%Y-%m-%d %H:%M:%S.%f'",
    "code": "datetime.datetime.fromtimestamp(s).strftime('%Y-%m-%d %H:%M:%S.%f')",
    "slot_map": {
      "var_0": "s",
      "str_0": "%Y-%m-%d %H:%M:%S.%f"
    },
    "intent_indx": [
      10,
      433,
      135,
      433,
      3,
      433,
      25,
      8,
      13,
      108,
      15,
      5
    ]
  },
  {
    "intent": "parse milliseconds epoch time '1236472051807' to format '%Y-%m-%d %H:%M:%S'",
    "code": "time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(1236472051807 / 1000.0))",
    "slot_map": {
      "str_0": "1236472051807",
      "str_1": "%Y-%m-%d %H:%M:%S"
    },
    "intent_indx": [
      71,
      433,
      433,
      135,
      5,
      8,
      15,
      30
    ]
  },
  {
    "intent": "get the date 7 days before the current date",
    "code": "(datetime.datetime.now() - datetime.timedelta(days=7)).date()",
    "slot_map": {},
    "intent_indx": [
      16,
      17,
      134,
      325,
      342,
      271,
      17,
      174,
      134
    ]
  },
  {
    "intent": "sum elements at index `column` of each list in list `data`",
    "code": "print(sum(row[column] for row in data))",
    "slot_map": {
      "var_0": "column",
      "var_1": "data"
    },
    "intent_indx": [
      111,
      1,
      33,
      35,
      25,
      2,
      21,
      4,
      23,
      4,
      61
    ]
  },
  {
    "intent": "sum columns of a list `array`",
    "code": "[sum(row[i] for row in array) for i in range(len(array[0]))]",
    "slot_map": {
      "var_0": "array"
    },
    "intent_indx": [
      111,
      59,
      2,
      3,
      4,
      25
    ]
  },
  {
    "intent": "encode binary string 'your string' to base64 code",
    "code": "base64.b64encode(bytes('your string', 'utf-8'))",
    "slot_map": {
      "str_0": "your string"
    },
    "intent_indx": [
      415,
      267,
      13,
      5,
      8,
      433,
      284
    ]
  },
  {
    "intent": "combine list of dictionaries `dicts` with the same keys in each list to a single dictionary",
    "code": "dict((k, [d[k] for d in dicts]) for k in dicts[0])",
    "slot_map": {
      "var_0": "dicts"
    },
    "intent_indx": [
      352,
      4,
      2,
      24,
      25,
      77,
      17,
      34,
      22,
      23,
      21,
      4,
      8,
      3,
      9,
      24
    ]
  },
  {
    "intent": "Merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`",
    "code": "{k: [d[k] for d in dicts] for k in dicts[0]}",
    "slot_map": {
      "var_0": "dicts",
      "var_1": "k"
    },
    "intent_indx": [
      237,
      3,
      151,
      24,
      25,
      11,
      3,
      363,
      24,
      42,
      429,
      151,
      19,
      77,
      17,
      34,
      22,
      61
    ]
  },
  {
    "intent": "How do I get the url parameter in a Flask view",
    "code": "request.args['myParam']",
    "slot_map": {},
    "intent_indx": [
      75,
      312,
      313,
      16,
      17,
      100,
      357,
      23,
      3,
      384,
      433
    ]
  },
  {
    "intent": "identify duplicate values in list `mylist`",
    "code": "[k for k, v in list(Counter(mylist).items()) if v > 1]",
    "slot_map": {
      "var_0": "mylist"
    },
    "intent_indx": [
      433,
      321,
      19,
      23,
      4,
      25
    ]
  },
  {
    "intent": "Insert directory 'apps' into directory `__file__`",
    "code": "sys.path.insert(1, os.path.join(os.path.dirname(__file__), 'apps'))",
    "slot_map": {
      "str_0": "apps",
      "var_0": "__file__"
    },
    "intent_indx": [
      268,
      170,
      5,
      11,
      170,
      25
    ]
  },
  {
    "intent": "modify sys.path for python module `subdir`",
    "code": "sys.path.append(os.path.join(os.path.dirname(__file__), 'subdir'))",
    "slot_map": {
      "var_0": "subdir"
    },
    "intent_indx": [
      433,
      433,
      20,
      47,
      327,
      25
    ]
  },
  {
    "intent": "Insert a 'None' value into a SQLite3 table.",
    "code": "db.execute(\"INSERT INTO present VALUES('test2', ?, 10)\", (None,))",
    "slot_map": {
      "str_0": "None"
    },
    "intent_indx": [
      268,
      3,
      5,
      19,
      11,
      3,
      433,
      369,
      155
    ]
  },
  {
    "intent": "flatten list `list_of_menuitems`",
    "code": "[image for menuitem in list_of_menuitems for image in menuitem]",
    "slot_map": {
      "var_0": "list_of_menuitems"
    },
    "intent_indx": [
      433,
      4,
      25
    ]
  },
  {
    "intent": "append elements of a set `b` to a list `a`",
    "code": "a.extend(b)",
    "slot_map": {
      "var_0": "b",
      "var_1": "a"
    },
    "intent_indx": [
      110,
      1,
      2,
      3,
      57,
      25,
      8,
      3,
      4,
      61
    ]
  },
  {
    "intent": "Append elements of a set to a list in Python",
    "code": "a.extend(list(b))",
    "slot_map": {},
    "intent_indx": [
      110,
      1,
      2,
      3,
      57,
      8,
      3,
      4,
      23,
      47
    ]
  },
  {
    "intent": "write the data of dataframe `df` into text file `np.txt`",
    "code": "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')",
    "slot_map": {
      "var_0": "df",
      "str_0": "np.txt"
    },
    "intent_indx": [
      163,
      17,
      63,
      2,
      41,
      25,
      11,
      257,
      126,
      5
    ]
  },
  {
    "intent": "write content of DataFrame `df` into text file 'c:\\\\data\\\\pandas.txt'",
    "code": "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')",
    "slot_map": {
      "var_0": "df",
      "str_0": "c:\\\\data\\\\pandas.txt"
    },
    "intent_indx": [
      163,
      125,
      2,
      41,
      25,
      11,
      257,
      126,
      5
    ]
  },
  {
    "intent": "Split a string `x` by last occurrence of character `-`",
    "code": "print(x.rpartition('-')[0])",
    "slot_map": {
      "var_0": "x",
      "str_0": "-"
    },
    "intent_indx": [
      139,
      3,
      13,
      25,
      42,
      165,
      50,
      2,
      96,
      5
    ]
  },
  {
    "intent": "get the last part of a string before the character '-'",
    "code": "print(x.rsplit('-', 1)[0])",
    "slot_map": {
      "str_0": "-"
    },
    "intent_indx": [
      16,
      17,
      165,
      433,
      2,
      3,
      13,
      271,
      17,
      96,
      5
    ]
  },
  {
    "intent": "upload file using FTP",
    "code": "ftp.storlines('STOR ' + filename, open(filename, 'r'))",
    "slot_map": {},
    "intent_indx": [
      433,
      126,
      108,
      433
    ]
  },
  {
    "intent": "add one to the hidden web element with id 'XYZ' with selenium python script",
    "code": "browser.execute_script(\"document.getElementById('XYZ').value+='1'\")",
    "slot_map": {
      "str_0": "XYZ"
    },
    "intent_indx": [
      58,
      293,
      8,
      17,
      433,
      433,
      1,
      77,
      220,
      5,
      77,
      48,
      47,
      236
    ]
  },
  {
    "intent": "create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`",
    "code": "np.maximum([2, 3, 4], [1, 5, 2])",
    "slot_map": {
      "str_0": "[2, 3, 4]",
      "str_1": "[1, 5, 2]",
      "[str_0]": "[2, 3, 4]",
      "[str_1]": "[1, 5, 2]"
    },
    "intent_indx": [
      145,
      82,
      32,
      17,
      219,
      19,
      2,
      341,
      1,
      2,
      82,
      5,
      29,
      82,
      30
    ]
  },
  {
    "intent": "print a list `l` and move first 3 elements to the end of the list",
    "code": "print(l[3:] + l[:3])",
    "slot_map": {
      "var_0": "l"
    },
    "intent_indx": [
      161,
      3,
      4,
      25,
      29,
      164,
      148,
      55,
      1,
      8,
      17,
      168,
      2,
      17,
      4
    ]
  },
  {
    "intent": "loop over files in directory '.'",
    "code": "for fn in os.listdir('.'):\n    if os.path.isfile(fn):\n        pass",
    "slot_map": {
      "str_0": "."
    },
    "intent_indx": [
      433,
      387,
      126,
      23,
      170,
      5
    ]
  },
  {
    "intent": "loop over files in directory `source`",
    "code": "for (root, dirs, filenames) in os.walk(source):\n    for f in filenames:\n        pass",
    "slot_map": {
      "var_0": "source"
    },
    "intent_indx": [
      433,
      387,
      126,
      23,
      170,
      25
    ]
  },
  {
    "intent": "create a random list of integers",
    "code": "[int(1000 * random.random()) for i in range(10000)]",
    "slot_map": {},
    "intent_indx": [
      145,
      3,
      184,
      4,
      2,
      7
    ]
  },
  {
    "intent": "Using %f with strftime() in Python to get microseconds",
    "code": "datetime.datetime.now().strftime('%H:%M:%S.%f')",
    "slot_map": {},
    "intent_indx": [
      108,
      433,
      433,
      77,
      433,
      203,
      26,
      23,
      47,
      8,
      16,
      433
    ]
  },
  {
    "intent": "Google App Engine execute GQL query 'SELECT * FROM Schedule WHERE station = $1' with parameter `foo.key()`",
    "code": "db.GqlQuery('SELECT * FROM Schedule WHERE station = $1', foo.key())",
    "slot_map": {
      "str_0": "SELECT * FROM Schedule WHERE station = $1",
      "str_1": "foo.key()"
    },
    "intent_indx": [
      433,
      433,
      433,
      136,
      433,
      266,
      5,
      77,
      357,
      30
    ]
  },
  {
    "intent": "filter rows in pandas starting with alphabet 'f' using regular expression.",
    "code": "df.b.str.contains('^f')",
    "slot_map": {
      "str_0": "f"
    },
    "intent_indx": [
      209,
      43,
      23,
      40,
      304,
      77,
      433,
      5,
      108,
      240,
      218,
      155
    ]
  },
  {
    "intent": "print a 2 dimensional list `tab` as a table with delimiters",
    "code": "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))",
    "slot_map": {
      "var_0": "tab"
    },
    "intent_indx": [
      161,
      3,
      79,
      80,
      4,
      25,
      3,
      3,
      369,
      77,
      433
    ]
  },
  {
    "intent": "pandas: delete rows in dataframe `df` based on multiple columns values",
    "code": "df.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()",
    "slot_map": {
      "var_0": "df"
    },
    "intent_indx": [
      40,
      128,
      83,
      43,
      23,
      41,
      25,
      199,
      140,
      6,
      59,
      19
    ]
  },
  {
    "intent": "format the variables `self.goals` and `self.penalties` using string formatting",
    "code": "\"\"\"({:d} goals, ${:d})\"\"\".format(self.goals, self.penalties)",
    "slot_map": {
      "str_0": "self.goals",
      "str_1": "self.penalties"
    },
    "intent_indx": [
      15,
      17,
      94,
      5,
      29,
      30,
      108,
      13,
      162
    ]
  },
  {
    "intent": "format string \"({} goals, ${})\" with variables `goals` and `penalties`",
    "code": "\"\"\"({} goals, ${})\"\"\".format(self.goals, self.penalties)",
    "slot_map": {
      "str_0": "({} goals, ${})",
      "var_0": "goals",
      "var_1": "penalties",
      "(str_0)": "({} goals, ${})"
    },
    "intent_indx": [
      15,
      13,
      5,
      77,
      94,
      25,
      29,
      61
    ]
  },
  {
    "intent": "format string \"({0.goals} goals, ${0.penalties})\"",
    "code": "\"\"\"({0.goals} goals, ${0.penalties})\"\"\".format(self)",
    "slot_map": {
      "str_0": "({0.goals} goals, ${0.penalties})",
      "(str_0)": "({0.goals} goals, ${0.penalties})"
    },
    "intent_indx": [
      15,
      13,
      5
    ]
  },
  {
    "intent": "convert list of lists `L` to list of integers",
    "code": "[int(''.join(str(d) for d in x)) for x in L]",
    "slot_map": {
      "var_0": "L"
    },
    "intent_indx": [
      10,
      4,
      2,
      4,
      25,
      8,
      4,
      2,
      7
    ]
  },
  {
    "intent": "combine elements of each list in list `L` into digits of a single integer",
    "code": "[''.join(str(d) for d in x) for x in L]",
    "slot_map": {
      "var_0": "L"
    },
    "intent_indx": [
      352,
      1,
      2,
      21,
      4,
      23,
      4,
      25,
      11,
      194,
      2,
      3,
      9,
      7
    ]
  },
  {
    "intent": "convert a list of lists `L` to list of integers",
    "code": "L = [int(''.join([str(y) for y in x])) for x in L]",
    "slot_map": {
      "var_0": "L"
    },
    "intent_indx": [
      10,
      3,
      4,
      2,
      4,
      25,
      8,
      4,
      2,
      7
    ]
  },
  {
    "intent": "write the elements of list `lines` concatenated by special character '\\n' to file `myfile`",
    "code": "myfile.write('\\n'.join(lines))",
    "slot_map": {
      "var_0": "lines",
      "str_0": "\\n",
      "var_1": "myfile"
    },
    "intent_indx": [
      163,
      17,
      1,
      2,
      4,
      25,
      433,
      42,
      433,
      96,
      5,
      8,
      126,
      61
    ]
  },
  {
    "intent": "removing an element from a list based on a predicate 'X' or 'N'",
    "code": "[x for x in ['AAT', 'XAC', 'ANT', 'TTA'] if 'X' not in x and 'N' not in x]",
    "slot_map": {
      "str_0": "X",
      "str_1": "N"
    },
    "intent_indx": [
      97,
      217,
      1,
      56,
      3,
      4,
      199,
      140,
      3,
      433,
      5,
      330,
      30
    ]
  },
  {
    "intent": "Remove duplicate words from a string `text` using regex",
    "code": "text = re.sub('\\\\b(\\\\w+)( \\\\1\\\\b)+', '\\\\1', text)",
    "slot_map": {
      "var_0": "text"
    },
    "intent_indx": [
      258,
      321,
      39,
      56,
      3,
      13,
      25,
      108,
      38
    ]
  },
  {
    "intent": "count non zero values in each column in pandas data frame",
    "code": "df.astype(bool).sum(axis=1)",
    "slot_map": {},
    "intent_indx": [
      173,
      433,
      177,
      19,
      23,
      21,
      59,
      23,
      40,
      63,
      64
    ]
  },
  {
    "intent": "search for string that matches regular expression pattern '(?<!Distillr)\\\\\\\\AcroTray\\\\.exe' in string 'C:\\\\SomeDir\\\\AcroTray.exe'",
    "code": "re.search('(?<!Distillr)\\\\\\\\AcroTray\\\\.exe', 'C:\\\\SomeDir\\\\AcroTray.exe')",
    "slot_map": {
      "str_0": "(?<!Distillr)\\\\\\\\AcroTray\\\\.exe",
      "str_1": "C:\\\\SomeDir\\\\AcroTray.exe"
    },
    "intent_indx": [
      69,
      20,
      13,
      189,
      106,
      240,
      218,
      51,
      5,
      23,
      13,
      30
    ]
  },
  {
    "intent": "split string 'QH QD JC KD JS' into a list on white spaces",
    "code": "\"\"\"QH QD JC KD JS\"\"\".split()",
    "slot_map": {
      "str_0": "QH QD JC KD JS"
    },
    "intent_indx": [
      139,
      13,
      5,
      11,
      3,
      4,
      140,
      132,
      133
    ]
  },
  {
    "intent": "search for occurrences of regex pattern '>.*<' in xml string `line`",
    "code": "print(re.search('>.*<', line).group(0))",
    "slot_map": {
      "str_0": ">.*<",
      "var_0": "line"
    },
    "intent_indx": [
      69,
      20,
      50,
      2,
      38,
      51,
      5,
      23,
      433,
      13,
      25
    ]
  },
  {
    "intent": "erase all the contents of a file `filename`",
    "code": "open(filename, 'w').close()",
    "slot_map": {
      "var_0": "filename"
    },
    "intent_indx": [
      433,
      36,
      17,
      125,
      2,
      3,
      126,
      25
    ]
  },
  {
    "intent": "convert a string into datetime using the format '%Y-%m-%d %H:%M:%S.%f'",
    "code": "datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')",
    "slot_map": {
      "str_0": "%Y-%m-%d %H:%M:%S.%f"
    },
    "intent_indx": [
      10,
      3,
      13,
      11,
      12,
      108,
      17,
      15,
      5
    ]
  },
  {
    "intent": "find the index of a list with the first element equal to '332' within the list of lists `thelist`",
    "code": "[index for index, item in enumerate(thelist) if item[0] == '332']",
    "slot_map": {
      "str_0": "332",
      "var_0": "thelist"
    },
    "intent_indx": [
      45,
      17,
      35,
      2,
      3,
      4,
      77,
      17,
      148,
      1,
      104,
      8,
      5,
      52,
      17,
      4,
      2,
      4,
      25
    ]
  },
  {
    "intent": "lower a string `text` and remove non-alphanumeric characters aside from space",
    "code": "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()",
    "slot_map": {
      "var_0": "text"
    },
    "intent_indx": [
      433,
      3,
      13,
      25,
      29,
      258,
      433,
      96,
      433,
      56,
      133
    ]
  },
  {
    "intent": "remove all non-alphanumeric characters except space from a string `text` and lower it",
    "code": "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()",
    "slot_map": {
      "var_0": "text"
    },
    "intent_indx": [
      258,
      36,
      433,
      96,
      433,
      133,
      56,
      3,
      13,
      25,
      29,
      433,
      89
    ]
  },
  {
    "intent": "subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.",
    "code": "plt.plot(x, y, label='H\\u2082O')",
    "slot_map": {
      "str_0": "H20",
      "str_1": "2",
      "str_2": "x",
      "str_3": "y"
    },
    "intent_indx": [
      433,
      257,
      5,
      77,
      30,
      3,
      433,
      23,
      336,
      309,
      20,
      82,
      188,
      29,
      211,
      155
    ]
  },
  {
    "intent": "subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.",
    "code": "plt.plot(x, y, label='$H_2O$')",
    "slot_map": {
      "str_0": "H20",
      "str_1": "2",
      "str_2": "x",
      "str_3": "y"
    },
    "intent_indx": [
      433,
      257,
      5,
      77,
      30,
      3,
      433,
      23,
      336,
      309,
      20,
      82,
      188,
      29,
      211,
      155
    ]
  },
  {
    "intent": "loop over a list `mylist` if sublists length equals 3",
    "code": "[x for x in mylist if len(x) == 3]",
    "slot_map": {
      "var_0": "mylist"
    },
    "intent_indx": [
      433,
      387,
      3,
      4,
      25,
      147,
      433,
      200,
      104,
      55
    ]
  },
  {
    "intent": "initialize a list `lst` of 100 objects Object()",
    "code": "lst = [Object() for _ in range(100)]",
    "slot_map": {
      "var_0": "lst",
      "int_0": "100"
    },
    "intent_indx": [
      433,
      3,
      4,
      25,
      2,
      259,
      14,
      14,
      203,
      26
    ]
  },
  {
    "intent": "create list `lst` containing 100 instances of object `Object`",
    "code": "lst = [Object() for i in range(100)]",
    "slot_map": {
      "var_0": "lst",
      "var_1": "Object",
      "int_0": "100"
    },
    "intent_indx": [
      145,
      4,
      25,
      32,
      259,
      345,
      2,
      14,
      61
    ]
  },
  {
    "intent": "get the content of child tag with`href` attribute whose parent has css `someclass`",
    "code": "self.driver.find_element_by_css_selector('.someclass a').get_attribute('href')",
    "slot_map": {
      "var_0": "href",
      "var_1": "someclass"
    },
    "intent_indx": [
      16,
      17,
      125,
      2,
      433,
      70,
      433,
      326,
      221,
      433,
      322,
      433,
      61
    ]
  },
  {
    "intent": "joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'Date_Time' in both dataframes",
    "code": "df1.merge(df2, on='Date_Time')",
    "slot_map": {
      "var_0": "df1",
      "var_1": "df2",
      "str_0": "Date_Time"
    },
    "intent_indx": [
      433,
      63,
      56,
      41,
      25,
      77,
      63,
      56,
      41,
      61,
      199,
      140,
      78,
      19,
      2,
      59,
      5,
      23,
      433,
      238
    ]
  },
  {
    "intent": "use `%s` operator to print variable values `str1` inside a string",
    "code": "'first string is: %s, second one is: %s' % (str1, 'geo.tif')",
    "slot_map": {
      "str_0": "%s",
      "var_0": "str1"
    },
    "intent_indx": [
      298,
      5,
      433,
      8,
      161,
      94,
      19,
      25,
      44,
      3,
      13
    ]
  },
  {
    "intent": "Split a string by a delimiter in python",
    "code": "[x.strip() for x in '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')]",
    "slot_map": {},
    "intent_indx": [
      139,
      3,
      13,
      42,
      3,
      314,
      23,
      47
    ]
  },
  {
    "intent": "check if directory `directory ` exists and create it if necessary",
    "code": "if (not os.path.exists(directory)):\n    os.makedirs(directory)",
    "slot_map": {
      "str_0": "directory"
    },
    "intent_indx": [
      227,
      147,
      170,
      5,
      265,
      29,
      145,
      89,
      147,
      433
    ]
  },
  {
    "intent": "check if a directory `path` exists and create it if necessary",
    "code": "try:\n    os.makedirs(path)\nexcept OSError:\n    if (not os.path.isdir(path)):\n        raise",
    "slot_map": {
      "var_0": "path"
    },
    "intent_indx": [
      227,
      147,
      3,
      170,
      25,
      265,
      29,
      145,
      89,
      147,
      433
    ]
  },
  {
    "intent": "check if a directory `path` exists and create it if necessary",
    "code": "distutils.dir_util.mkpath(path)",
    "slot_map": {
      "var_0": "path"
    },
    "intent_indx": [
      227,
      147,
      3,
      170,
      25,
      265,
      29,
      145,
      89,
      147,
      433
    ]
  },
  {
    "intent": "check if a directory `path` exists and create it if necessary",
    "code": "try:\n    os.makedirs(path)\nexcept OSError as exception:\n    if (exception.errno != errno.EEXIST):\n        raise",
    "slot_map": {
      "var_0": "path"
    },
    "intent_indx": [
      227,
      147,
      3,
      170,
      25,
      265,
      29,
      145,
      89,
      147,
      433
    ]
  },
  {
    "intent": "Replace a separate word 'H3' by 'H1' in a string 'text'",
    "code": "re.sub('\\\\bH3\\\\b', 'H1', text)",
    "slot_map": {
      "str_0": "H3",
      "str_1": "H1",
      "str_2": "text"
    },
    "intent_indx": [
      131,
      3,
      95,
      39,
      5,
      42,
      30,
      23,
      3,
      13,
      188
    ]
  },
  {
    "intent": "substitute ASCII letters in string 'aas30dsa20' with empty string ''",
    "code": "re.sub('\\\\D', '', 'aas30dsa20')",
    "slot_map": {
      "str_0": "aas30dsa20",
      "str_1": ""
    },
    "intent_indx": [
      433,
      366,
      347,
      23,
      13,
      5,
      77,
      144,
      13,
      30
    ]
  },
  {
    "intent": "get digits only from a string `aas30dsa20` using lambda function",
    "code": "\"\"\"\"\"\".join([x for x in 'aas30dsa20' if x.isdigit()])",
    "slot_map": {
      "var_0": "aas30dsa20"
    },
    "intent_indx": [
      16,
      194,
      338,
      56,
      3,
      13,
      25,
      108,
      66,
      67
    ]
  },
  {
    "intent": "access a tag called \"name\" in beautifulsoup `soup`",
    "code": "print(soup.find('name').string)",
    "slot_map": {
      "str_0": "name",
      "var_0": "soup"
    },
    "intent_indx": [
      433,
      3,
      70,
      433,
      5,
      23,
      68,
      25
    ]
  },
  {
    "intent": "get a dictionary `records` of key-value pairs in PyMongo cursor `cursor`",
    "code": "records = dict((record['_id'], record) for record in cursor)",
    "slot_map": {
      "var_0": "records",
      "var_1": "cursor"
    },
    "intent_indx": [
      16,
      3,
      24,
      25,
      2,
      396,
      88,
      23,
      433,
      433,
      61
    ]
  },
  {
    "intent": "Create new matrix object  by concatenating data from matrix A and matrix B",
    "code": "np.concatenate((A, B))",
    "slot_map": {},
    "intent_indx": [
      145,
      186,
      183,
      14,
      42,
      429,
      63,
      56,
      183,
      3,
      29,
      183,
      433
    ]
  },
  {
    "intent": "concat two matrices `A` and `B` in numpy",
    "code": "np.vstack((A, B))",
    "slot_map": {
      "var_0": "A",
      "var_1": "B"
    },
    "intent_indx": [
      433,
      28,
      183,
      25,
      29,
      61,
      23,
      81
    ]
  },
  {
    "intent": "Get the characters count in a file `filepath`",
    "code": "os.stat(filepath).st_size",
    "slot_map": {
      "var_0": "filepath"
    },
    "intent_indx": [
      16,
      17,
      96,
      173,
      23,
      3,
      126,
      25
    ]
  },
  {
    "intent": "count the occurrences of item \"a\" in list `l`",
    "code": "l.count('a')",
    "slot_map": {
      "str_0": "a",
      "var_0": "l"
    },
    "intent_indx": [
      173,
      17,
      50,
      2,
      37,
      5,
      23,
      4,
      25
    ]
  },
  {
    "intent": "count the occurrences of items in list `l`",
    "code": "Counter(l)",
    "slot_map": {
      "var_0": "l"
    },
    "intent_indx": [
      173,
      17,
      50,
      2,
      37,
      23,
      4,
      25
    ]
  },
  {
    "intent": "count the occurrences of items in list `l`",
    "code": "[[x, l.count(x)] for x in set(l)]",
    "slot_map": {
      "var_0": "l"
    },
    "intent_indx": [
      173,
      17,
      50,
      2,
      37,
      23,
      4,
      25
    ]
  },
  {
    "intent": "count the occurrences of items in list `l`",
    "code": "dict(((x, l.count(x)) for x in set(l)))",
    "slot_map": {
      "var_0": "l"
    },
    "intent_indx": [
      173,
      17,
      50,
      2,
      37,
      23,
      4,
      25
    ]
  },
  {
    "intent": "count the occurrences of item \"b\" in list `l`",
    "code": "l.count('b')",
    "slot_map": {
      "str_0": "b",
      "var_0": "l"
    },
    "intent_indx": [
      173,
      17,
      50,
      2,
      37,
      5,
      23,
      4,
      25
    ]
  },
  {
    "intent": "copy file `srcfile` to directory `dstdir`",
    "code": "shutil.copy(srcfile, dstdir)",
    "slot_map": {
      "var_0": "srcfile",
      "var_1": "dstdir"
    },
    "intent_indx": [
      310,
      126,
      25,
      8,
      170,
      61
    ]
  },
  {
    "intent": "find the key associated with the largest value in dictionary `x` whilst key is non-zero value",
    "code": "max(k for k, v in x.items() if v != 0)",
    "slot_map": {
      "var_0": "x"
    },
    "intent_indx": [
      45,
      17,
      22,
      277,
      77,
      17,
      411,
      19,
      23,
      24,
      25,
      433,
      22,
      149,
      433,
      19
    ]
  },
  {
    "intent": "get the largest key whose not associated with value of 0 in dictionary `x`",
    "code": "(k for k, v in x.items() if v != 0)",
    "slot_map": {
      "var_0": "x"
    },
    "intent_indx": [
      16,
      17,
      411,
      22,
      221,
      103,
      277,
      77,
      19,
      2,
      105,
      23,
      24,
      25
    ]
  },
  {
    "intent": "get the largest key in a dictionary `x` with non-zero value",
    "code": "max(k for k, v in x.items() if v != 0)",
    "slot_map": {
      "var_0": "x"
    },
    "intent_indx": [
      16,
      17,
      411,
      22,
      23,
      3,
      24,
      25,
      77,
      433,
      19
    ]
  },
  {
    "intent": "Put the curser at beginning of the file",
    "code": "file.seek(0)",
    "slot_map": {},
    "intent_indx": [
      433,
      17,
      433,
      33,
      166,
      2,
      17,
      126
    ]
  },
  {
    "intent": "combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`",
    "code": "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])",
    "slot_map": {
      "str_0": "b",
      "str_1": "a",
      "var_0": "df",
      "str_2": "c",
      "var_1": "df"
    },
    "intent_indx": [
      352,
      19,
      56,
      59,
      5,
      29,
      59,
      30,
      2,
      41,
      25,
      11,
      59,
      188,
      2,
      433,
      25
    ]
  },
  {
    "intent": "remove key 'ele' from dictionary `d`",
    "code": "del d['ele']",
    "slot_map": {
      "str_0": "ele",
      "var_0": "d"
    },
    "intent_indx": [
      258,
      22,
      5,
      56,
      24,
      25
    ]
  },
  {
    "intent": "Update datetime field in `MyModel` to be the existing `timestamp` plus 100 years",
    "code": "MyModel.objects.update(timestamp=F('timestamp') + timedelta(days=36524.25))",
    "slot_map": {
      "var_0": "MyModel",
      "var_1": "timestamp",
      "int_0": "100"
    },
    "intent_indx": [
      233,
      12,
      301,
      23,
      25,
      8,
      349,
      17,
      433,
      61,
      433,
      259,
      392
    ]
  },
  {
    "intent": "merge list `['it']` and list `['was']` and list `['annoying']` into one list",
    "code": "['it'] + ['was'] + ['annoying']",
    "slot_map": {
      "str_0": "['it']",
      "str_1": "['was']",
      "str_2": "['annoying']",
      "[str_0]": "['it']",
      "[str_1]": "['was']",
      "[str_2]": "['annoying']"
    },
    "intent_indx": [
      237,
      4,
      5,
      29,
      4,
      30,
      29,
      4,
      188,
      11,
      293,
      4
    ]
  },
  {
    "intent": "increment a value with leading zeroes in a number `x`",
    "code": "str(int(x) + 1).zfill(len(x))",
    "slot_map": {
      "var_0": "x"
    },
    "intent_indx": [
      433,
      3,
      19,
      77,
      433,
      177,
      23,
      3,
      74,
      25
    ]
  },
  {
    "intent": "check if a pandas dataframe `df`'s index is sorted",
    "code": "all(df.index[:-1] <= df.index[1:])",
    "slot_map": {
      "var_0": "df"
    },
    "intent_indx": [
      227,
      147,
      3,
      40,
      41,
      25,
      256,
      35,
      149,
      216
    ]
  },
  {
    "intent": "Convert tuple `t` to list",
    "code": "list(t)",
    "slot_map": {
      "var_0": "t"
    },
    "intent_indx": [
      10,
      112,
      25,
      8,
      4
    ]
  },
  {
    "intent": "Convert list `t` to tuple",
    "code": "tuple(l)",
    "slot_map": {
      "var_0": "t"
    },
    "intent_indx": [
      10,
      4,
      25,
      8,
      112
    ]
  },
  {
    "intent": "Convert tuple `level1` to list",
    "code": "level1 = map(list, level1)",
    "slot_map": {
      "var_0": "level1"
    },
    "intent_indx": [
      10,
      112,
      25,
      8,
      4
    ]
  },
  {
    "intent": "send the output of pprint object `dataobject` to file `logFile`",
    "code": "pprint.pprint(dataobject, logFile)",
    "slot_map": {
      "var_0": "dataobject",
      "var_1": "logFile"
    },
    "intent_indx": [
      433,
      17,
      248,
      2,
      433,
      14,
      25,
      8,
      126,
      61
    ]
  },
  {
    "intent": "get index of rows in column 'BoolCol'",
    "code": "df.loc[df['BoolCol']]",
    "slot_map": {
      "str_0": "BoolCol"
    },
    "intent_indx": [
      16,
      35,
      2,
      43,
      23,
      59,
      5
    ]
  },
  {
    "intent": "Create a list containing the indexes of rows where the value of column 'BoolCol' in dataframe `df` are equal to True",
    "code": "df.iloc[np.flatnonzero(df['BoolCol'])]",
    "slot_map": {
      "str_0": "BoolCol",
      "var_0": "df"
    },
    "intent_indx": [
      145,
      3,
      4,
      32,
      17,
      35,
      2,
      43,
      152,
      17,
      19,
      2,
      59,
      5,
      23,
      41,
      25,
      234,
      104,
      8,
      354
    ]
  },
  {
    "intent": "get list of indexes of rows where column 'BoolCol' values match True",
    "code": "df[df['BoolCol'] == True].index.tolist()",
    "slot_map": {
      "str_0": "BoolCol"
    },
    "intent_indx": [
      16,
      4,
      2,
      35,
      2,
      43,
      152,
      59,
      5,
      19,
      106,
      354
    ]
  },
  {
    "intent": "get index of rows in dataframe `df` which column 'BoolCol' matches value True",
    "code": "df[df['BoolCol']].index.tolist()",
    "slot_map": {
      "var_0": "df",
      "str_0": "BoolCol"
    },
    "intent_indx": [
      16,
      35,
      2,
      43,
      23,
      41,
      25,
      197,
      59,
      5,
      106,
      19,
      354
    ]
  },
  {
    "intent": "change working directory to the directory `owd`",
    "code": "os.chdir(owd)",
    "slot_map": {
      "var_0": "owd"
    },
    "intent_indx": [
      213,
      410,
      170,
      8,
      17,
      170,
      25
    ]
  },
  {
    "intent": "insert data from a string `testfield` to sqlite db `c`",
    "code": "c.execute(\"INSERT INTO test VALUES (?, 'bar')\", (testfield,))",
    "slot_map": {
      "var_0": "testfield",
      "var_1": "c"
    },
    "intent_indx": [
      268,
      63,
      56,
      3,
      13,
      25,
      8,
      433,
      433,
      61
    ]
  },
  {
    "intent": "decode string \"\\\\x89\\\\n\" into a normal string",
    "code": "\"\"\"\\\\x89\\\\n\"\"\".decode('string_escape')",
    "slot_map": {
      "str_0": "\\\\x89\\\\n"
    },
    "intent_indx": [
      178,
      13,
      5,
      11,
      3,
      433,
      13
    ]
  },
  {
    "intent": "convert a raw string `raw_string` into a normal string",
    "code": "raw_string.decode('string_escape')",
    "slot_map": {
      "var_0": "raw_string"
    },
    "intent_indx": [
      10,
      3,
      433,
      13,
      25,
      11,
      3,
      433,
      13
    ]
  },
  {
    "intent": "convert a raw string `raw_byte_string` into a normal string",
    "code": "raw_byte_string.decode('unicode_escape')",
    "slot_map": {
      "var_0": "raw_byte_string"
    },
    "intent_indx": [
      10,
      3,
      433,
      13,
      25,
      11,
      3,
      433,
      13
    ]
  },
  {
    "intent": "split a string `s` with into all strings of repeated characters",
    "code": "[m.group(0) for m in re.finditer('(\\\\d)\\\\1*', s)]",
    "slot_map": {
      "var_0": "s"
    },
    "intent_indx": [
      139,
      3,
      13,
      25,
      77,
      11,
      36,
      13,
      2,
      433,
      96
    ]
  },
  {
    "intent": "scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none",
    "code": "plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')",
    "slot_map": {
      "str_0": "np.random.randn(100)"
    },
    "intent_indx": [
      433,
      3,
      235,
      77,
      433,
      60,
      433,
      291,
      2,
      5,
      29,
      433,
      214,
      104,
      8,
      433
    ]
  },
  {
    "intent": "do a scatter plot with empty circles",
    "code": "plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')",
    "slot_map": {},
    "intent_indx": [
      312,
      3,
      433,
      235,
      77,
      144,
      433
    ]
  },
  {
    "intent": "remove a div with a id `main-content` using beautifulsoup",
    "code": "soup.find('div', id='main-content').decompose()",
    "slot_map": {
      "str_0": "main-content"
    },
    "intent_indx": [
      258,
      3,
      433,
      77,
      3,
      220,
      5,
      108,
      68
    ]
  },
  {
    "intent": "filter rows containing key word `ball` in column `ids`",
    "code": "df[df['ids'].str.contains('ball')]",
    "slot_map": {
      "var_0": "ball",
      "var_1": "ids"
    },
    "intent_indx": [
      209,
      43,
      32,
      22,
      39,
      25,
      23,
      59,
      61
    ]
  },
  {
    "intent": "convert index at level 0 into a column in dataframe `df`",
    "code": "df.reset_index(level=0, inplace=True)",
    "slot_map": {
      "var_0": "df"
    },
    "intent_indx": [
      10,
      35,
      33,
      230,
      105,
      11,
      3,
      59,
      23,
      41,
      25
    ]
  },
  {
    "intent": "Add indexes in a data frame `df` to a column `index1`",
    "code": "df['index1'] = df.index",
    "slot_map": {
      "var_0": "df",
      "var_1": "index1"
    },
    "intent_indx": [
      58,
      35,
      23,
      3,
      63,
      64,
      25,
      8,
      3,
      59,
      61
    ]
  },
  {
    "intent": "convert pandas index in a dataframe to columns",
    "code": "df.reset_index(level=['tick', 'obs'])",
    "slot_map": {},
    "intent_indx": [
      10,
      40,
      35,
      23,
      3,
      41,
      8,
      59
    ]
  },
  {
    "intent": "Get reverse of list items from list 'b' using extended slicing",
    "code": "[x[::-1] for x in b]",
    "slot_map": {
      "str_0": "b"
    },
    "intent_indx": [
      16,
      273,
      2,
      4,
      37,
      56,
      4,
      5,
      108,
      433,
      433
    ]
  },
  {
    "intent": "join each element in array `a` with element at the same index in array `b` as a tuple",
    "code": "np.array([zip(x, y) for x, y in zip(a, b)])",
    "slot_map": {
      "var_0": "a",
      "var_1": "b"
    },
    "intent_indx": [
      272,
      21,
      1,
      23,
      82,
      25,
      77,
      1,
      33,
      17,
      34,
      35,
      23,
      82,
      61,
      3,
      3,
      112
    ]
  },
  {
    "intent": "zip two 2-d arrays `a` and `b`",
    "code": "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)",
    "slot_map": {
      "var_0": "a",
      "var_1": "b"
    },
    "intent_indx": [
      27,
      28,
      433,
      82,
      25,
      29,
      61
    ]
  },
  {
    "intent": "convert list `list_of_ints` into a comma separated string",
    "code": "\"\"\",\"\"\".join([str(i) for i in list_of_ints])",
    "slot_map": {
      "var_0": "list_of_ints"
    },
    "intent_indx": [
      10,
      4,
      25,
      11,
      3,
      250,
      323,
      13
    ]
  },
  {
    "intent": "Send a post request with raw data `DATA` and basic authentication with `username` and `password`",
    "code": "requests.post(url, data=DATA, headers=HEADERS_DICT, auth=(username, password))",
    "slot_map": {
      "var_0": "DATA",
      "var_1": "username",
      "var_2": "password"
    },
    "intent_indx": [
      433,
      3,
      386,
      99,
      77,
      433,
      63,
      25,
      29,
      433,
      433,
      77,
      61,
      29,
      62
    ]
  },
  {
    "intent": "Find last occurrence of character '}' in string \"abcd}def}\"",
    "code": "'abcd}def}'.rfind('}')",
    "slot_map": {
      "str_0": "}",
      "str_1": "abcd}def}"
    },
    "intent_indx": [
      45,
      165,
      50,
      2,
      96,
      5,
      23,
      13,
      30
    ]
  },
  {
    "intent": "Iterate ove list `[1, 2, 3]` using list comprehension",
    "code": "print([item for item in [1, 2, 3]])",
    "slot_map": {
      "str_0": "[1, 2, 3]",
      "[str_0]": "[1, 2, 3]"
    },
    "intent_indx": [
      423,
      433,
      4,
      5,
      108,
      4,
      332
    ]
  },
  {
    "intent": "extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples",
    "code": "[(x['x'], x['y']) for x in d]",
    "slot_map": {
      "str_0": "x",
      "str_1": "y",
      "var_0": "d"
    },
    "intent_indx": [
      102,
      36,
      17,
      19,
      77,
      22,
      5,
      29,
      30,
      56,
      3,
      4,
      2,
      24,
      25,
      8,
      4,
      2,
      31
    ]
  },
  {
    "intent": "get the filename without the extension from file 'hemanth.txt'",
    "code": "print(os.path.splitext(os.path.basename('hemanth.txt'))[0])",
    "slot_map": {
      "str_0": "hemanth.txt"
    },
    "intent_indx": [
      16,
      17,
      433,
      101,
      17,
      433,
      56,
      126,
      5
    ]
  },
  {
    "intent": "create a dictionary by adding each two adjacent elements in tuple `x` as key/value pair to it",
    "code": "dict(x[i:i + 2] for i in range(0, len(x), 2))",
    "slot_map": {
      "var_0": "x"
    },
    "intent_indx": [
      145,
      3,
      24,
      42,
      433,
      21,
      28,
      433,
      1,
      23,
      112,
      25,
      3,
      87,
      88,
      8,
      89
    ]
  },
  {
    "intent": "create a list containing flattened list `[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]`",
    "code": "values = sum([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], [])",
    "slot_map": {
      "str_0": "[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]",
      "[str_0]": "[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]"
    },
    "intent_indx": [
      145,
      3,
      4,
      32,
      433,
      4,
      5
    ]
  },
  {
    "intent": "select rows in a dataframe `df` column 'closing_price' between two values 99 and 101",
    "code": "df = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]",
    "slot_map": {
      "var_0": "df",
      "str_0": "closing_price",
      "int_0": "99",
      "int_1": "101"
    },
    "intent_indx": [
      76,
      43,
      23,
      3,
      41,
      25,
      59,
      5,
      269,
      28,
      19,
      259,
      29,
      433
    ]
  },
  {
    "intent": "replace all occurences of newlines `\\n` with `<br>` in dataframe `df`",
    "code": "df.replace({'\\n': '<br>'}, regex=True)",
    "slot_map": {
      "str_0": "\\n",
      "str_1": "<br>",
      "var_0": "df"
    },
    "intent_indx": [
      131,
      36,
      433,
      2,
      433,
      5,
      77,
      30,
      23,
      41,
      25
    ]
  },
  {
    "intent": "replace all occurrences of a string `\\n` by string `<br>` in a pandas data frame `df`",
    "code": "df.replace({'\\n': '<br>'}, regex=True)",
    "slot_map": {
      "str_0": "\\n",
      "str_1": "<br>",
      "var_0": "df"
    },
    "intent_indx": [
      131,
      36,
      50,
      2,
      3,
      13,
      5,
      42,
      13,
      30,
      23,
      3,
      40,
      63,
      64,
      25
    ]
  },
  {
    "intent": "create a list containing each two adjacent letters in string `word` as its elements",
    "code": "[(x + y) for x, y in zip(word, word[1:])]",
    "slot_map": {
      "var_0": "word"
    },
    "intent_indx": [
      145,
      3,
      4,
      32,
      21,
      28,
      433,
      347,
      23,
      13,
      25,
      3,
      89,
      1
    ]
  },
  {
    "intent": "Get a list of pairs from a string `word` using lambda function",
    "code": "list(map(lambda x, y: x + y, word[:-1], word[1:]))",
    "slot_map": {
      "var_0": "word"
    },
    "intent_indx": [
      16,
      3,
      4,
      2,
      88,
      56,
      3,
      13,
      25,
      108,
      66,
      67
    ]
  },
  {
    "intent": "extract a url from a string `myString`",
    "code": "print(re.findall('(https?://[^\\\\s]+)', myString))",
    "slot_map": {
      "var_0": "myString"
    },
    "intent_indx": [
      102,
      3,
      100,
      56,
      3,
      13,
      25
    ]
  },
  {
    "intent": "extract a url from a string `myString`",
    "code": "print(re.search('(?P<url>https?://[^\\\\s]+)', myString).group('url'))",
    "slot_map": {
      "var_0": "myString"
    },
    "intent_indx": [
      102,
      3,
      100,
      56,
      3,
      13,
      25
    ]
  },
  {
    "intent": "remove all special characters, punctuation and spaces from a string `mystring` using regex",
    "code": "re.sub('[^A-Za-z0-9]+', '', mystring)",
    "slot_map": {
      "var_0": "mystring"
    },
    "intent_indx": [
      258,
      36,
      433,
      96,
      60,
      98,
      29,
      133,
      56,
      3,
      13,
      25,
      108,
      38
    ]
  },
  {
    "intent": "create a DatetimeIndex containing 13 periods of the second friday of each month starting from date '2016-01-01'",
    "code": "pd.date_range('2016-01-01', freq='WOM-2FRI', periods=13)",
    "slot_map": {
      "str_0": "2016-01-01",
      "int_0": "13"
    },
    "intent_indx": [
      145,
      3,
      433,
      32,
      259,
      433,
      2,
      17,
      118,
      433,
      2,
      21,
      374,
      304,
      56,
      134,
      5
    ]
  },
  {
    "intent": "Create multidimensional array `matrix` with 3 rows and 2 columns in python",
    "code": "matrix = [[a, b], [c, d], [e, f]]",
    "slot_map": {
      "var_0": "matrix"
    },
    "intent_indx": [
      145,
      433,
      82,
      25,
      77,
      55,
      43,
      29,
      79,
      59,
      23,
      47
    ]
  },
  {
    "intent": "replace spaces with underscore",
    "code": "mystring.replace(' ', '_')",
    "slot_map": {},
    "intent_indx": [
      131,
      133,
      77,
      433
    ]
  },
  {
    "intent": "get an absolute file path of file 'mydir/myfile.txt'",
    "code": "os.path.abspath('mydir/myfile.txt')",
    "slot_map": {
      "str_0": "mydir/myfile.txt"
    },
    "intent_indx": [
      16,
      217,
      433,
      126,
      193,
      2,
      126,
      5
    ]
  },
  {
    "intent": "split string `my_string` on white spaces",
    "code": "\"\"\" \"\"\".join(my_string.split())",
    "slot_map": {
      "var_0": "my_string"
    },
    "intent_indx": [
      139,
      13,
      25,
      140,
      132,
      133
    ]
  },
  {
    "intent": "get filename without extension from file `filename`",
    "code": "os.path.splitext(filename)[0]",
    "slot_map": {
      "var_0": "filename"
    },
    "intent_indx": [
      16,
      433,
      101,
      433,
      56,
      126,
      25
    ]
  },
  {
    "intent": "get a list containing the sum of each element `i` in list `l` plus the previous elements",
    "code": "[sum(l[:i]) for i, _ in enumerate(l)]",
    "slot_map": {
      "var_0": "i",
      "var_1": "l"
    },
    "intent_indx": [
      16,
      3,
      4,
      32,
      17,
      111,
      2,
      21,
      1,
      25,
      23,
      4,
      61,
      433,
      17,
      433,
      1
    ]
  },
  {
    "intent": "split a string `Docs/src/Scripts/temp` by `/` keeping `/` in the result",
    "code": "\"\"\"Docs/src/Scripts/temp\"\"\".replace('/', '/\\x00/').split('\\x00')",
    "slot_map": {
      "str_0": "Docs/src/Scripts/temp",
      "str_1": "/",
      "str_2": "/"
    },
    "intent_indx": [
      139,
      3,
      13,
      5,
      42,
      30,
      433,
      30,
      23,
      17,
      433
    ]
  },
  {
    "intent": "shuffle columns of an numpy array 'r'",
    "code": "np.random.shuffle(np.transpose(r))",
    "slot_map": {
      "str_0": "r"
    },
    "intent_indx": [
      433,
      59,
      2,
      217,
      81,
      82,
      5
    ]
  },
  {
    "intent": "copy all values in a column 'B' to a new column 'D' in a pandas data frame 'df'",
    "code": "df['D'] = df['B']",
    "slot_map": {
      "str_0": "B",
      "str_1": "D",
      "str_2": "df"
    },
    "intent_indx": [
      310,
      36,
      19,
      23,
      3,
      59,
      5,
      8,
      3,
      186,
      59,
      30,
      23,
      3,
      40,
      63,
      64,
      188
    ]
  },
  {
    "intent": "find a value within nested json 'data' where the key inside another key 'B' is unknown.",
    "code": "list(data['A']['B'].values())[0]['maindata'][0]['Info']",
    "slot_map": {
      "str_0": "data",
      "str_1": "B"
    },
    "intent_indx": [
      45,
      3,
      19,
      52,
      151,
      176,
      5,
      152,
      17,
      22,
      44,
      171,
      22,
      30,
      149,
      433,
      155
    ]
  },
  {
    "intent": "check characters of string `string` are true predication of function `predicate`",
    "code": "all(predicate(x) for x in string)",
    "slot_map": {
      "var_0": "string",
      "var_1": "predicate"
    },
    "intent_indx": [
      227,
      96,
      2,
      13,
      25,
      234,
      354,
      433,
      2,
      67,
      61
    ]
  },
  {
    "intent": "determine number of files on a drive with python",
    "code": "os.statvfs('/').f_files - os.statvfs('/').f_ffree",
    "slot_map": {},
    "intent_indx": [
      433,
      74,
      2,
      126,
      140,
      3,
      433,
      77,
      47
    ]
  },
  {
    "intent": "how to get a single result from a SQLite query in python?",
    "code": "cursor.fetchone()[0]",
    "slot_map": {},
    "intent_indx": [
      75,
      8,
      16,
      3,
      9,
      433,
      56,
      3,
      433,
      266,
      23,
      47,
      49
    ]
  },
  {
    "intent": "convert string `user_input` into a list of integers `user_list`",
    "code": "user_list = [int(number) for number in user_input.split(',')]",
    "slot_map": {
      "var_0": "user_input",
      "var_1": "user_list"
    },
    "intent_indx": [
      10,
      13,
      25,
      11,
      3,
      4,
      2,
      7,
      61
    ]
  },
  {
    "intent": "Get a list of integers by splitting  a string `user` with comma",
    "code": "[int(s) for s in user.split(',')]",
    "slot_map": {
      "var_0": "user"
    },
    "intent_indx": [
      16,
      3,
      4,
      2,
      7,
      42,
      403,
      3,
      13,
      25,
      77,
      250
    ]
  },
  {
    "intent": "Sorting a Python list by two criteria",
    "code": "sorted(list, key=lambda x: (x[0], -x[1]))",
    "slot_map": {},
    "intent_indx": [
      274,
      3,
      47,
      4,
      42,
      28,
      433
    ]
  },
  {
    "intent": "sort a list of objects `ut`, based on a function `cmpfun` in descending order",
    "code": "ut.sort(key=cmpfun, reverse=True)",
    "slot_map": {
      "var_0": "ut",
      "var_1": "cmpfun"
    },
    "intent_indx": [
      117,
      3,
      4,
      2,
      14,
      25,
      60,
      199,
      140,
      3,
      67,
      61,
      23,
      121,
      158
    ]
  },
  {
    "intent": "reverse list `ut` based on the `count` attribute of each object",
    "code": "ut.sort(key=lambda x: x.count, reverse=True)",
    "slot_map": {
      "var_0": "ut",
      "var_1": "count"
    },
    "intent_indx": [
      273,
      4,
      25,
      199,
      140,
      17,
      61,
      326,
      2,
      21,
      14
    ]
  },
  {
    "intent": "sort a list of objects `ut` in reverse order by their `count` property",
    "code": "ut.sort(key=lambda x: x.count, reverse=True)",
    "slot_map": {
      "var_0": "ut",
      "var_1": "count"
    },
    "intent_indx": [
      117,
      3,
      4,
      2,
      14,
      25,
      23,
      273,
      158,
      42,
      285,
      61,
      433
    ]
  },
  {
    "intent": "click a href button 'Send' with selenium",
    "code": "driver.find_element_by_partial_link_text('Send').click()",
    "slot_map": {
      "str_0": "Send"
    },
    "intent_indx": [
      433,
      3,
      433,
      424,
      5,
      77,
      48
    ]
  },
  {
    "intent": "click a href button having text `Send InMail` with selenium",
    "code": "driver.findElement(By.linkText('Send InMail')).click()",
    "slot_map": {
      "str_0": "Send InMail"
    },
    "intent_indx": [
      433,
      3,
      433,
      424,
      90,
      257,
      5,
      77,
      48
    ]
  },
  {
    "intent": "click a href button with text 'Send InMail' with selenium",
    "code": "driver.find_element_by_link_text('Send InMail').click()",
    "slot_map": {
      "str_0": "Send InMail"
    },
    "intent_indx": [
      433,
      3,
      433,
      424,
      77,
      257,
      5,
      77,
      48
    ]
  },
  {
    "intent": "cast an int `i` to a string and concat to string 'ME'",
    "code": "'ME' + str(i)",
    "slot_map": {
      "var_0": "i",
      "str_0": "ME"
    },
    "intent_indx": [
      433,
      217,
      72,
      25,
      8,
      3,
      13,
      29,
      433,
      8,
      13,
      5
    ]
  },
  {
    "intent": "Sorting data in DataFrame Pandas",
    "code": "df.sort_values(['System_num', 'Dis'])",
    "slot_map": {},
    "intent_indx": [
      274,
      63,
      23,
      41,
      40
    ]
  },
  {
    "intent": "prepend the line '#test firstline\\n' to the contents of file 'infile' and save as the file 'outfile'",
    "code": "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())",
    "slot_map": {
      "str_0": "#test firstline\\n",
      "str_1": "infile",
      "str_2": "outfile"
    },
    "intent_indx": [
      433,
      17,
      167,
      5,
      8,
      17,
      125,
      2,
      126,
      30,
      29,
      318,
      3,
      17,
      126,
      188
    ]
  },
  {
    "intent": "sort a list `l` by length of value in tuple",
    "code": "l.sort(key=lambda t: len(t[1]), reverse=True)",
    "slot_map": {
      "var_0": "l"
    },
    "intent_indx": [
      117,
      3,
      4,
      25,
      42,
      200,
      2,
      19,
      23,
      112
    ]
  },
  {
    "intent": "split string `s` by words that ends with 'd'",
    "code": "re.findall('\\\\b(\\\\w+)d\\\\b', s)",
    "slot_map": {
      "var_0": "s",
      "str_0": "d"
    },
    "intent_indx": [
      139,
      13,
      25,
      42,
      39,
      189,
      168,
      77,
      5
    ]
  },
  {
    "intent": "return `True` if string `foobarrrr` contains regex `ba[rzd]`",
    "code": "bool(re.search('ba[rzd]', 'foobarrrr'))",
    "slot_map": {
      "var_0": "True",
      "var_1": "foobarrrr",
      "str_0": "ba[rzd]"
    },
    "intent_indx": [
      156,
      25,
      147,
      13,
      61,
      73,
      38,
      5
    ]
  },
  {
    "intent": "Removing duplicates in list `t`",
    "code": "list(set(t))",
    "slot_map": {
      "var_0": "t"
    },
    "intent_indx": [
      97,
      321,
      23,
      4,
      25
    ]
  },
  {
    "intent": "Removing duplicates in list `source_list`",
    "code": "list(set(source_list))",
    "slot_map": {
      "var_0": "source_list"
    },
    "intent_indx": [
      97,
      321,
      23,
      4,
      25
    ]
  },
  {
    "intent": "Removing duplicates in list `abracadabra`",
    "code": "list(OrderedDict.fromkeys('abracadabra'))",
    "slot_map": {
      "var_0": "abracadabra"
    },
    "intent_indx": [
      97,
      321,
      23,
      4,
      25
    ]
  },
  {
    "intent": "Convert array `a` into a list",
    "code": "numpy.array(a).reshape(-1).tolist()",
    "slot_map": {
      "var_0": "a"
    },
    "intent_indx": [
      10,
      82,
      25,
      11,
      3,
      4
    ]
  },
  {
    "intent": "Convert the first row of numpy matrix `a` to a list",
    "code": "numpy.array(a)[0].tolist()",
    "slot_map": {
      "var_0": "a"
    },
    "intent_indx": [
      10,
      17,
      148,
      43,
      2,
      81,
      183,
      25,
      8,
      3,
      4
    ]
  },
  {
    "intent": "In `soup`, get the content of the sibling of the `td`  tag with text content `Address:`",
    "code": "print(soup.find(text='Address:').findNext('td').contents[0])",
    "slot_map": {
      "var_0": "soup",
      "var_1": "td",
      "str_0": "Address:"
    },
    "intent_indx": [
      23,
      25,
      60,
      16,
      17,
      125,
      2,
      17,
      433,
      2,
      17,
      61,
      70,
      77,
      257,
      125,
      5
    ]
  },
  {
    "intent": "convert elements of each tuple in list `l` into a string  separated by character `@`",
    "code": "\"\"\" \"\"\".join([('%d@%d' % t) for t in l])",
    "slot_map": {
      "var_0": "l",
      "str_0": "@"
    },
    "intent_indx": [
      10,
      1,
      2,
      21,
      112,
      23,
      4,
      25,
      11,
      3,
      13,
      323,
      42,
      96,
      5
    ]
  },
  {
    "intent": "convert each tuple in list `l` to a string with '@' separating the tuples' elements",
    "code": "\"\"\" \"\"\".join([('%d@%d' % (t[0], t[1])) for t in l])",
    "slot_map": {
      "var_0": "l",
      "str_0": "@"
    },
    "intent_indx": [
      10,
      21,
      112,
      23,
      4,
      25,
      8,
      3,
      13,
      77,
      5,
      433,
      17,
      31,
      299,
      1
    ]
  },
  {
    "intent": "get the html from the current web page of a Selenium driver",
    "code": "driver.execute_script('return document.documentElement.outerHTML;')",
    "slot_map": {},
    "intent_indx": [
      16,
      17,
      296,
      56,
      17,
      174,
      433,
      297,
      2,
      3,
      48,
      433
    ]
  },
  {
    "intent": "Get all matches with regex pattern `\\\\d+[xX]` in list of string `teststr`",
    "code": "[i for i in teststr if re.search('\\\\d+[xX]', i)]",
    "slot_map": {
      "str_0": "\\\\d+[xX]",
      "var_0": "teststr"
    },
    "intent_indx": [
      16,
      36,
      106,
      77,
      38,
      51,
      5,
      23,
      4,
      2,
      13,
      25
    ]
  },
  {
    "intent": "select values from column 'A' for which corresponding values in column 'B' will be greater than 50, and in column 'C' - equal 900 in dataframe `df`",
    "code": "df['A'][(df['B'] > 50) & (df['C'] == 900)]",
    "slot_map": {
      "str_0": "A",
      "str_1": "B",
      "str_2": "C",
      "var_0": "df",
      "int_0": "50",
      "int_1": "900"
    },
    "intent_indx": [
      76,
      19,
      56,
      59,
      5,
      20,
      197,
      333,
      19,
      23,
      59,
      30,
      433,
      349,
      334,
      254,
      259,
      60,
      29,
      23,
      59,
      188,
      433,
      104,
      433,
      23,
      41,
      25
    ]
  },
  {
    "intent": "Sort dictionary `o` in ascending order based on its keys and items",
    "code": "sorted(o.items())",
    "slot_map": {
      "var_0": "o"
    },
    "intent_indx": [
      117,
      24,
      25,
      23,
      119,
      158,
      199,
      140,
      89,
      22,
      29,
      37
    ]
  },
  {
    "intent": "get sorted list of keys of dict `d`",
    "code": "sorted(d)",
    "slot_map": {
      "var_0": "d"
    },
    "intent_indx": [
      16,
      216,
      4,
      2,
      22,
      2,
      182,
      25
    ]
  },
  {
    "intent": "How to sort dictionaries by keys in Python",
    "code": "sorted(d.items())",
    "slot_map": {},
    "intent_indx": [
      75,
      8,
      117,
      24,
      42,
      22,
      23,
      47
    ]
  },
  {
    "intent": "convert string \"1\" into integer",
    "code": "int('1')",
    "slot_map": {
      "str_0": "1"
    },
    "intent_indx": [
      10,
      13,
      5,
      11,
      7
    ]
  },
  {
    "intent": "function to convert strings into integers",
    "code": "int()",
    "slot_map": {},
    "intent_indx": [
      67,
      8,
      10,
      13,
      11,
      7
    ]
  },
  {
    "intent": "convert items in `T1` to integers",
    "code": "T2 = [map(int, x) for x in T1]",
    "slot_map": {
      "var_0": "T1"
    },
    "intent_indx": [
      10,
      37,
      23,
      25,
      8,
      7
    ]
  },
  {
    "intent": "call a shell script `./test.sh` using subprocess",
    "code": "subprocess.call(['./test.sh'])",
    "slot_map": {
      "str_0": "./test.sh"
    },
    "intent_indx": [
      294,
      3,
      282,
      236,
      5,
      108,
      280
    ]
  },
  {
    "intent": "call a shell script `notepad` using subprocess",
    "code": "subprocess.call(['notepad'])",
    "slot_map": {
      "var_0": "notepad"
    },
    "intent_indx": [
      294,
      3,
      282,
      236,
      25,
      108,
      280
    ]
  },
  {
    "intent": "combine lists `l1` and `l2`  by alternating their elements",
    "code": "[val for pair in zip(l1, l2) for val in pair]",
    "slot_map": {
      "var_0": "l1",
      "var_1": "l2"
    },
    "intent_indx": [
      352,
      4,
      25,
      29,
      61,
      42,
      433,
      285,
      1
    ]
  },
  {
    "intent": "encode string 'data to be encoded'",
    "code": "encoded = base64.b64encode('data to be encoded')",
    "slot_map": {
      "str_0": "data to be encoded"
    },
    "intent_indx": [
      415,
      13,
      5
    ]
  },
  {
    "intent": "encode a string `data to be encoded` to `ascii` encoding",
    "code": "encoded = 'data to be encoded'.encode('ascii')",
    "slot_map": {
      "str_0": "data to be encoded",
      "var_0": "ascii"
    },
    "intent_indx": [
      415,
      3,
      13,
      5,
      8,
      25,
      288
    ]
  },
  {
    "intent": "parse tab-delimited CSV file 'text.txt' into a list",
    "code": "lol = list(csv.reader(open('text.txt', 'rb'), delimiter='\\t'))",
    "slot_map": {
      "str_0": "text.txt"
    },
    "intent_indx": [
      71,
      433,
      278,
      126,
      5,
      11,
      3,
      4
    ]
  },
  {
    "intent": "Get attribute `my_str` of object `my_object`",
    "code": "getattr(my_object, my_str)",
    "slot_map": {
      "var_0": "my_str",
      "var_1": "my_object"
    },
    "intent_indx": [
      16,
      326,
      25,
      2,
      14,
      61
    ]
  },
  {
    "intent": "group a list of dicts `LD` into one dict by key",
    "code": "print(dict(zip(LD[0], zip(*[list(d.values()) for d in LD]))))",
    "slot_map": {
      "var_0": "LD"
    },
    "intent_indx": [
      365,
      3,
      4,
      2,
      433,
      25,
      11,
      293,
      182,
      42,
      22
    ]
  },
  {
    "intent": "How do I sum the first value in each tuple in a list of tuples in Python?",
    "code": "sum([pair[0] for pair in list_of_pairs])",
    "slot_map": {},
    "intent_indx": [
      75,
      312,
      313,
      111,
      17,
      148,
      19,
      23,
      21,
      112,
      23,
      3,
      4,
      2,
      31,
      23,
      47,
      49
    ]
  },
  {
    "intent": "convert unicode string u\"{'code1':1,'code2':1}\" into dictionary",
    "code": "d = ast.literal_eval(\"{'code1':1,'code2':1}\")",
    "slot_map": {
      "str_0": "{'code1':1,'code2':1}",
      "{str_0}": "{'code1':1,'code2':1}"
    },
    "intent_indx": [
      10,
      223,
      13,
      433,
      11,
      24
    ]
  },
  {
    "intent": "find all words in a string `mystring` that start with the `$` sign",
    "code": "[word for word in mystring.split() if word.startswith('$')]",
    "slot_map": {
      "var_0": "mystring",
      "str_0": "$"
    },
    "intent_indx": [
      45,
      36,
      39,
      23,
      3,
      13,
      25,
      189,
      412,
      77,
      17,
      5,
      433
    ]
  },
  {
    "intent": "remove any url within string `text`",
    "code": "text = re.sub('^https?:\\\\/\\\\/.*[\\\\r\\\\n]*', '', text, flags=re.MULTILINE)",
    "slot_map": {
      "var_0": "text"
    },
    "intent_indx": [
      258,
      263,
      100,
      52,
      13,
      25
    ]
  },
  {
    "intent": "replace all elements in array `A` that are not present in array `[1, 3, 4]` with zeros",
    "code": "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)",
    "slot_map": {
      "var_0": "A",
      "str_0": "[1, 3, 4]",
      "[str_0]": "[1, 3, 4]"
    },
    "intent_indx": [
      131,
      36,
      1,
      23,
      82,
      25,
      189,
      234,
      103,
      344,
      23,
      82,
      5,
      77,
      177
    ]
  },
  {
    "intent": "calculate mean across dimension in a 2d array `a`",
    "code": "np.mean(a, axis=1)",
    "slot_map": {
      "var_0": "a"
    },
    "intent_indx": [
      243,
      388,
      433,
      394,
      23,
      3,
      228,
      82,
      25
    ]
  },
  {
    "intent": "running r script '/pathto/MyrScript.r' from python",
    "code": "subprocess.call(['/usr/bin/Rscript', '--vanilla', '/pathto/MyrScript.r'])",
    "slot_map": {
      "str_0": "/pathto/MyrScript.r"
    },
    "intent_indx": [
      433,
      433,
      236,
      5,
      56,
      47
    ]
  },
  {
    "intent": "run r script '/usr/bin/Rscript --vanilla /pathto/MyrScript.r'",
    "code": "subprocess.call('/usr/bin/Rscript --vanilla /pathto/MyrScript.r', shell=True)",
    "slot_map": {
      "str_0": "/usr/bin/Rscript --vanilla /pathto/MyrScript.r"
    },
    "intent_indx": [
      241,
      433,
      236,
      5
    ]
  },
  {
    "intent": "add a header to a csv file",
    "code": "writer.writeheader()",
    "slot_map": {},
    "intent_indx": [
      58,
      3,
      401,
      8,
      3,
      278,
      126
    ]
  },
  {
    "intent": "replacing nan in the dataframe `df` with row average",
    "code": "df.fillna(df.mean(axis=1), axis=1)",
    "slot_map": {
      "var_0": "df",
      "float_0": "nan"
    },
    "intent_indx": [
      433,
      93,
      23,
      17,
      41,
      25,
      77,
      43,
      18
    ]
  },
  {
    "intent": "Convert unix timestamp '1347517370' to formatted string '%Y-%m-%d %H:%M:%S'",
    "code": "time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))",
    "slot_map": {
      "str_0": "1347517370",
      "str_1": "%Y-%m-%d %H:%M:%S"
    },
    "intent_indx": [
      10,
      433,
      433,
      5,
      8,
      279,
      13,
      30
    ]
  },
  {
    "intent": "Call a base class's class method `do` from derived class `Derived`",
    "code": "super(Derived, cls).do(a)",
    "slot_map": {
      "var_0": "do",
      "var_1": "Derived"
    },
    "intent_indx": [
      294,
      3,
      433,
      300,
      256,
      300,
      433,
      25,
      56,
      433,
      300,
      61
    ]
  },
  {
    "intent": "selecting rows in Numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1",
    "code": "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]",
    "slot_map": {
      "str_0": "a"
    },
    "intent_indx": [
      433,
      43,
      23,
      81,
      433,
      5,
      60,
      152,
      17,
      19,
      23,
      17,
      148,
      59,
      149,
      105,
      29,
      19,
      23,
      17,
      118,
      59,
      149,
      229
    ]
  },
  {
    "intent": "separate words delimited by one or more spaces into a list",
    "code": "re.split(' +', 'hello world sample text')",
    "slot_map": {},
    "intent_indx": [
      95,
      39,
      433,
      42,
      293,
      330,
      399,
      133,
      11,
      3,
      4
    ]
  },
  {
    "intent": "length of longest element in list `words`",
    "code": "len(max(words, key=len))",
    "slot_map": {
      "var_0": "words"
    },
    "intent_indx": [
      200,
      2,
      433,
      1,
      23,
      4,
      25
    ]
  },
  {
    "intent": "get the value associated with unicode key 'from_user' of first dictionary in list `result`",
    "code": "result[0]['from_user']",
    "slot_map": {
      "str_0": "from_user",
      "var_0": "result"
    },
    "intent_indx": [
      16,
      17,
      19,
      277,
      77,
      223,
      22,
      5,
      2,
      148,
      24,
      23,
      4,
      25
    ]
  },
  {
    "intent": "Retrieve each line from a file 'File.txt' as a list",
    "code": "[line.split() for line in open('File.txt')]",
    "slot_map": {
      "str_0": "File.txt"
    },
    "intent_indx": [
      358,
      21,
      167,
      56,
      3,
      126,
      5,
      3,
      3,
      4
    ]
  },
  {
    "intent": "swap keys with values in a dictionary `a`",
    "code": "res = dict((v, k) for k, v in a.items())",
    "slot_map": {
      "var_0": "a"
    },
    "intent_indx": [
      433,
      22,
      77,
      19,
      23,
      3,
      24,
      25
    ]
  },
  {
    "intent": "Open a file `path/to/FILE_NAME.ext` in write mode",
    "code": "new_file = open('path/to/FILE_NAME.ext', 'w')",
    "slot_map": {
      "str_0": "path/to/FILE_NAME.ext"
    },
    "intent_indx": [
      275,
      3,
      126,
      5,
      23,
      163,
      276
    ]
  },
  {
    "intent": "How to count distinct values in a column of a pandas group by object?",
    "code": "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()",
    "slot_map": {},
    "intent_indx": [
      75,
      8,
      173,
      433,
      19,
      23,
      3,
      59,
      2,
      3,
      40,
      365,
      42,
      14,
      49
    ]
  },
  {
    "intent": "Check if any key in the dictionary `dict1` starts with the string `EMP$$`",
    "code": "any(key.startswith('EMP$$') for key in dict1)",
    "slot_map": {
      "var_0": "dict1",
      "str_0": "EMP$$"
    },
    "intent_indx": [
      227,
      147,
      263,
      22,
      23,
      17,
      24,
      25,
      412,
      77,
      17,
      13,
      5
    ]
  },
  {
    "intent": "create list of values from dictionary `dict1` that have a key that starts with 'EMP$$'",
    "code": "[value for key, value in list(dict1.items()) if key.startswith('EMP$$')]",
    "slot_map": {
      "var_0": "dict1",
      "str_0": "EMP$$"
    },
    "intent_indx": [
      145,
      4,
      2,
      19,
      56,
      24,
      25,
      189,
      190,
      3,
      22,
      189,
      412,
      77,
      5
    ]
  },
  {
    "intent": "convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`",
    "code": "pd.DataFrame({'email': sf.index, 'list': sf.values})",
    "slot_map": {
      "var_0": "sf",
      "var_1": "df",
      "var_2": "email",
      "var_3": "list"
    },
    "intent_indx": [
      10,
      3,
      40,
      324,
      25,
      11,
      3,
      40,
      41,
      61,
      77,
      59,
      62,
      29,
      65
    ]
  },
  {
    "intent": "print elements of list `list` seperated by tabs `\\t`",
    "code": "print('\\t'.join(map(str, list)))",
    "slot_map": {
      "var_0": "list",
      "str_0": "\\t"
    },
    "intent_indx": [
      161,
      1,
      2,
      4,
      25,
      433,
      42,
      205,
      5
    ]
  },
  {
    "intent": "print unicode string '\\xd0\\xbf\\xd1\\x80\\xd0\\xb8' with utf-8",
    "code": "print('\\xd0\\xbf\\xd1\\x80\\xd0\\xb8'.encode('raw_unicode_escape'))",
    "slot_map": {
      "str_0": "\\xd0\\xbf\\xd1\\x80\\xd0\\xb8"
    },
    "intent_indx": [
      161,
      223,
      13,
      5,
      77,
      179
    ]
  },
  {
    "intent": "Encode a latin character in string `Sopet\\xc3\\xb3n` properly",
    "code": "'Sopet\\xc3\\xb3n'.encode('latin-1').decode('utf-8')",
    "slot_map": {
      "str_0": "Sopet\\xc3\\xb3n"
    },
    "intent_indx": [
      415,
      3,
      433,
      96,
      23,
      13,
      5,
      433
    ]
  },
  {
    "intent": "resized image `image` to width, height of `(x, y)` with filter of `ANTIALIAS`",
    "code": "image = image.resize((x, y), Image.ANTIALIAS)",
    "slot_map": {
      "var_0": "image",
      "str_0": "(x, y)",
      "var_1": "ANTIALIAS",
      "(str_0)": "(x, y)"
    },
    "intent_indx": [
      433,
      289,
      25,
      8,
      433,
      60,
      433,
      2,
      5,
      77,
      209,
      2,
      61
    ]
  },
  {
    "intent": "regex, find \"n\"s only in the middle of string `s`",
    "code": "re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', s)",
    "slot_map": {
      "str_0": "n",
      "var_0": "s"
    },
    "intent_indx": [
      38,
      60,
      45,
      433,
      338,
      23,
      17,
      433,
      2,
      13,
      25
    ]
  },
  {
    "intent": "display the float `1/3*100` as a percentage",
    "code": "print('{0:.0f}%'.format(1.0 / 3 * 100))",
    "slot_map": {
      "str_0": "1/3*100"
    },
    "intent_indx": [
      350,
      17,
      92,
      5,
      3,
      3,
      433
    ]
  },
  {
    "intent": "sort a list of dictionary `mylist` by the key `title`",
    "code": "mylist.sort(key=lambda x: x['title'])",
    "slot_map": {
      "var_0": "mylist",
      "var_1": "title"
    },
    "intent_indx": [
      117,
      3,
      4,
      2,
      24,
      25,
      42,
      17,
      22,
      61
    ]
  },
  {
    "intent": "sort a list `l` of dicts by dict value 'title'",
    "code": "l.sort(key=lambda x: x['title'])",
    "slot_map": {
      "var_0": "l",
      "str_0": "title"
    },
    "intent_indx": [
      117,
      3,
      4,
      25,
      2,
      433,
      42,
      182,
      19,
      5
    ]
  },
  {
    "intent": "sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.",
    "code": "l.sort(key=lambda x: (x['title'], x['title_url'], x['id']))",
    "slot_map": {
      "str_0": "title",
      "str_1": "title_url",
      "str_2": "id"
    },
    "intent_indx": [
      117,
      3,
      4,
      2,
      24,
      42,
      17,
      19,
      2,
      22,
      5,
      60,
      30,
      60,
      188,
      23,
      119,
      158,
      155
    ]
  },
  {
    "intent": "find 10 largest differences between each respective elements of list `l1` and list `l2`",
    "code": "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))",
    "slot_map": {
      "var_0": "l1",
      "var_1": "l2"
    },
    "intent_indx": [
      45,
      337,
      411,
      433,
      269,
      21,
      341,
      1,
      2,
      4,
      25,
      29,
      4,
      61
    ]
  },
  {
    "intent": "BeautifulSoup find all 'span' elements in HTML string `soup` with class of 'starGryB sp'",
    "code": "soup.find_all('span', {'class': 'starGryB sp'})",
    "slot_map": {
      "str_0": "span",
      "var_0": "soup",
      "str_1": "starGryB sp"
    },
    "intent_indx": [
      68,
      45,
      36,
      5,
      1,
      23,
      296,
      13,
      25,
      77,
      300,
      2,
      30
    ]
  },
  {
    "intent": "write records in dataframe `df` to table 'test' in schema 'a_schema'",
    "code": "df.to_sql('test', engine, schema='a_schema')",
    "slot_map": {
      "var_0": "df",
      "str_0": "test",
      "str_1": "a_schema"
    },
    "intent_indx": [
      163,
      84,
      23,
      41,
      25,
      8,
      369,
      5,
      23,
      433,
      30
    ]
  },
  {
    "intent": "Extract brackets from string `s`",
    "code": "brackets = re.sub('[^(){}[\\\\]]', '', s)",
    "slot_map": {
      "var_0": "s"
    },
    "intent_indx": [
      102,
      433,
      56,
      13,
      25
    ]
  },
  {
    "intent": "remove duplicate elements from list 'L'",
    "code": "list(dict((x[0], x) for x in L).values())",
    "slot_map": {
      "str_0": "L"
    },
    "intent_indx": [
      258,
      321,
      1,
      56,
      4,
      5
    ]
  },
  {
    "intent": "read a file `file` without newlines",
    "code": "[line.rstrip('\\n') for line in file]",
    "slot_map": {
      "var_0": "file"
    },
    "intent_indx": [
      124,
      3,
      126,
      25,
      101,
      433
    ]
  },
  {
    "intent": "get the position of item 1 in `testlist`",
    "code": "[i for (i, x) in enumerate(testlist) if (x == 1)]",
    "slot_map": {
      "var_0": "testlist"
    },
    "intent_indx": [
      16,
      17,
      291,
      2,
      37,
      229,
      23,
      25
    ]
  },
  {
    "intent": "get the position of item 1 in `testlist`",
    "code": "[i for (i, x) in enumerate(testlist) if (x == 1)]",
    "slot_map": {
      "var_0": "testlist"
    },
    "intent_indx": [
      16,
      17,
      291,
      2,
      37,
      229,
      23,
      25
    ]
  },
  {
    "intent": "get the position of item 1 in `testlist`",
    "code": "for i in [i for (i, x) in enumerate(testlist) if (x == 1)]:\n    pass",
    "slot_map": {
      "var_0": "testlist"
    },
    "intent_indx": [
      16,
      17,
      291,
      2,
      37,
      229,
      23,
      25
    ]
  },
  {
    "intent": "get the position of item 1 in `testlist`",
    "code": "for i in (i for (i, x) in enumerate(testlist) if (x == 1)):\n    pass",
    "slot_map": {
      "var_0": "testlist"
    },
    "intent_indx": [
      16,
      17,
      291,
      2,
      37,
      229,
      23,
      25
    ]
  },
  {
    "intent": "get the position of item 1 in `testlist`",
    "code": "gen = (i for (i, x) in enumerate(testlist) if (x == 1))\nfor i in gen:\n    pass",
    "slot_map": {
      "var_0": "testlist"
    },
    "intent_indx": [
      16,
      17,
      291,
      2,
      37,
      229,
      23,
      25
    ]
  },
  {
    "intent": "get the position of item `element` in list `testlist`",
    "code": "print(testlist.index(element))",
    "slot_map": {
      "var_0": "element",
      "var_1": "testlist"
    },
    "intent_indx": [
      16,
      17,
      291,
      2,
      37,
      25,
      23,
      4,
      61
    ]
  },
  {
    "intent": "get the position of item `element` in list `testlist`",
    "code": "try:\n    print(testlist.index(element))\nexcept ValueError:\n    pass",
    "slot_map": {
      "var_0": "element",
      "var_1": "testlist"
    },
    "intent_indx": [
      16,
      17,
      291,
      2,
      37,
      25,
      23,
      4,
      61
    ]
  },
  {
    "intent": "find the first element of the tuple with the maximum second element in a list of tuples `lis`",
    "code": "max(lis, key=lambda item: item[1])[0]",
    "slot_map": {
      "var_0": "lis"
    },
    "intent_indx": [
      45,
      17,
      148,
      1,
      2,
      17,
      112,
      77,
      17,
      219,
      118,
      1,
      23,
      3,
      4,
      2,
      31,
      25
    ]
  },
  {
    "intent": "get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`",
    "code": "max(lis, key=itemgetter(1))[0]",
    "slot_map": {
      "var_0": "lis"
    },
    "intent_indx": [
      16,
      17,
      37,
      33,
      35,
      105,
      56,
      17,
      112,
      189,
      322,
      219,
      19,
      33,
      35,
      229,
      23,
      4,
      25
    ]
  },
  {
    "intent": "Make a delay of 1 second",
    "code": "time.sleep(1)",
    "slot_map": {},
    "intent_indx": [
      185,
      3,
      359,
      2,
      229,
      118
    ]
  },
  {
    "intent": "convert list of tuples `L` to a string",
    "code": "\"\"\", \"\"\".join('(' + ', '.join(i) + ')' for i in L)",
    "slot_map": {
      "var_0": "L"
    },
    "intent_indx": [
      10,
      4,
      2,
      31,
      25,
      8,
      3,
      13
    ]
  },
  {
    "intent": "Django set default value of field `b` equal to '0000000'",
    "code": "b = models.CharField(max_length=7, default='0000000', editable=False)",
    "slot_map": {
      "var_0": "b",
      "str_0": "0000000"
    },
    "intent_indx": [
      85,
      57,
      226,
      19,
      2,
      301,
      25,
      104,
      8,
      5
    ]
  },
  {
    "intent": "Sort lis `list5` in ascending order based on the degrees value of its elements",
    "code": "sorted(list5, lambda x: (degree(x), x))",
    "slot_map": {
      "var_0": "list5"
    },
    "intent_indx": [
      117,
      433,
      25,
      23,
      119,
      158,
      199,
      140,
      17,
      433,
      19,
      2,
      89,
      1
    ]
  },
  {
    "intent": "How do I perform secondary sorting in python?",
    "code": "sorted(list5, key=lambda vertex: (degree(vertex), vertex))",
    "slot_map": {},
    "intent_indx": [
      75,
      312,
      313,
      433,
      433,
      274,
      23,
      47,
      49
    ]
  },
  {
    "intent": "convert a list  into a generator object",
    "code": "(n for n in [1, 2, 3, 5])",
    "slot_map": {},
    "intent_indx": [
      10,
      3,
      4,
      11,
      3,
      142,
      14
    ]
  },
  {
    "intent": "remove elements from list `oldlist` that have an index number mentioned in list `removelist`",
    "code": "newlist = [v for i, v in enumerate(oldlist) if i not in removelist]",
    "slot_map": {
      "var_0": "oldlist",
      "var_1": "removelist"
    },
    "intent_indx": [
      258,
      1,
      56,
      4,
      25,
      189,
      190,
      217,
      35,
      74,
      433,
      23,
      4,
      61
    ]
  },
  {
    "intent": "Open a file `yourfile.txt` in write mode",
    "code": "f = open('yourfile.txt', 'w')",
    "slot_map": {
      "str_0": "yourfile.txt"
    },
    "intent_indx": [
      275,
      3,
      126,
      5,
      23,
      163,
      276
    ]
  },
  {
    "intent": "get attribute 'attr' from object `obj`",
    "code": "getattr(obj, 'attr')",
    "slot_map": {
      "str_0": "attr",
      "var_0": "obj"
    },
    "intent_indx": [
      16,
      326,
      5,
      56,
      14,
      25
    ]
  },
  {
    "intent": "convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to tuple",
    "code": "from functools import reduce\nreduce(lambda a, b: a + b, (('aa',), ('bb',), ('cc',)))",
    "slot_map": {
      "str_0": "(('aa',), ('bb',), ('cc',))",
      "(str_0)": "(('aa',), ('bb',), ('cc',))"
    },
    "intent_indx": [
      10,
      112,
      2,
      31,
      5,
      8,
      112
    ]
  },
  {
    "intent": "convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line",
    "code": "map(lambda a: a[0], (('aa',), ('bb',), ('cc',)))",
    "slot_map": {
      "str_0": "(('aa',), ('bb',), ('cc',))",
      "(str_0)": "(('aa',), ('bb',), ('cc',))"
    },
    "intent_indx": [
      10,
      112,
      2,
      31,
      5,
      8,
      4,
      23,
      293,
      167
    ]
  },
  {
    "intent": "Python Pandas: How to replace a characters in a column of a dataframe?",
    "code": "df['range'].replace(',', '-', inplace=True)",
    "slot_map": {},
    "intent_indx": [
      47,
      40,
      128,
      75,
      8,
      131,
      3,
      96,
      23,
      3,
      59,
      2,
      3,
      41,
      49
    ]
  },
  {
    "intent": "unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`",
    "code": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])",
    "slot_map": {
      "str_0": "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]",
      "[str_0]": "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]"
    },
    "intent_indx": [
      433,
      17,
      4,
      5
    ]
  },
  {
    "intent": "unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`",
    "code": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])",
    "slot_map": {
      "str_0": "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]",
      "[str_0]": "[('a', 1), ('b', 2), ('c', 3), ('d', 4)]"
    },
    "intent_indx": [
      433,
      17,
      4,
      5
    ]
  },
  {
    "intent": "unzip list `original`",
    "code": "result = ([a for (a, b) in original], [b for (a, b) in original])",
    "slot_map": {
      "var_0": "original"
    },
    "intent_indx": [
      433,
      4,
      25
    ]
  },
  {
    "intent": "unzip list `original` and return a generator",
    "code": "result = ((a for (a, b) in original), (b for (a, b) in original))",
    "slot_map": {
      "var_0": "original"
    },
    "intent_indx": [
      433,
      4,
      25,
      29,
      156,
      3,
      142
    ]
  },
  {
    "intent": "unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`",
    "code": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])",
    "slot_map": {
      "str_0": "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]",
      "[str_0]": "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]"
    },
    "intent_indx": [
      433,
      4,
      5
    ]
  },
  {
    "intent": "unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with None",
    "code": "map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])",
    "slot_map": {
      "str_0": "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]",
      "[str_0]": "[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]"
    },
    "intent_indx": [
      433,
      4,
      5,
      29,
      433,
      144,
      433,
      77,
      433
    ]
  },
  {
    "intent": "encode `Decimal('3.9')` to a JSON string",
    "code": "json.dumps(Decimal('3.9'))",
    "slot_map": {
      "str_0": "Decimal('3.9')"
    },
    "intent_indx": [
      415,
      5,
      8,
      3,
      176,
      13
    ]
  },
  {
    "intent": "Add key \"mynewkey\" to dictionary `d` with value \"mynewvalue\"",
    "code": "d['mynewkey'] = 'mynewvalue'",
    "slot_map": {
      "str_0": "mynewkey",
      "var_0": "d",
      "str_1": "mynewvalue"
    },
    "intent_indx": [
      58,
      22,
      5,
      8,
      24,
      25,
      77,
      19,
      30
    ]
  },
  {
    "intent": "Add key 'a' to dictionary `data` with value 1",
    "code": "data.update({'a': 1, })",
    "slot_map": {
      "str_0": "a",
      "var_0": "data"
    },
    "intent_indx": [
      58,
      22,
      5,
      8,
      24,
      25,
      77,
      19,
      229
    ]
  },
  {
    "intent": "Add key 'a' to dictionary `data` with value 1",
    "code": "data.update(dict(a=1))",
    "slot_map": {
      "str_0": "a",
      "var_0": "data"
    },
    "intent_indx": [
      58,
      22,
      5,
      8,
      24,
      25,
      77,
      19,
      229
    ]
  },
  {
    "intent": "Add key 'a' to dictionary `data` with value 1",
    "code": "data.update(a=1)",
    "slot_map": {
      "str_0": "a",
      "var_0": "data"
    },
    "intent_indx": [
      58,
      22,
      5,
      8,
      24,
      25,
      77,
      19,
      229
    ]
  },
  {
    "intent": "find maximal value in matrix `matrix`",
    "code": "max([max(i) for i in matrix])",
    "slot_map": {
      "var_0": "matrix"
    },
    "intent_indx": [
      45,
      433,
      19,
      23,
      183,
      25
    ]
  },
  {
    "intent": "Round number `answer` to 2 precision after the decimal point",
    "code": "answer = str(round(answer, 2))",
    "slot_map": {
      "var_0": "answer"
    },
    "intent_indx": [
      244,
      74,
      25,
      8,
      79,
      433,
      195,
      17,
      246,
      262
    ]
  },
  {
    "intent": "extract ip address from an html string",
    "code": "ip = re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)",
    "slot_map": {},
    "intent_indx": [
      102,
      433,
      433,
      56,
      217,
      296,
      13
    ]
  },
  {
    "intent": "filter dataframe `df` by values in column `A` that appear more than once",
    "code": "df.groupby('A').filter(lambda x: len(x) > 1)",
    "slot_map": {
      "var_0": "df",
      "var_1": "A"
    },
    "intent_indx": [
      209,
      41,
      25,
      42,
      19,
      23,
      59,
      61,
      189,
      433,
      399,
      254,
      433
    ]
  },
  {
    "intent": "append each line in file `myfile` into a list",
    "code": "[x for x in myfile.splitlines() if x != '']",
    "slot_map": {
      "var_0": "myfile"
    },
    "intent_indx": [
      110,
      21,
      167,
      23,
      126,
      25,
      11,
      3,
      4
    ]
  },
  {
    "intent": "Get a list of integers `lst` from a file `filename.txt`",
    "code": "lst = map(int, open('filename.txt').readlines())",
    "slot_map": {
      "var_0": "lst",
      "str_0": "filename.txt"
    },
    "intent_indx": [
      16,
      3,
      4,
      2,
      7,
      25,
      56,
      3,
      126,
      5
    ]
  },
  {
    "intent": "add color bar with image `mappable` to plot `plt`",
    "code": "plt.colorbar(mappable=mappable, cax=ax3)",
    "slot_map": {
      "var_0": "mappable",
      "var_1": "plt"
    },
    "intent_indx": [
      58,
      214,
      433,
      77,
      289,
      25,
      8,
      235,
      61
    ]
  },
  {
    "intent": "count most frequent 100 words in column 'text' of dataframe `df`",
    "code": "Counter(' '.join(df['text']).split()).most_common(100)",
    "slot_map": {
      "str_0": "text",
      "var_0": "df",
      "int_0": "100"
    },
    "intent_indx": [
      173,
      433,
      433,
      259,
      39,
      23,
      59,
      5,
      2,
      41,
      25
    ]
  },
  {
    "intent": "Python split a string using regex",
    "code": "re.findall('(.+?):(.+?)\\\\b ?', text)",
    "slot_map": {},
    "intent_indx": [
      47,
      139,
      3,
      13,
      108,
      38
    ]
  },
  {
    "intent": "generate all 2-element subsets of tuple `(1, 2, 3)`",
    "code": "list(itertools.combinations((1, 2, 3), 2))",
    "slot_map": {
      "str_0": "(1, 2, 3)",
      "(str_0)": "(1, 2, 3)"
    },
    "intent_indx": [
      53,
      36,
      433,
      351,
      2,
      112,
      5
    ]
  },
  {
    "intent": "get a value of datetime.today() in the UTC time zone",
    "code": "datetime.now(pytz.utc)",
    "slot_map": {},
    "intent_indx": [
      16,
      3,
      19,
      2,
      433,
      203,
      26,
      23,
      17,
      175,
      135,
      433
    ]
  },
  {
    "intent": "Get a new list `list2`by removing empty list from a list of lists `list1`",
    "code": "list2 = [x for x in list1 if x != []]",
    "slot_map": {
      "var_0": "list2",
      "var_1": "list1"
    },
    "intent_indx": [
      16,
      3,
      186,
      4,
      433,
      97,
      144,
      4,
      56,
      3,
      4,
      2,
      4,
      61
    ]
  },
  {
    "intent": "Create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`",
    "code": "list2 = [x for x in list1 if x]",
    "slot_map": {
      "var_0": "list2",
      "var_1": "list1",
      "var_2": "list1"
    },
    "intent_indx": [
      145,
      25,
      8,
      311,
      17,
      4,
      56,
      4,
      61,
      433,
      17,
      144,
      4,
      56,
      61
    ]
  },
  {
    "intent": "Django response with JSON `data`",
    "code": "return HttpResponse(data, mimetype='application/json')",
    "slot_map": {
      "var_0": "data"
    },
    "intent_indx": [
      85,
      433,
      77,
      176,
      25
    ]
  },
  {
    "intent": "get all text that is not enclosed within square brackets in string `example_str`",
    "code": "re.findall('(.*?)\\\\[.*?\\\\]', example_str)",
    "slot_map": {
      "var_0": "example_str"
    },
    "intent_indx": [
      16,
      36,
      257,
      189,
      149,
      103,
      433,
      52,
      242,
      433,
      23,
      13,
      25
    ]
  },
  {
    "intent": "Use a regex to get all text in a string `example_str` that is not surrounded by square brackets",
    "code": "re.findall('(.*?)(?:\\\\[.*?\\\\]|$)', example_str)",
    "slot_map": {
      "var_0": "example_str"
    },
    "intent_indx": [
      298,
      3,
      38,
      8,
      16,
      36,
      257,
      23,
      3,
      13,
      25,
      189,
      149,
      103,
      433,
      42,
      242,
      433
    ]
  },
  {
    "intent": "get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'",
    "code": "re.findall('\\\\(.+?\\\\)|\\\\w', '(zyx)bc')",
    "slot_map": {
      "str_0": "(zyx)bc"
    },
    "intent_indx": [
      16,
      433,
      149,
      269,
      107,
      3,
      3,
      9,
      106,
      60,
      29,
      263,
      433,
      433,
      3,
      217,
      433,
      106,
      23,
      13,
      5
    ]
  },
  {
    "intent": "match regex '\\\\((.*?)\\\\)|(\\\\w)' with string '(zyx)bc'",
    "code": "re.findall('\\\\((.*?)\\\\)|(\\\\w)', '(zyx)bc')",
    "slot_map": {
      "str_0": "\\\\((.*?)\\\\)|(\\\\w)",
      "str_1": "(zyx)bc"
    },
    "intent_indx": [
      106,
      38,
      5,
      77,
      13,
      30
    ]
  },
  {
    "intent": "match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`",
    "code": "re.findall('\\\\(.*?\\\\)|\\\\w', '(zyx)bc')",
    "slot_map": {
      "str_0": "|",
      "str_1": "(zyx)bc"
    },
    "intent_indx": [
      106,
      6,
      38,
      51,
      77,
      17,
      433,
      433,
      5,
      23,
      3,
      13,
      30
    ]
  },
  {
    "intent": "formate each string cin list `elements` into pattern '%{0}%'",
    "code": "elements = ['%{0}%'.format(element) for element in elements]",
    "slot_map": {
      "var_0": "elements",
      "str_0": "%{0}%"
    },
    "intent_indx": [
      433,
      21,
      13,
      433,
      4,
      25,
      11,
      51,
      5
    ]
  },
  {
    "intent": "Open a background process 'background-process' with arguments 'arguments'",
    "code": "subprocess.Popen(['background-process', 'arguments'])",
    "slot_map": {
      "str_0": "background-process",
      "str_1": "arguments"
    },
    "intent_indx": [
      275,
      3,
      433,
      283,
      5,
      77,
      295,
      30
    ]
  },
  {
    "intent": "get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'",
    "code": "[mydict[x] for x in mykeys]",
    "slot_map": {
      "str_0": "mydict",
      "str_1": "mykeys"
    },
    "intent_indx": [
      16,
      4,
      2,
      19,
      56,
      24,
      5,
      433,
      155,
      4,
      2,
      22,
      30
    ]
  },
  {
    "intent": "convert list `[('Name', 'Joe'), ('Age', 22)]` into a dictionary",
    "code": "dict([('Name', 'Joe'), ('Age', 22)])",
    "slot_map": {
      "str_0": "[('Name', 'Joe'), ('Age', 22)]",
      "[str_0]": "[('Name', 'Joe'), ('Age', 22)]"
    },
    "intent_indx": [
      10,
      4,
      5,
      11,
      3,
      24
    ]
  },
  {
    "intent": "average each two columns of array `data`",
    "code": "data.reshape(-1, j).mean(axis=1).reshape(data.shape[0], -1)",
    "slot_map": {
      "var_0": "data"
    },
    "intent_indx": [
      18,
      21,
      28,
      59,
      2,
      82,
      25
    ]
  },
  {
    "intent": "double backslash escape all double quotes in string `s`",
    "code": "print(s.encode('unicode-escape').replace('\"', '\\\\\"'))",
    "slot_map": {
      "var_0": "s"
    },
    "intent_indx": [
      433,
      433,
      287,
      36,
      433,
      433,
      23,
      13,
      25
    ]
  },
  {
    "intent": "split a string into a list of words and whitespace",
    "code": "re.split('(\\\\W+)', s)",
    "slot_map": {},
    "intent_indx": [
      139,
      3,
      13,
      11,
      3,
      4,
      2,
      39,
      29,
      202
    ]
  },
  {
    "intent": "plotting stacked barplots on a panda data frame",
    "code": "df.plot(kind='barh', stacked=True)",
    "slot_map": {},
    "intent_indx": [
      433,
      433,
      433,
      140,
      3,
      40,
      63,
      64
    ]
  },
  {
    "intent": "reverse the keys and values in a dictionary `myDictionary`",
    "code": "{i[1]: i[0] for i in list(myDictionary.items())}",
    "slot_map": {
      "var_0": "myDictionary"
    },
    "intent_indx": [
      273,
      17,
      22,
      29,
      19,
      23,
      3,
      24,
      25
    ]
  },
  {
    "intent": "finding the index of elements containing substring 'how' and 'what' in a list of strings 'myList'.",
    "code": "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]",
    "slot_map": {
      "str_0": "how",
      "str_1": "what",
      "str_2": "myList"
    },
    "intent_indx": [
      433,
      17,
      35,
      2,
      1,
      32,
      340,
      5,
      29,
      30,
      23,
      3,
      4,
      2,
      13,
      188,
      155
    ]
  },
  {
    "intent": "check if object `obj` is a string",
    "code": "isinstance(obj, str)",
    "slot_map": {
      "var_0": "obj"
    },
    "intent_indx": [
      227,
      147,
      14,
      25,
      149,
      3,
      13
    ]
  },
  {
    "intent": "check if object `o` is a string",
    "code": "isinstance(o, str)",
    "slot_map": {
      "var_0": "o"
    },
    "intent_indx": [
      227,
      147,
      14,
      25,
      149,
      3,
      13
    ]
  },
  {
    "intent": "check if object `o` is a string",
    "code": "(type(o) is str)",
    "slot_map": {
      "var_0": "o"
    },
    "intent_indx": [
      227,
      147,
      14,
      25,
      149,
      3,
      13
    ]
  },
  {
    "intent": "check if object `o` is a string",
    "code": "isinstance(o, str)",
    "slot_map": {
      "var_0": "o"
    },
    "intent_indx": [
      227,
      147,
      14,
      25,
      149,
      3,
      13
    ]
  },
  {
    "intent": "check if `obj_to_test` is a string",
    "code": "isinstance(obj_to_test, str)",
    "slot_map": {
      "var_0": "obj_to_test"
    },
    "intent_indx": [
      227,
      147,
      25,
      149,
      3,
      13
    ]
  },
  {
    "intent": "append list `list1` to `list2`",
    "code": "list2.extend(list1)",
    "slot_map": {
      "var_0": "list1",
      "var_1": "list2"
    },
    "intent_indx": [
      110,
      4,
      25,
      8,
      61
    ]
  },
  {
    "intent": "append list `mylog` to `list1`",
    "code": "list1.extend(mylog)",
    "slot_map": {
      "var_0": "mylog",
      "var_1": "list1"
    },
    "intent_indx": [
      110,
      4,
      25,
      8,
      61
    ]
  },
  {
    "intent": "append list `a` to `c`",
    "code": "c.extend(a)",
    "slot_map": {
      "var_0": "a",
      "var_1": "c"
    },
    "intent_indx": [
      110,
      4,
      25,
      8,
      61
    ]
  },
  {
    "intent": "append items in list `mylog` to `list1`",
    "code": "for line in mylog:\n    list1.append(line)",
    "slot_map": {
      "var_0": "mylog",
      "var_1": "list1"
    },
    "intent_indx": [
      110,
      37,
      23,
      4,
      25,
      8,
      61
    ]
  },
  {
    "intent": "append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`",
    "code": "b.append((a[0][0], a[0][2]))",
    "slot_map": {
      "var_0": "a",
      "str_0": "[0][0] [0][2]",
      "var_1": "b",
      "[str_0]": "[0][0] [0][2]"
    },
    "intent_indx": [
      110,
      3,
      112,
      2,
      1,
      56,
      4,
      25,
      77,
      35,
      5,
      8,
      4,
      61
    ]
  },
  {
    "intent": "Initialize `SECRET_KEY` in flask config with `Your_secret_string `",
    "code": "app.config['SECRET_KEY'] = 'Your_secret_string'",
    "slot_map": {
      "var_0": "SECRET_KEY",
      "str_0": "Your_secret_string"
    },
    "intent_indx": [
      433,
      25,
      23,
      384,
      433,
      77,
      5
    ]
  },
  {
    "intent": "unpack a series of tuples in pandas into a DataFrame with column names 'out-1' and 'out-2'",
    "code": "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)",
    "slot_map": {
      "str_0": "out-1",
      "str_1": "out-2"
    },
    "intent_indx": [
      143,
      3,
      324,
      2,
      31,
      23,
      40,
      11,
      3,
      41,
      77,
      59,
      130,
      5,
      29,
      30
    ]
  },
  {
    "intent": "find the index of an element 'MSFT' in a list `stocks_list`",
    "code": "[x for x in range(len(stocks_list)) if stocks_list[x] == 'MSFT']",
    "slot_map": {
      "str_0": "MSFT",
      "var_0": "stocks_list"
    },
    "intent_indx": [
      45,
      17,
      35,
      2,
      217,
      1,
      5,
      23,
      3,
      4,
      25
    ]
  },
  {
    "intent": "rotate the xtick labels of matplotlib plot `ax` by `45` degrees to make long labels readable",
    "code": "ax.set_xticklabels(labels, rotation=45)",
    "slot_map": {
      "var_0": "ax",
      "str_0": "45"
    },
    "intent_indx": [
      433,
      17,
      433,
      309,
      2,
      336,
      235,
      25,
      42,
      5,
      433,
      8,
      185,
      433,
      309,
      433
    ]
  },
  {
    "intent": "remove symbols from a string `s`",
    "code": "re.sub('[^\\\\w]', ' ', s)",
    "slot_map": {
      "var_0": "s"
    },
    "intent_indx": [
      258,
      433,
      56,
      3,
      13,
      25
    ]
  },
  {
    "intent": "Get the current directory of a script",
    "code": "os.path.basename(os.path.dirname(os.path.realpath(__file__)))",
    "slot_map": {},
    "intent_indx": [
      16,
      17,
      174,
      170,
      2,
      3,
      236
    ]
  },
  {
    "intent": "Find octal characters matches from a string `str` using regex",
    "code": "print(re.findall(\"'\\\\\\\\[0-7]{1,3}'\", str))",
    "slot_map": {
      "var_0": "str"
    },
    "intent_indx": [
      45,
      433,
      96,
      106,
      56,
      3,
      13,
      25,
      108,
      38
    ]
  },
  {
    "intent": "split string `input` based on occurrences of regex pattern '[ ](?=[A-Z]+\\\\b)'",
    "code": "re.split('[ ](?=[A-Z]+\\\\b)', input)",
    "slot_map": {
      "var_0": "input",
      "str_0": "[ ](?=[A-Z]+\\\\b)",
      "[str_0)": "[ ](?=[A-Z]+\\\\b)"
    },
    "intent_indx": [
      139,
      13,
      25,
      199,
      140,
      50,
      2,
      38,
      51,
      5
    ]
  },
  {
    "intent": "Split string `input` at every space followed by an upper-case letter",
    "code": "re.split('[ ](?=[A-Z])', input)",
    "slot_map": {
      "var_0": "input"
    },
    "intent_indx": [
      139,
      13,
      25,
      33,
      270,
      133,
      355,
      42,
      217,
      433,
      347
    ]
  },
  {
    "intent": "send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`",
    "code": "r = requests.post(url, files=files, headers=headers, data=data)",
    "slot_map": {
      "var_0": "files",
      "var_1": "url",
      "var_2": "headers",
      "var_3": "data"
    },
    "intent_indx": [
      433,
      433,
      286,
      126,
      25,
      8,
      100,
      61,
      77,
      401,
      62,
      29,
      433,
      65
    ]
  },
  {
    "intent": "write bytes `bytes_` to a file `filename` in python 3",
    "code": "open('filename', 'wb').write(bytes_)",
    "slot_map": {
      "var_0": "bytes_",
      "var_1": "filename"
    },
    "intent_indx": [
      163,
      222,
      25,
      8,
      3,
      126,
      61,
      23,
      47,
      55
    ]
  },
  {
    "intent": "get a list from a list `lst` with values mapped into a dictionary `dct`",
    "code": "[dct[k] for k in lst]",
    "slot_map": {
      "var_0": "lst",
      "var_1": "dct"
    },
    "intent_indx": [
      16,
      3,
      4,
      56,
      3,
      4,
      25,
      77,
      19,
      433,
      11,
      3,
      24,
      61
    ]
  },
  {
    "intent": "find duplicate names in column 'name' of the dataframe `x`",
    "code": "x.set_index('name').index.get_duplicates()",
    "slot_map": {
      "str_0": "name",
      "var_0": "x"
    },
    "intent_indx": [
      45,
      321,
      130,
      23,
      59,
      5,
      2,
      17,
      41,
      25
    ]
  },
  {
    "intent": "truncate float 1.923328437452 to 3 decimal places",
    "code": "round(1.923328437452, 3)",
    "slot_map": {
      "float_0": "1.923328437452"
    },
    "intent_indx": [
      433,
      92,
      93,
      8,
      55,
      246,
      247
    ]
  },
  {
    "intent": "sort list `li` in descending order based on the date value in second element of each list in list `li`",
    "code": "sorted(li, key=lambda x: datetime.strptime(x[1], '%d/%m/%Y'), reverse=True)",
    "slot_map": {
      "var_0": "li",
      "var_1": "li"
    },
    "intent_indx": [
      117,
      4,
      25,
      23,
      121,
      158,
      199,
      140,
      17,
      134,
      19,
      23,
      118,
      1,
      2,
      21,
      4,
      23,
      4,
      25
    ]
  },
  {
    "intent": "place the radial ticks in plot `ax` at 135 degrees",
    "code": "ax.set_rlabel_position(135)",
    "slot_map": {
      "var_0": "ax",
      "int_0": "135"
    },
    "intent_indx": [
      247,
      17,
      433,
      433,
      23,
      235,
      25,
      33,
      259,
      433
    ]
  },
  {
    "intent": "check if path `my_path` is an absolute path",
    "code": "os.path.isabs(my_path)",
    "slot_map": {
      "var_0": "my_path"
    },
    "intent_indx": [
      227,
      147,
      193,
      25,
      149,
      217,
      433,
      193
    ]
  },
  {
    "intent": "get number of keys in dictionary `yourdict`",
    "code": "len(list(yourdict.keys()))",
    "slot_map": {
      "var_0": "yourdict"
    },
    "intent_indx": [
      16,
      74,
      2,
      22,
      23,
      24,
      25
    ]
  },
  {
    "intent": "count the number of keys in dictionary `yourdictfile`",
    "code": "len(set(open(yourdictfile).read().split()))",
    "slot_map": {
      "var_0": "yourdictfile"
    },
    "intent_indx": [
      173,
      17,
      74,
      2,
      22,
      23,
      24,
      25
    ]
  },
  {
    "intent": "pandas dataframe get first row of each group by 'id'",
    "code": "df.groupby('id').first()",
    "slot_map": {
      "str_0": "id"
    },
    "intent_indx": [
      40,
      41,
      16,
      148,
      43,
      2,
      21,
      365,
      42,
      5
    ]
  },
  {
    "intent": "split a list in first column  into multiple columns keeping other columns as well in pandas data frame",
    "code": "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)",
    "slot_map": {},
    "intent_indx": [
      139,
      3,
      4,
      23,
      148,
      59,
      11,
      6,
      59,
      433,
      187,
      59,
      3,
      433,
      23,
      40,
      63,
      64
    ]
  },
  {
    "intent": "extract attributes 'src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"' from string `data`",
    "code": "re.findall('src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"', data)",
    "slot_map": {
      "str_0": "src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"",
      "var_0": "data"
    },
    "intent_indx": [
      102,
      326,
      5,
      56,
      13,
      25
    ]
  },
  {
    "intent": "Sum integers contained in strings in list `['', '3.4', '', '', '1.0']`",
    "code": "sum(int(float(item)) for item in [_f for _f in ['', '3.4', '', '', '1.0'] if _f])",
    "slot_map": {
      "str_0": "['', '3.4', '', '', '1.0']",
      "[str_0]": "['', '3.4', '', '', '1.0']"
    },
    "intent_indx": [
      111,
      7,
      433,
      23,
      13,
      23,
      4,
      5
    ]
  },
  {
    "intent": "Call a subprocess with arguments `c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat` that may contain spaces",
    "code": "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])",
    "slot_map": {
      "str_0": "c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat"
    },
    "intent_indx": [
      294,
      3,
      280,
      77,
      295,
      5,
      189,
      433,
      311,
      133
    ]
  },
  {
    "intent": "reverse a priority queue `q` in python without using classes",
    "code": "q.put((-n, n))",
    "slot_map": {
      "var_0": "q"
    },
    "intent_indx": [
      273,
      3,
      433,
      433,
      25,
      23,
      47,
      101,
      108,
      300
    ]
  },
  {
    "intent": "make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`",
    "code": "df['group'].plot(kind='bar', color=['r', 'g', 'b', 'r', 'g', 'b', 'r'])",
    "slot_map": {
      "var_0": "group",
      "var_1": "df",
      "var_2": "color"
    },
    "intent_indx": [
      185,
      3,
      433,
      2,
      63,
      23,
      59,
      25,
      2,
      41,
      61,
      433,
      361,
      8,
      4,
      62
    ]
  },
  {
    "intent": "find all matches of regex pattern '([a-fA-F\\\\d]{32})' in string `data`",
    "code": "re.findall('([a-fA-F\\\\d]{32})', data)",
    "slot_map": {
      "str_0": "([a-fA-F\\\\d]{32})",
      "var_0": "data",
      "(str_0)": "([a-fA-F\\\\d]{32})"
    },
    "intent_indx": [
      45,
      36,
      106,
      2,
      38,
      51,
      5,
      23,
      13,
      25
    ]
  },
  {
    "intent": "Get the length of list `my_list`",
    "code": "len(my_list)",
    "slot_map": {
      "var_0": "my_list"
    },
    "intent_indx": [
      16,
      17,
      200,
      2,
      4,
      25
    ]
  },
  {
    "intent": "Getting the length of array `l`",
    "code": "len(l)",
    "slot_map": {
      "var_0": "l"
    },
    "intent_indx": [
      381,
      17,
      200,
      2,
      82,
      25
    ]
  },
  {
    "intent": "Getting the length of array `s`",
    "code": "len(s)",
    "slot_map": {
      "var_0": "s"
    },
    "intent_indx": [
      381,
      17,
      200,
      2,
      82,
      25
    ]
  },
  {
    "intent": "Getting the length of `my_tuple`",
    "code": "len(my_tuple)",
    "slot_map": {
      "var_0": "my_tuple"
    },
    "intent_indx": [
      381,
      17,
      200,
      2,
      25
    ]
  },
  {
    "intent": "Getting the length of `my_string`",
    "code": "len(my_string)",
    "slot_map": {
      "var_0": "my_string"
    },
    "intent_indx": [
      381,
      17,
      200,
      2,
      25
    ]
  },
  {
    "intent": "remove escape character from string \"\\\\a\"",
    "code": "\"\"\"\\\\a\"\"\".decode('string_escape')",
    "slot_map": {
      "str_0": "\\\\a"
    },
    "intent_indx": [
      258,
      287,
      96,
      56,
      13,
      5
    ]
  },
  {
    "intent": "replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.",
    "code": "\"\"\"obama\"\"\".replace('a', '%temp%').replace('b', 'a').replace('%temp%', 'b')",
    "slot_map": {
      "str_0": "a",
      "str_1": "b",
      "str_2": "b",
      "str_3": "a",
      "str_4": "obama"
    },
    "intent_indx": [
      131,
      21,
      5,
      77,
      30,
      29,
      21,
      30,
      77,
      5,
      23,
      17,
      13,
      433,
      23,
      3,
      9,
      433,
      155
    ]
  },
  {
    "intent": "remove directory tree '/folder_name'",
    "code": "shutil.rmtree('/folder_name')",
    "slot_map": {
      "str_0": "/folder_name"
    },
    "intent_indx": [
      258,
      170,
      433,
      5
    ]
  },
  {
    "intent": "create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`",
    "code": "data['weekday'] = data['my_dt'].apply(lambda x: x.weekday())",
    "slot_map": {
      "var_0": "weekday",
      "var_1": "data",
      "var_2": "my_dt"
    },
    "intent_indx": [
      145,
      3,
      186,
      59,
      25,
      23,
      40,
      63,
      64,
      61,
      199,
      140,
      17,
      19,
      23,
      59,
      62
    ]
  },
  {
    "intent": "reverse sort Counter `x` by values",
    "code": "sorted(x, key=x.get, reverse=True)",
    "slot_map": {
      "var_0": "x"
    },
    "intent_indx": [
      273,
      117,
      433,
      25,
      42,
      19
    ]
  },
  {
    "intent": "reverse sort counter `x` by value",
    "code": "sorted(list(x.items()), key=lambda pair: pair[1], reverse=True)",
    "slot_map": {
      "var_0": "x"
    },
    "intent_indx": [
      273,
      117,
      433,
      25,
      42,
      19
    ]
  },
  {
    "intent": "append a numpy array 'b' to a numpy array 'a'",
    "code": "np.vstack((a, b))",
    "slot_map": {
      "str_0": "b",
      "str_1": "a"
    },
    "intent_indx": [
      110,
      3,
      81,
      82,
      5,
      8,
      3,
      81,
      82,
      30
    ]
  },
  {
    "intent": "numpy concatenate two arrays `a` and `b` along the first axis",
    "code": "print(concatenate((a, b), axis=0))",
    "slot_map": {
      "var_0": "a",
      "var_1": "b"
    },
    "intent_indx": [
      81,
      0,
      28,
      82,
      25,
      29,
      61,
      433,
      17,
      148,
      419
    ]
  },
  {
    "intent": "numpy concatenate two arrays `a` and `b` along the second axis",
    "code": "print(concatenate((a, b), axis=1))",
    "slot_map": {
      "var_0": "a",
      "var_1": "b"
    },
    "intent_indx": [
      81,
      0,
      28,
      82,
      25,
      29,
      61,
      433,
      17,
      118,
      419
    ]
  },
  {
    "intent": "numpy concatenate two arrays `a` and `b` along the first axis",
    "code": "c = np.r_[(a[None, :], b[None, :])]",
    "slot_map": {
      "var_0": "a",
      "var_1": "b"
    },
    "intent_indx": [
      81,
      0,
      28,
      82,
      25,
      29,
      61,
      433,
      17,
      148,
      419
    ]
  },
  {
    "intent": "numpy concatenate two arrays `a` and `b` along the first axis",
    "code": "np.array((a, b))",
    "slot_map": {
      "var_0": "a",
      "var_1": "b"
    },
    "intent_indx": [
      81,
      0,
      28,
      82,
      25,
      29,
      61,
      433,
      17,
      148,
      419
    ]
  },
  {
    "intent": "fetch address information for host 'google.com' ion port 80",
    "code": "print(socket.getaddrinfo('google.com', 80))",
    "slot_map": {
      "str_0": "google.com",
      "int_0": "80"
    },
    "intent_indx": [
      433,
      433,
      433,
      20,
      433,
      5,
      433,
      433,
      259
    ]
  },
  {
    "intent": "add a column 'day' with value 'sat' to dataframe `df`",
    "code": "df.xs('sat', level='day', drop_level=False)",
    "slot_map": {
      "str_0": "day",
      "str_1": "sat",
      "var_0": "df"
    },
    "intent_indx": [
      58,
      3,
      59,
      5,
      77,
      19,
      30,
      8,
      41,
      25
    ]
  },
  {
    "intent": "return a 401 unauthorized in django",
    "code": "return HttpResponse('Unauthorized', status=401)",
    "slot_map": {
      "int_0": "401"
    },
    "intent_indx": [
      156,
      3,
      259,
      433,
      23,
      85
    ]
  },
  {
    "intent": "Flask set folder 'wherever' as the default template folder",
    "code": "Flask(__name__, template_folder='wherever')",
    "slot_map": {
      "str_0": "wherever"
    },
    "intent_indx": [
      384,
      57,
      385,
      5,
      3,
      17,
      226,
      433,
      385
    ]
  },
  {
    "intent": "How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?",
    "code": "session.execute('INSERT INTO t1 (SELECT * FROM t2)')",
    "slot_map": {},
    "intent_indx": [
      75,
      312,
      313,
      268,
      11,
      433,
      203,
      76,
      433,
      56,
      433,
      26,
      23,
      356,
      49
    ]
  },
  {
    "intent": "sort a list of lists 'c2' such that third row comes first",
    "code": "c2.sort(key=lambda row: row[2])",
    "slot_map": {
      "str_0": "c2"
    },
    "intent_indx": [
      117,
      3,
      4,
      2,
      4,
      5,
      433,
      189,
      120,
      43,
      433,
      148
    ]
  },
  {
    "intent": "Sorting a list of lists in Python",
    "code": "c2.sort(key=lambda row: (row[2], row[1], row[0]))",
    "slot_map": {},
    "intent_indx": [
      274,
      3,
      4,
      2,
      4,
      23,
      47
    ]
  },
  {
    "intent": "Sorting a list of lists in Python",
    "code": "c2.sort(key=lambda row: (row[2], row[1]))",
    "slot_map": {},
    "intent_indx": [
      274,
      3,
      4,
      2,
      4,
      23,
      47
    ]
  },
  {
    "intent": "set font `Arial` to display non-ascii characters in matplotlib",
    "code": "matplotlib.rc('font', **{'sans-serif': 'Arial', 'family': 'sans-serif'})",
    "slot_map": {
      "var_0": "Arial"
    },
    "intent_indx": [
      57,
      433,
      25,
      8,
      350,
      320,
      96,
      23,
      336
    ]
  },
  {
    "intent": "Convert  DateTime column 'date' of pandas dataframe 'df' to ordinal",
    "code": "df['date'].apply(lambda x: x.toordinal())",
    "slot_map": {
      "str_0": "date",
      "str_1": "df"
    },
    "intent_indx": [
      10,
      12,
      59,
      5,
      2,
      40,
      41,
      30,
      8,
      433
    ]
  },
  {
    "intent": "get html source of Selenium WebElement `element`",
    "code": "element.get_attribute('innerHTML')",
    "slot_map": {
      "var_0": "element"
    },
    "intent_indx": [
      16,
      296,
      433,
      2,
      48,
      433,
      25
    ]
  },
  {
    "intent": "Get the integer location of a key `bob` in a pandas data frame",
    "code": "df.index.get_loc('bob')",
    "slot_map": {
      "var_0": "bob"
    },
    "intent_indx": [
      16,
      17,
      7,
      433,
      2,
      3,
      22,
      25,
      23,
      3,
      40,
      63,
      64
    ]
  },
  {
    "intent": "open a 'gnome' terminal from python script and run  'sudo apt-get update' command.",
    "code": "os.system('gnome-terminal -e \\'bash -c \"sudo apt-get update; exec bash\"\\'')",
    "slot_map": {
      "str_0": "gnome",
      "str_1": "sudo apt-get update"
    },
    "intent_indx": [
      275,
      3,
      5,
      433,
      56,
      47,
      236,
      29,
      241,
      30,
      138,
      155
    ]
  },
  {
    "intent": "add an item with key 'third_key' and value 1 to an dictionary `my_dict`",
    "code": "my_dict.update({'third_key': 1})",
    "slot_map": {
      "str_0": "third_key",
      "var_0": "my_dict"
    },
    "intent_indx": [
      58,
      217,
      37,
      77,
      22,
      5,
      29,
      19,
      229,
      8,
      217,
      24,
      25
    ]
  },
  {
    "intent": "declare an array",
    "code": "my_list = []",
    "slot_map": {},
    "intent_indx": [
      433,
      217,
      82
    ]
  },
  {
    "intent": "Insert item `12` to a list `my_list`",
    "code": "my_list.append(12)",
    "slot_map": {
      "str_0": "12",
      "var_0": "my_list"
    },
    "intent_indx": [
      268,
      37,
      5,
      8,
      3,
      4,
      25
    ]
  },
  {
    "intent": "add an entry 'wuggah' at the beginning of list `myList`",
    "code": "myList.insert(0, 'wuggah')",
    "slot_map": {
      "str_0": "wuggah",
      "var_0": "myList"
    },
    "intent_indx": [
      58,
      217,
      245,
      5,
      33,
      17,
      166,
      2,
      4,
      25
    ]
  },
  {
    "intent": "convert a hex-string representation to actual bytes",
    "code": "\"\"\"\\\\xF3\\\\xBE\\\\x80\\\\x80\"\"\".replace('\\\\x', '').decode('hex')",
    "slot_map": {},
    "intent_indx": [
      10,
      3,
      433,
      116,
      8,
      433,
      222
    ]
  },
  {
    "intent": "select the last column of dataframe `df`",
    "code": "df[df.columns[-1]]",
    "slot_map": {
      "var_0": "df"
    },
    "intent_indx": [
      76,
      17,
      165,
      59,
      2,
      41,
      25
    ]
  },
  {
    "intent": "get the first value from dataframe `df` where column 'Letters' is equal to 'C'",
    "code": "df.loc[df['Letters'] == 'C', 'Letters'].values[0]",
    "slot_map": {
      "var_0": "df",
      "str_0": "Letters",
      "str_1": "C"
    },
    "intent_indx": [
      16,
      17,
      148,
      19,
      56,
      41,
      25,
      152,
      59,
      5,
      149,
      104,
      8,
      30
    ]
  },
  {
    "intent": "converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix",
    "code": "np.column_stack(([1, 2, 3], [4, 5, 6]))",
    "slot_map": {
      "str_0": "[1, 2, 3]",
      "str_1": "[4, 5, 6]",
      "[str_0]": "[1, 2, 3]",
      "[str_1]": "[4, 5, 6]"
    },
    "intent_indx": [
      114,
      28,
      4,
      5,
      29,
      30,
      11,
      3,
      183
    ]
  },
  {
    "intent": "get the type of `i`",
    "code": "type(i)",
    "slot_map": {
      "var_0": "i"
    },
    "intent_indx": [
      16,
      17,
      315,
      2,
      25
    ]
  },
  {
    "intent": "determine the type of variable `v`",
    "code": "type(v)",
    "slot_map": {
      "var_0": "v"
    },
    "intent_indx": [
      433,
      17,
      315,
      2,
      94,
      25
    ]
  },
  {
    "intent": "determine the type of variable `v`",
    "code": "type(v)",
    "slot_map": {
      "var_0": "v"
    },
    "intent_indx": [
      433,
      17,
      315,
      2,
      94,
      25
    ]
  },
  {
    "intent": "determine the type of variable `v`",
    "code": "type(v)",
    "slot_map": {
      "var_0": "v"
    },
    "intent_indx": [
      433,
      17,
      315,
      2,
      94,
      25
    ]
  },
  {
    "intent": "determine the type of variable `v`",
    "code": "type(v)",
    "slot_map": {
      "var_0": "v"
    },
    "intent_indx": [
      433,
      17,
      315,
      2,
      94,
      25
    ]
  },
  {
    "intent": "get the type of variable `variable_name`",
    "code": "print(type(variable_name))",
    "slot_map": {
      "var_0": "variable_name"
    },
    "intent_indx": [
      16,
      17,
      315,
      2,
      94,
      25
    ]
  },
  {
    "intent": "get the 5th item of a generator",
    "code": "next(itertools.islice(range(10), 5, 5 + 1))",
    "slot_map": {},
    "intent_indx": [
      16,
      17,
      433,
      37,
      2,
      3,
      142
    ]
  },
  {
    "intent": "Print a string `word` with string format",
    "code": "print('\"{}\"'.format(word))",
    "slot_map": {
      "var_0": "word"
    },
    "intent_indx": [
      161,
      3,
      13,
      25,
      77,
      13,
      15
    ]
  },
  {
    "intent": "join a list of strings `list` using a space ' '",
    "code": "\"\"\" \"\"\".join(list)",
    "slot_map": {
      "var_0": "list",
      "str_0": ""
    },
    "intent_indx": [
      272,
      3,
      4,
      2,
      13,
      25,
      108,
      3,
      133,
      5
    ]
  },
  {
    "intent": "create list `y` containing two empty lists",
    "code": "y = [[] for n in range(2)]",
    "slot_map": {
      "var_0": "y"
    },
    "intent_indx": [
      145,
      4,
      25,
      32,
      28,
      144,
      4
    ]
  },
  {
    "intent": "read a file 'C:/name/MyDocuments/numbers' into a list `data`",
    "code": "data = [line.strip() for line in open('C:/name/MyDocuments/numbers', 'r')]",
    "slot_map": {
      "str_0": "C:/name/MyDocuments/numbers",
      "var_0": "data"
    },
    "intent_indx": [
      124,
      3,
      126,
      5,
      11,
      3,
      4,
      25
    ]
  },
  {
    "intent": "delete all occurrences of character 'i' in string 'it is icy'",
    "code": "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])",
    "slot_map": {
      "str_0": "i",
      "str_1": "it is icy"
    },
    "intent_indx": [
      83,
      36,
      50,
      2,
      96,
      5,
      23,
      13,
      30
    ]
  },
  {
    "intent": "delete all instances of a character 'i' in a string 'it is icy'",
    "code": "re.sub('i', '', 'it is icy')",
    "slot_map": {
      "str_0": "i",
      "str_1": "it is icy"
    },
    "intent_indx": [
      83,
      36,
      345,
      2,
      3,
      96,
      5,
      23,
      3,
      13,
      30
    ]
  },
  {
    "intent": "delete all characters \"i\" in string \"it is icy\"",
    "code": "\"\"\"it is icy\"\"\".replace('i', '')",
    "slot_map": {
      "str_0": "i",
      "str_1": "it is icy"
    },
    "intent_indx": [
      83,
      36,
      96,
      5,
      23,
      13,
      30
    ]
  },
  {
    "intent": "How to delete all instances of a character in a string in python?",
    "code": "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])",
    "slot_map": {},
    "intent_indx": [
      75,
      8,
      83,
      36,
      345,
      2,
      3,
      96,
      23,
      3,
      13,
      23,
      47,
      49
    ]
  },
  {
    "intent": "Drop rows of pandas dataframe `df` having NaN in column at index \"1\"",
    "code": "df.dropna(subset=[1])",
    "slot_map": {
      "var_0": "df",
      "str_0": "1",
      "float_0": "NaN"
    },
    "intent_indx": [
      252,
      43,
      2,
      40,
      41,
      25,
      90,
      93,
      23,
      59,
      33,
      35,
      5
    ]
  },
  {
    "intent": "get elements from list `myList`, that have a field `n` value 30",
    "code": "[x for x in myList if x.n == 30]",
    "slot_map": {
      "var_0": "myList",
      "var_1": "n",
      "int_0": "30"
    },
    "intent_indx": [
      16,
      1,
      56,
      4,
      25,
      60,
      189,
      190,
      3,
      301,
      61,
      19,
      259
    ]
  },
  {
    "intent": "converting list of strings `intstringlist` to list of integer `nums`",
    "code": "nums = [int(x) for x in intstringlist]",
    "slot_map": {
      "var_0": "intstringlist",
      "var_1": "nums"
    },
    "intent_indx": [
      114,
      4,
      2,
      13,
      25,
      8,
      4,
      2,
      7,
      61
    ]
  },
  {
    "intent": "convert list of string numbers into list of integers",
    "code": "map(int, eval(input('Enter the unfriendly numbers: ')))",
    "slot_map": {},
    "intent_indx": [
      10,
      4,
      2,
      13,
      74,
      11,
      4,
      2,
      7
    ]
  },
  {
    "intent": "print \".\" without newline",
    "code": "sys.stdout.write('.')",
    "slot_map": {
      "str_0": "."
    },
    "intent_indx": [
      161,
      5,
      101,
      376
    ]
  },
  {
    "intent": "round off the float that is the product of `2.52 * 100` and convert it to an int",
    "code": "int(round(2.51 * 100))",
    "slot_map": {
      "str_0": "2.52 * 100"
    },
    "intent_indx": [
      244,
      433,
      17,
      92,
      189,
      149,
      17,
      159,
      2,
      5,
      29,
      10,
      89,
      8,
      217,
      72
    ]
  },
  {
    "intent": "Find all files in directory \"/mydir\" with extension \".txt\"",
    "code": "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass",
    "slot_map": {
      "str_0": "/mydir",
      "str_1": ".txt"
    },
    "intent_indx": [
      45,
      36,
      126,
      23,
      170,
      5,
      77,
      433,
      30
    ]
  },
  {
    "intent": "Find all files in directory \"/mydir\" with extension \".txt\"",
    "code": "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass",
    "slot_map": {
      "str_0": "/mydir",
      "str_1": ".txt"
    },
    "intent_indx": [
      45,
      36,
      126,
      23,
      170,
      5,
      77,
      433,
      30
    ]
  },
  {
    "intent": "Find all files in directory \"/mydir\" with extension \".txt\"",
    "code": "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass",
    "slot_map": {
      "str_0": "/mydir",
      "str_1": ".txt"
    },
    "intent_indx": [
      45,
      36,
      126,
      23,
      170,
      5,
      77,
      433,
      30
    ]
  },
  {
    "intent": "plot dataframe `df` without a legend",
    "code": "df.plot(legend=False)",
    "slot_map": {
      "var_0": "df"
    },
    "intent_indx": [
      235,
      41,
      25,
      101,
      3,
      391
    ]
  },
  {
    "intent": "loop through the IP address range \"192.168.x.x\"",
    "code": "for i in range(256):\n    for j in range(256):\n        ip = ('192.168.%d.%d' % (i, j))\n        print(ip)",
    "slot_map": {
      "str_0": "192.168.x.x"
    },
    "intent_indx": [
      433,
      281,
      17,
      433,
      433,
      123,
      5
    ]
  },
  {
    "intent": "loop through the IP address range \"192.168.x.x\"",
    "code": "for (i, j) in product(list(range(256)), list(range(256))):\n    pass",
    "slot_map": {
      "str_0": "192.168.x.x"
    },
    "intent_indx": [
      433,
      281,
      17,
      433,
      433,
      123,
      5
    ]
  },
  {
    "intent": "loop through the IP address range \"192.168.x.x\"",
    "code": "generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)",
    "slot_map": {
      "str_0": "192.168.x.x"
    },
    "intent_indx": [
      433,
      281,
      17,
      433,
      433,
      123,
      5
    ]
  },
  {
    "intent": "Sum the corresponding decimal values for binary values of each boolean element in list `x`",
    "code": "sum(1 << i for i, b in enumerate(x) if b)",
    "slot_map": {
      "var_0": "x"
    },
    "intent_indx": [
      111,
      17,
      333,
      246,
      19,
      20,
      267,
      19,
      2,
      21,
      353,
      1,
      23,
      4,
      25
    ]
  },
  {
    "intent": "write multiple strings `line1`, `line2` and `line3` in one line in a file `target`",
    "code": "target.write('%r\\n%r\\n%r\\n' % (line1, line2, line3))",
    "slot_map": {
      "var_0": "line1",
      "var_1": "line2",
      "var_2": "line3",
      "var_3": "target"
    },
    "intent_indx": [
      163,
      6,
      13,
      25,
      60,
      61,
      29,
      62,
      23,
      293,
      167,
      23,
      3,
      126,
      65
    ]
  },
  {
    "intent": "Convert list of lists `data` into a flat list",
    "code": "[y for x in data for y in (x if isinstance(x, list) else [x])]",
    "slot_map": {
      "var_0": "data"
    },
    "intent_indx": [
      10,
      4,
      2,
      4,
      25,
      11,
      3,
      363,
      4
    ]
  },
  {
    "intent": "Print new line character as `\\n` in a string `foo\\nbar`",
    "code": "print('foo\\nbar'.encode('string_escape'))",
    "slot_map": {
      "str_0": "\\n",
      "str_1": "foo\\nbar"
    },
    "intent_indx": [
      161,
      186,
      167,
      96,
      3,
      5,
      23,
      3,
      13,
      30
    ]
  },
  {
    "intent": "remove last comma character ',' in string `s`",
    "code": "\"\"\"\"\"\".join(s.rsplit(',', 1))",
    "slot_map": {
      "str_0": ",",
      "var_0": "s"
    },
    "intent_indx": [
      258,
      165,
      250,
      96,
      5,
      23,
      13,
      25
    ]
  },
  {
    "intent": "calculate the mean of each element in array `x` with the element previous to it",
    "code": "(x[1:] + x[:-1]) / 2",
    "slot_map": {
      "var_0": "x"
    },
    "intent_indx": [
      243,
      17,
      388,
      2,
      21,
      1,
      23,
      82,
      25,
      77,
      17,
      1,
      433,
      8,
      89
    ]
  },
  {
    "intent": "get an array of the mean of each two consecutive values in numpy array `x`",
    "code": "x[:-1] + (x[1:] - x[:-1]) / 2",
    "slot_map": {
      "var_0": "x"
    },
    "intent_indx": [
      16,
      217,
      82,
      2,
      17,
      388,
      2,
      21,
      28,
      408,
      19,
      23,
      81,
      82,
      25
    ]
  },
  {
    "intent": "load data containing `utf-8` from file `new.txt` into numpy array `arr`",
    "code": "arr = numpy.fromiter(codecs.open('new.txt', encoding='utf-8'), dtype='<U2')",
    "slot_map": {
      "str_0": "utf-8",
      "str_1": "new.txt",
      "var_0": "arr"
    },
    "intent_indx": [
      239,
      63,
      32,
      5,
      56,
      126,
      30,
      11,
      81,
      82,
      25
    ]
  },
  {
    "intent": "reverse sort list of dicts `l` by value for key `time`",
    "code": "l = sorted(l, key=itemgetter('time'), reverse=True)",
    "slot_map": {
      "var_0": "l",
      "var_1": "time"
    },
    "intent_indx": [
      273,
      117,
      4,
      2,
      433,
      25,
      42,
      19,
      20,
      22,
      61
    ]
  },
  {
    "intent": "Sort a list of dictionary `l` based on key `time` in descending order",
    "code": "l = sorted(l, key=lambda a: a['time'], reverse=True)",
    "slot_map": {
      "var_0": "l",
      "var_1": "time"
    },
    "intent_indx": [
      117,
      3,
      4,
      2,
      24,
      25,
      199,
      140,
      22,
      61,
      23,
      121,
      158
    ]
  },
  {
    "intent": "get rows of dataframe `df` that match regex '(Hel|Just)'",
    "code": "df.loc[df[0].str.contains('(Hel|Just)')]",
    "slot_map": {
      "var_0": "df",
      "str_0": "(Hel|Just)",
      "(str_0)": "(Hel|Just)"
    },
    "intent_indx": [
      16,
      43,
      2,
      41,
      25,
      189,
      106,
      38,
      5
    ]
  },
  {
    "intent": "find the string in `your_string` between two special characters \"[\" and \"]\"",
    "code": "re.search('\\\\[(.*)\\\\]', your_string).group(1)",
    "slot_map": {
      "var_0": "your_string",
      "str_0": "[",
      "str_1": "]"
    },
    "intent_indx": [
      45,
      17,
      13,
      23,
      25,
      269,
      28,
      433,
      96,
      5,
      29,
      30
    ]
  },
  {
    "intent": "How to create a list of date string in 'yyyymmdd' format with Python Pandas?",
    "code": "[d.strftime('%Y%m%d') for d in pandas.date_range('20130226', '20130302')]",
    "slot_map": {
      "str_0": "yyyymmdd"
    },
    "intent_indx": [
      75,
      8,
      145,
      3,
      4,
      2,
      134,
      13,
      23,
      5,
      15,
      77,
      47,
      40,
      49
    ]
  },
  {
    "intent": "count number of times string 'brown' occurred in string 'The big brown fox is brown'",
    "code": "\"\"\"The big brown fox is brown\"\"\".count('brown')",
    "slot_map": {
      "str_0": "brown",
      "str_1": "The big brown fox is brown"
    },
    "intent_indx": [
      173,
      74,
      2,
      135,
      13,
      5,
      433,
      23,
      13,
      30
    ]
  },
  {
    "intent": "decode json string `request.body` to python dict",
    "code": "json.loads(request.body)",
    "slot_map": {
      "str_0": "request.body"
    },
    "intent_indx": [
      178,
      176,
      13,
      5,
      8,
      47,
      182
    ]
  },
  {
    "intent": "download the file from url `url` and save it under file `file_name`",
    "code": "urllib.request.urlretrieve(url, file_name)",
    "slot_map": {
      "var_0": "url",
      "var_1": "file_name"
    },
    "intent_indx": [
      390,
      17,
      126,
      56,
      100,
      25,
      29,
      318,
      89,
      433,
      126,
      61
    ]
  },
  {
    "intent": "split string `text` by space",
    "code": "text.split()",
    "slot_map": {
      "var_0": "text"
    },
    "intent_indx": [
      139,
      13,
      25,
      42,
      133
    ]
  },
  {
    "intent": "split string `text` by \",\"",
    "code": "text.split(',')",
    "slot_map": {
      "var_0": "text",
      "str_0": ","
    },
    "intent_indx": [
      139,
      13,
      25,
      42,
      5
    ]
  },
  {
    "intent": "Split string `line` into a list by whitespace",
    "code": "line.split()",
    "slot_map": {
      "var_0": "line"
    },
    "intent_indx": [
      139,
      13,
      25,
      11,
      3,
      4,
      42,
      202
    ]
  },
  {
    "intent": "replace dot characters  '.' associated with ascii letters in list `s` with space ' '",
    "code": "[re.sub('(?<!\\\\d)\\\\.(?!\\\\d)', ' ', i) for i in s]",
    "slot_map": {
      "str_0": ".",
      "var_0": "s",
      "str_1": ""
    },
    "intent_indx": [
      131,
      129,
      96,
      5,
      277,
      77,
      366,
      347,
      23,
      4,
      25,
      77,
      133,
      30
    ]
  },
  {
    "intent": "sort list `list_of_strings` based on second index of each string `s`",
    "code": "sorted(list_of_strings, key=lambda s: s.split(',')[1])",
    "slot_map": {
      "var_0": "list_of_strings",
      "var_1": "s"
    },
    "intent_indx": [
      117,
      4,
      25,
      199,
      140,
      118,
      35,
      2,
      21,
      13,
      61
    ]
  },
  {
    "intent": "call multiple bash function \u2018vasp\u2019 and \u2018tee tee_output\u2019 using \u2018|\u2019",
    "code": "subprocess.check_call('vasp | tee tee_output', shell=True)",
    "slot_map": {},
    "intent_indx": [
      294,
      6,
      348,
      67,
      377,
      433,
      378,
      29,
      377,
      433,
      433,
      378,
      108,
      377,
      433,
      378
    ]
  },
  {
    "intent": "eliminate all strings from list `lst`",
    "code": "[element for element in lst if isinstance(element, int)]",
    "slot_map": {
      "var_0": "lst"
    },
    "intent_indx": [
      433,
      36,
      13,
      56,
      4,
      25
    ]
  },
  {
    "intent": "get all the elements except strings from the list 'lst'.",
    "code": "[element for element in lst if not isinstance(element, str)]",
    "slot_map": {
      "str_0": "lst"
    },
    "intent_indx": [
      16,
      36,
      17,
      1,
      433,
      13,
      56,
      17,
      4,
      5,
      155
    ]
  },
  {
    "intent": "Sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`",
    "code": "newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])",
    "slot_map": {
      "var_0": "list_to_be_sorted",
      "var_1": "name"
    },
    "intent_indx": [
      117,
      3,
      4,
      2,
      24,
      25,
      42,
      17,
      19,
      2,
      17,
      24,
      22,
      61
    ]
  },
  {
    "intent": "sort a list of dictionaries `l` by values in key `name` in descending order",
    "code": "newlist = sorted(l, key=itemgetter('name'), reverse=True)",
    "slot_map": {
      "var_0": "l",
      "var_1": "name"
    },
    "intent_indx": [
      117,
      3,
      4,
      2,
      24,
      25,
      42,
      19,
      23,
      22,
      61,
      23,
      121,
      158
    ]
  },
  {
    "intent": "How do I sort a list of dictionaries by values of the dictionary in Python?",
    "code": "list_of_dicts.sort(key=operator.itemgetter('name'))",
    "slot_map": {},
    "intent_indx": [
      75,
      312,
      313,
      117,
      3,
      4,
      2,
      24,
      42,
      19,
      2,
      17,
      24,
      23,
      47,
      49
    ]
  },
  {
    "intent": "How do I sort a list of dictionaries by values of the dictionary in Python?",
    "code": "list_of_dicts.sort(key=operator.itemgetter('age'))",
    "slot_map": {},
    "intent_indx": [
      75,
      312,
      313,
      117,
      3,
      4,
      2,
      24,
      42,
      19,
      2,
      17,
      24,
      23,
      47,
      49
    ]
  },
  {
    "intent": "How to sort a Dataframe by the ocurrences in a column in Python (pandas)",
    "code": "df.groupby('prots').sum().sort('scores', ascending=False)",
    "slot_map": {},
    "intent_indx": [
      75,
      8,
      117,
      3,
      41,
      42,
      17,
      433,
      23,
      3,
      59,
      23,
      47,
      203,
      40,
      26
    ]
  },
  {
    "intent": "join together with \",\" elements inside a list indexed with 'category' within a dictionary `trans`",
    "code": "\"\"\",\"\"\".join(trans['category'])",
    "slot_map": {
      "str_0": ",",
      "str_1": "category",
      "var_0": "trans"
    },
    "intent_indx": [
      272,
      433,
      77,
      5,
      1,
      44,
      3,
      4,
      433,
      77,
      30,
      52,
      3,
      24,
      25
    ]
  },
  {
    "intent": "concatenate array of strings `['A', 'B', 'C', 'D']` into a string",
    "code": "\"\"\"\"\"\".join(['A', 'B', 'C', 'D'])",
    "slot_map": {
      "str_0": "['A', 'B', 'C', 'D']",
      "[str_0]": "['A', 'B', 'C', 'D']"
    },
    "intent_indx": [
      0,
      82,
      2,
      13,
      5,
      11,
      3,
      13
    ]
  },
  {
    "intent": "get json data from restful service 'url'",
    "code": "json.load(urllib.request.urlopen('url'))",
    "slot_map": {
      "str_0": "url"
    },
    "intent_indx": [
      16,
      176,
      63,
      56,
      433,
      433,
      5
    ]
  },
  {
    "intent": "Remove all strings from a list a strings `sents` where the values starts with `@$\\t` or `#`",
    "code": "[x for x in sents if not x.startswith('@$\\t') and not x.startswith('#')]",
    "slot_map": {
      "var_0": "sents",
      "str_0": "@$\\t",
      "str_1": "#"
    },
    "intent_indx": [
      258,
      36,
      13,
      56,
      3,
      4,
      3,
      13,
      25,
      152,
      17,
      19,
      412,
      77,
      5,
      330,
      30
    ]
  },
  {
    "intent": "django filter by hour",
    "code": "Entry.objects.filter(pub_date__contains='08:00')",
    "slot_map": {},
    "intent_indx": [
      85,
      209,
      42,
      343
    ]
  },
  {
    "intent": "sort a list of dictionary `list` first by key `points` and then by `time`",
    "code": "list.sort(key=lambda item: (item['points'], item['time']))",
    "slot_map": {
      "var_0": "list",
      "var_1": "points",
      "var_2": "time"
    },
    "intent_indx": [
      117,
      3,
      4,
      2,
      24,
      25,
      148,
      42,
      22,
      61,
      29,
      251,
      42,
      62
    ]
  },
  {
    "intent": "convert datetime object `(1970, 1, 1)` to seconds",
    "code": "(t - datetime.datetime(1970, 1, 1)).total_seconds()",
    "slot_map": {
      "str_0": "(1970, 1, 1)",
      "(str_0)": "(1970, 1, 1)"
    },
    "intent_indx": [
      10,
      12,
      14,
      5,
      8,
      118
    ]
  },
  {
    "intent": "insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.",
    "code": "re.sub('(\\\\_a)?\\\\.([^\\\\.]*)$', '_suff.\\\\2', 'long.file.name.jpg')",
    "slot_map": {
      "var_0": "_suff",
      "str_0": "long.file.name.jpg",
      "var_1": "_a",
      "var_2": "suff"
    },
    "intent_indx": [
      268,
      25,
      271,
      17,
      126,
      433,
      23,
      5,
      330,
      131,
      61,
      77,
      62,
      147,
      89,
      433,
      17,
      433,
      155
    ]
  },
  {
    "intent": "reload a module `module`",
    "code": "import imp\nimp.reload(module)",
    "slot_map": {
      "var_0": "module"
    },
    "intent_indx": [
      433,
      3,
      327,
      25
    ]
  },
  {
    "intent": "Convert integer `number` into an unassigned integer",
    "code": "struct.unpack('H', struct.pack('h', number))",
    "slot_map": {
      "var_0": "number"
    },
    "intent_indx": [
      10,
      7,
      25,
      11,
      217,
      433,
      7
    ]
  },
  {
    "intent": "convert int values in list `numlist` to float",
    "code": "numlist = [float(x) for x in numlist]",
    "slot_map": {
      "var_0": "numlist"
    },
    "intent_indx": [
      10,
      72,
      19,
      23,
      4,
      25,
      8,
      92
    ]
  },
  {
    "intent": "write dataframe `df`, excluding index, to a csv file",
    "code": "df.to_csv(filename, index=False)",
    "slot_map": {
      "var_0": "df"
    },
    "intent_indx": [
      163,
      41,
      25,
      60,
      433,
      35,
      60,
      8,
      3,
      278,
      126
    ]
  },
  {
    "intent": "convert a urllib unquoted string `unescaped` to a json data `json_data`",
    "code": "json_data = json.loads(unescaped)",
    "slot_map": {
      "var_0": "unescaped",
      "var_1": "json_data"
    },
    "intent_indx": [
      10,
      3,
      433,
      433,
      13,
      25,
      8,
      3,
      176,
      63,
      61
    ]
  },
  {
    "intent": "Create a list containing all ascii characters as its elements",
    "code": "[chr(i) for i in range(127)]",
    "slot_map": {},
    "intent_indx": [
      145,
      3,
      4,
      32,
      36,
      366,
      96,
      3,
      89,
      1
    ]
  },
  {
    "intent": "write `newFileBytes` to a binary file `newFile`",
    "code": "newFile.write(struct.pack('5B', *newFileBytes))",
    "slot_map": {
      "var_0": "newFileBytes",
      "var_1": "newFile"
    },
    "intent_indx": [
      163,
      25,
      8,
      3,
      267,
      126,
      61
    ]
  },
  {
    "intent": "python regex - check for a capital letter with a following lowercase in string `string`",
    "code": "re.sub('^[A-Z0-9]*(?![a-z])', '', string)",
    "slot_map": {
      "var_0": "string"
    },
    "intent_indx": [
      47,
      38,
      433,
      227,
      20,
      3,
      433,
      347,
      77,
      3,
      433,
      198,
      23,
      13,
      25
    ]
  },
  {
    "intent": "get the last key of dictionary `dict`",
    "code": "list(dict.keys())[-1]",
    "slot_map": {
      "var_0": "dict"
    },
    "intent_indx": [
      16,
      17,
      165,
      22,
      2,
      24,
      25
    ]
  },
  {
    "intent": "write line \"hi there\" to file `f`",
    "code": "print('hi there', file=f)",
    "slot_map": {
      "str_0": "hi there",
      "var_0": "f"
    },
    "intent_indx": [
      163,
      167,
      5,
      8,
      126,
      25
    ]
  },
  {
    "intent": "write line \"hi there\" to file `myfile`",
    "code": "f = open('myfile', 'w')\nf.write('hi there\\n')\nf.close()",
    "slot_map": {
      "str_0": "hi there",
      "var_0": "myfile"
    },
    "intent_indx": [
      163,
      167,
      5,
      8,
      126,
      25
    ]
  },
  {
    "intent": "write line \"Hello\" to file `somefile.txt`",
    "code": "with open('somefile.txt', 'a') as the_file:\n    the_file.write('Hello\\n')",
    "slot_map": {
      "str_0": "Hello",
      "str_1": "somefile.txt"
    },
    "intent_indx": [
      163,
      167,
      5,
      8,
      126,
      30
    ]
  },
  {
    "intent": "convert unicode string `s` to ascii",
    "code": "s.encode('iso-8859-15')",
    "slot_map": {
      "var_0": "s"
    },
    "intent_indx": [
      10,
      223,
      13,
      25,
      8,
      366
    ]
  },
  {
    "intent": "Django get maximum value associated with field 'added' in model `AuthorizedEmail`",
    "code": "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]",
    "slot_map": {
      "str_0": "added",
      "var_0": "AuthorizedEmail"
    },
    "intent_indx": [
      85,
      16,
      219,
      19,
      277,
      77,
      301,
      5,
      23,
      86,
      25
    ]
  },
  {
    "intent": "Find all numbers and dots from a string `text` using regex",
    "code": "re.findall('Test([0-9.]*[0-9]+)', text)",
    "slot_map": {
      "var_0": "text"
    },
    "intent_indx": [
      45,
      36,
      74,
      29,
      129,
      56,
      3,
      13,
      25,
      108,
      38
    ]
  },
  {
    "intent": "python regex  to find all numbers and dots from 'text'",
    "code": "re.findall('Test([\\\\d.]*\\\\d+)', text)",
    "slot_map": {
      "str_0": "text"
    },
    "intent_indx": [
      47,
      38,
      8,
      45,
      36,
      74,
      29,
      129,
      56,
      5
    ]
  },
  {
    "intent": "execute script 'script.ps1' using 'powershell.exe' shell",
    "code": "os.system('powershell.exe', 'script.ps1')",
    "slot_map": {
      "str_0": "script.ps1",
      "str_1": "powershell.exe"
    },
    "intent_indx": [
      136,
      236,
      5,
      108,
      30,
      282
    ]
  },
  {
    "intent": "Sort a list of tuples `b` by third item in the tuple",
    "code": "b.sort(key=lambda x: x[1][2])",
    "slot_map": {
      "var_0": "b"
    },
    "intent_indx": [
      117,
      3,
      4,
      2,
      31,
      25,
      42,
      120,
      37,
      23,
      17,
      112
    ]
  },
  {
    "intent": "get a list of all keys in Cassandra database `cf` with pycassa",
    "code": "list(cf.get_range().get_keys())",
    "slot_map": {
      "var_0": "cf"
    },
    "intent_indx": [
      16,
      3,
      4,
      2,
      36,
      22,
      23,
      433,
      433,
      25,
      77,
      433
    ]
  },
  {
    "intent": "create a datetime with the current date & time",
    "code": "datetime.datetime.now()",
    "slot_map": {},
    "intent_indx": [
      145,
      3,
      12,
      77,
      17,
      174,
      134,
      433,
      135
    ]
  },
  {
    "intent": "get the index of an integer `1` from a list `lst` if the list also contains boolean items",
    "code": "next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)",
    "slot_map": {
      "str_0": "1",
      "var_0": "lst"
    },
    "intent_indx": [
      16,
      17,
      35,
      2,
      217,
      7,
      5,
      56,
      3,
      4,
      25,
      147,
      17,
      4,
      433,
      73,
      353,
      37
    ]
  },
  {
    "intent": "subtract 13 from every number in a list `a`",
    "code": "a[:] = [(x - 13) for x in a]",
    "slot_map": {
      "var_0": "a",
      "int_0": "13"
    },
    "intent_indx": [
      393,
      259,
      56,
      270,
      74,
      23,
      3,
      4,
      25
    ]
  },
  {
    "intent": "choose a random file from the directory contents of the C drive, `C:\\\\`",
    "code": "random.choice(os.listdir('C:\\\\'))",
    "slot_map": {
      "str_0": "C:\\\\"
    },
    "intent_indx": [
      433,
      3,
      184,
      126,
      56,
      17,
      170,
      125,
      2,
      17,
      433,
      433,
      60,
      5
    ]
  },
  {
    "intent": "get the highest element in absolute value in a numpy matrix `x`",
    "code": "max(x.min(), x.max(), key=abs)",
    "slot_map": {
      "var_0": "x"
    },
    "intent_indx": [
      16,
      17,
      433,
      1,
      23,
      433,
      19,
      23,
      3,
      81,
      183,
      25
    ]
  },
  {
    "intent": "Get all urls within text `s`",
    "code": "re.findall('\"(http.*?)\"', s, re.MULTILINE | re.DOTALL)",
    "slot_map": {
      "var_0": "s"
    },
    "intent_indx": [
      16,
      36,
      100,
      52,
      257,
      25
    ]
  },
  {
    "intent": "match urls whose domain doesn't start with `t` from string `document` using regex",
    "code": "re.findall('http://[^t][^s\"]+\\\\.html', document)",
    "slot_map": {
      "var_0": "t",
      "var_1": "document"
    },
    "intent_indx": [
      106,
      100,
      221,
      433,
      180,
      433,
      412,
      77,
      25,
      56,
      13,
      61,
      108,
      38
    ]
  },
  {
    "intent": "split a string `mystring` considering the spaces ' '",
    "code": "mystring.replace(' ', '! !').split('!')",
    "slot_map": {
      "var_0": "mystring",
      "str_0": ""
    },
    "intent_indx": [
      139,
      3,
      13,
      25,
      433,
      17,
      133,
      5
    ]
  },
  {
    "intent": "open file `path` with mode 'r'",
    "code": "open(path, 'r')",
    "slot_map": {
      "var_0": "path",
      "str_0": "r"
    },
    "intent_indx": [
      275,
      126,
      25,
      77,
      276,
      5
    ]
  },
  {
    "intent": "sum elements at the same index in list `data`",
    "code": "[[sum(item) for item in zip(*items)] for items in zip(*data)]",
    "slot_map": {
      "var_0": "data"
    },
    "intent_indx": [
      111,
      1,
      33,
      17,
      34,
      35,
      23,
      4,
      25
    ]
  },
  {
    "intent": "add a new axis to array `a`",
    "code": "a[:, (np.newaxis)]",
    "slot_map": {
      "var_0": "a"
    },
    "intent_indx": [
      58,
      3,
      186,
      419,
      8,
      82,
      25
    ]
  }
]
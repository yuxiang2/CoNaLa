[
  {
    "intent": "Concatenate elements of a list 'x' of multiple integers to a single integer",
    "code": "sum(d * 10 ** i for i, d in enumerate(x[::-1]))"
  },
  {
    "intent": "convert a list of integers into a single integer",
    "code": "r = int(''.join(map(str, x)))"
  },
  {
    "intent": "convert a DateTime string back to a DateTime object of format '%Y-%m-%d %H:%M:%S.%f'",
    "code": "datetime.strptime('2010-11-13 10:33:54.227806', '%Y-%m-%d %H:%M:%S.%f')"
  },
  {
    "intent": "get the average of a list values for each key in dictionary `d`)",
    "code": "[(i, sum(j) / len(j)) for i, j in list(d.items())]"
  },
  {
    "intent": "zip two lists `[1, 2]` and `[3, 4]` into a list of two tuples containing elements at the same index in each list",
    "code": "zip([1, 2], [3, 4])"
  },
  {
    "intent": "prepend string 'hello' to all items in list 'a'",
    "code": "['hello{0}'.format(i) for i in a]"
  },
  {
    "intent": "regex for repeating words in a string `s`",
    "code": "re.sub('(?<!\\\\S)((\\\\S+)(?:\\\\s+\\\\2))(?:\\\\s+\\\\2)+(?!\\\\S)', '\\\\1', s)"
  },
  {
    "intent": "normalize a pandas dataframe `df` by row",
    "code": "df.div(df.sum(axis=1), axis=0)"
  },
  {
    "intent": "swap values in a tuple/list inside a list `mylist`",
    "code": "map(lambda t: (t[1], t[0]), mylist)"
  },
  {
    "intent": "Swap values in a tuple/list in list `mylist`",
    "code": "[(t[1], t[0]) for t in mylist]"
  },
  {
    "intent": "Find next sibling element in Python Selenium?",
    "code": "driver.find_element_by_xpath(\"//p[@id, 'one']/following-sibling::p\")"
  },
  {
    "intent": "find all occurrences of the pattern '\\\\[[^\\\\]]*\\\\]|\\\\([^\\\\)]*\\\\)|\"[^\"]*\"|\\\\S+' within `strs`",
    "code": "re.findall('\\\\[[^\\\\]]*\\\\]|\\\\([^\\\\)]*\\\\)|\"[^\"]*\"|\\\\S+', strs)"
  },
  {
    "intent": "generate the combinations of 3 from a set `{1, 2, 3, 4}`",
    "code": "print(list(itertools.combinations({1, 2, 3, 4}, 3)))"
  },
  {
    "intent": "add multiple columns `hour`, `weekday`, `weeknum` to pandas data frame `df` from lambda function `lambdafunc`",
    "code": "df[['hour', 'weekday', 'weeknum']] = df.apply(lambdafunc, axis=1)"
  },
  {
    "intent": "BeautifulSoup search string 'Elsie' inside tag 'a'",
    "code": "soup.find_all('a', string='Elsie')"
  },
  {
    "intent": "Convert a datetime object `my_datetime` into readable format `%B %d, %Y`",
    "code": "my_datetime.strftime('%B %d, %Y')"
  },
  {
    "intent": "parse string `s` to int when string contains a number",
    "code": "int(''.join(c for c in s if c.isdigit()))"
  },
  {
    "intent": "add dictionary `{'class': {'section': 5}}` to key 'Test' of dictionary `dic`",
    "code": "dic['Test'].update({'class': {'section': 5}})"
  },
  {
    "intent": "transforming the string `s` into dictionary",
    "code": "dict(map(int, x.split(':')) for x in s.split(','))"
  },
  {
    "intent": "How to select element with Selenium Python xpath",
    "code": "driver.find_element_by_xpath(\"//div[@id='a']//a[@class='click']\")"
  },
  {
    "intent": "find rows matching `(0,1)` in a 2 dimensional numpy array `vals`",
    "code": "np.where((vals == (0, 1)).all(axis=1))"
  },
  {
    "intent": "How to delete a record in Django models?",
    "code": "SomeModel.objects.filter(id=id).delete()"
  },
  {
    "intent": "build a dictionary containing the conversion of each list in list `[['two', 2], ['one', 1]]` to a key/value pair as its items",
    "code": "dict([['two', 2], ['one', 1]])"
  },
  {
    "intent": "convert list `l` to dictionary having each two adjacent elements as key/value pair",
    "code": "dict(zip(l[::2], l[1::2]))"
  },
  {
    "intent": "assign float 9.8 to variable `GRAVITY`",
    "code": "GRAVITY = 9.8"
  },
  {
    "intent": "separate numbers from characters in string \"30m1000n20m\"",
    "code": "re.findall('(([0-9]+)([A-Z]))', '20M10000N80M')"
  },
  {
    "intent": "separate numbers and characters in string '20M10000N80M'",
    "code": "re.findall('([0-9]+|[A-Z])', '20M10000N80M')"
  },
  {
    "intent": "separate numbers and characters in string '20M10000N80M'",
    "code": "re.findall('([0-9]+)([A-Z])', '20M10000N80M')"
  },
  {
    "intent": "Get a list of  words from a string `Hello world, my name is...James the 2nd!` removing punctuation",
    "code": "re.compile('\\\\w+').findall('Hello world, my name is...James the 2nd!')"
  },
  {
    "intent": "Convert string '03:55' into datetime.time object",
    "code": "datetime.datetime.strptime('03:55', '%H:%M').time()"
  },
  {
    "intent": "request url 'https://www.reporo.com/' without verifying SSL certificates",
    "code": "requests.get('https://www.reporo.com/', verify=False)"
  },
  {
    "intent": "Extract values not equal to 0 from numpy array `a`",
    "code": "a[a != 0]"
  },
  {
    "intent": "map two lists `keys` and `values` into a dictionary",
    "code": "new_dict = {k: v for k, v in zip(keys, values)}"
  },
  {
    "intent": "map two lists `keys` and `values` into a dictionary",
    "code": "dict((k, v) for k, v in zip(keys, values))"
  },
  {
    "intent": "map two lists `keys` and `values` into a dictionary",
    "code": "dict([(k, v) for k, v in zip(keys, values)])"
  },
  {
    "intent": "find the string matches within parenthesis from a string `s` using regex",
    "code": "m = re.search('\\\\[(\\\\w+)\\\\]', s)"
  },
  {
    "intent": "Enable the SO_REUSEADDR socket option in socket object `s` to fix the error `only one usage of each socket address is normally permitted`",
    "code": "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"
  },
  {
    "intent": "append the sum of each tuple pair in the grouped list `list1` and list `list2` elements to list `list3`",
    "code": "list3 = [(a + b) for a, b in zip(list1, list2)]"
  },
  {
    "intent": "converting hex string `s` to its integer representations",
    "code": "[ord(c) for c in s.decode('hex')]"
  },
  {
    "intent": "sort list `student_tuples` by second element of each tuple in ascending and third element of each tuple in descending",
    "code": "print(sorted(student_tuples, key=lambda t: (-t[2], t[0])))"
  },
  {
    "intent": "get list of duplicated elements in range of 3",
    "code": "[y for x in range(3) for y in [x, x]]"
  },
  {
    "intent": "read the contents of the file 'file.txt' into `txt`",
    "code": "txt = open('file.txt').read()"
  },
  {
    "intent": "divide each element in list `myList` by integer `myInt`",
    "code": "myList[:] = [(x / myInt) for x in myList]"
  },
  {
    "intent": "python: dots in the name of variable in a format string",
    "code": "\"\"\"Name: {0[person.name]}\"\"\".format({'person.name': 'Joe'})"
  },
  {
    "intent": "replace white spaces in dataframe `df` with '_'",
    "code": "df.replace(' ', '_', regex=True)"
  },
  {
    "intent": "convert date `my_date` to datetime",
    "code": "datetime.datetime.combine(my_date, datetime.time.min)"
  },
  {
    "intent": "convert tuple `tst` to string `tst2`",
    "code": "tst2 = str(tst)"
  },
  {
    "intent": "get modified time of file `file`",
    "code": "time.ctime(os.path.getmtime(file))"
  },
  {
    "intent": "get creation time of file `file`",
    "code": "time.ctime(os.path.getctime(file))"
  },
  {
    "intent": "get modification time of file `filename`",
    "code": "t = os.path.getmtime(filename)"
  },
  {
    "intent": "get modification time of file `path`",
    "code": "os.path.getmtime(path)"
  },
  {
    "intent": "get modified time of file `file`",
    "code": "print(('last modified: %s' % time.ctime(os.path.getmtime(file))))"
  },
  {
    "intent": "get the creation time of file `file`",
    "code": "print(('created: %s' % time.ctime(os.path.getctime(file))))"
  },
  {
    "intent": "get the creation time of file `path_to_file`",
    "code": "return os.path.getctime(path_to_file)"
  },
  {
    "intent": "execute os command ''TASKKILL /F /IM firefox.exe''",
    "code": "os.system('TASKKILL /F /IM firefox.exe')"
  },
  {
    "intent": "split string `string` on whitespaces using a generator",
    "code": "return (x.group(0) for x in re.finditer(\"[A-Za-z']+\", string))"
  },
  {
    "intent": "Unpack each value in list `x` to its placeholder '%' in string '%.2f'",
    "code": "\"\"\", \"\"\".join(['%.2f'] * len(x))"
  },
  {
    "intent": "match regex pattern '(\\\\d+(\\\\.\\\\d+)?)' with string '3434.35353'",
    "code": "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"
  },
  {
    "intent": "replace parentheses and all data within it with empty string '' in column 'name' of dataframe `df`",
    "code": "df['name'].str.replace('\\\\(.*\\\\)', '')"
  },
  {
    "intent": "create a list `result` containing elements form list `list_a` if first element of list `list_a` is in list `list_b`",
    "code": "result = [x for x in list_a if x[0] in list_b]"
  },
  {
    "intent": "generate all possible string permutations of each two elements in list `['hel', 'lo', 'bye']`",
    "code": "print([''.join(a) for a in combinations(['hel', 'lo', 'bye'], 2)])"
  },
  {
    "intent": "get a list of items form nested list `li` where third element of each item contains string 'ar'",
    "code": "[x for x in li if 'ar' in x[2]]"
  },
  {
    "intent": "Sort lists in the list `unsorted_list` by the element at index 3 of each list",
    "code": "unsorted_list.sort(key=lambda x: x[3])"
  },
  {
    "intent": "Log message 'test' on the root logger.",
    "code": "logging.info('test')"
  },
  {
    "intent": "Return a subplot axes positioned by the grid definition `1,1,1` using matpotlib",
    "code": "fig.add_subplot(1, 1, 1)"
  },
  {
    "intent": "Sort dictionary `x` by value in ascending order",
    "code": "sorted(list(x.items()), key=operator.itemgetter(1))"
  },
  {
    "intent": "Sort dictionary `dict1` by value in ascending order",
    "code": "sorted(dict1, key=dict1.get)"
  },
  {
    "intent": "Sort dictionary `d` by value in descending order",
    "code": "sorted(d, key=d.get, reverse=True)"
  },
  {
    "intent": "Sort dictionary `d` by value in ascending order",
    "code": "sorted(list(d.items()), key=(lambda x: x[1]))"
  },
  {
    "intent": "elementwise product of 3d arrays `A` and `B`",
    "code": "np.einsum('ijk,ikl->ijl', A, B)"
  },
  {
    "intent": "Print a string `card` with string formatting",
    "code": "print('I have: {0.price}'.format(card))"
  },
  {
    "intent": "Write a comment `# Data for Class A\\n` to a file object `f`",
    "code": "f.write('# Data for Class A\\n')"
  },
  {
    "intent": "move the last item in list `a` to the beginning",
    "code": "a = a[-1:] + a[:-1]"
  },
  {
    "intent": "Parse DateTime object `datetimevariable` using format '%Y-%m-%d'",
    "code": "datetimevariable.strftime('%Y-%m-%d')"
  },
  {
    "intent": "Normalize line ends in a string 'mixed'",
    "code": "mixed.replace('\\r\\n', '\\n').replace('\\r', '\\n')"
  },
  {
    "intent": "find the real user home directory using python",
    "code": "os.path.expanduser('~user')"
  },
  {
    "intent": "index a list `L` with another list `Idx`",
    "code": "T = [L[i] for i in Idx]"
  },
  {
    "intent": "get a list of words `words` of a file 'myfile'",
    "code": "words = open('myfile').read().split()"
  },
  {
    "intent": "Get a list of lists with summing the values of the second element from each list of lists `data`",
    "code": "[[sum([x[1] for x in i])] for i in data]"
  },
  {
    "intent": "summing the second item in a list of lists of lists",
    "code": "[sum([x[1] for x in i]) for i in data]"
  },
  {
    "intent": "sort objects in `Articles` in descending order of counts of `likes`",
    "code": "Article.objects.annotate(like_count=Count('likes')).order_by('-like_count')"
  },
  {
    "intent": "return a DateTime object with the current UTC date",
    "code": "today = datetime.datetime.utcnow().date()"
  },
  {
    "intent": "create a list containing the multiplication of each elements at the same index of list `lista` and list `listb`",
    "code": "[(a * b) for a, b in zip(lista, listb)]"
  },
  {
    "intent": "fetch smilies matching regex pattern '(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)' in string `s`",
    "code": "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"
  },
  {
    "intent": "match the pattern '[:;][)(](?![)(])' to the string `str`",
    "code": "re.match('[:;][)(](?![)(])', str)"
  },
  {
    "intent": "convert a list of objects `list_name` to json string `json_string`",
    "code": "json_string = json.dumps([ob.__dict__ for ob in list_name])"
  },
  {
    "intent": "create a list `listofzeros` of `n` zeros",
    "code": "listofzeros = [0] * n"
  },
  {
    "intent": "decode the string 'stringnamehere'  to UTF-8",
    "code": "stringnamehere.decode('utf-8', 'ignore')"
  },
  {
    "intent": "Match regex pattern '((?:A|B|C)D)' on string 'BDE'",
    "code": "re.findall('((?:A|B|C)D)', 'BDE')"
  },
  {
    "intent": "Create a key `key` if it does not exist in dict `dic` and append element `value` to value.",
    "code": "dic.setdefault(key, []).append(value)"
  },
  {
    "intent": "Get the value of the minimum element in the second column of array `a`",
    "code": "a[np.argmin(a[:, (1)])]"
  },
  {
    "intent": "extend dictionary `a` with key/value pairs of dictionary `b`",
    "code": "a.update(b)"
  },
  {
    "intent": "removing key values pairs with key 'mykey1' from a list of dictionaries `mylist`",
    "code": "[{k: v for k, v in d.items() if k != 'mykey1'} for d in mylist]"
  },
  {
    "intent": "Removing key values pairs from a list of dictionaries",
    "code": "[dict((k, v) for k, v in d.items() if k != 'mykey1') for d in mylist]"
  },
  {
    "intent": "create 3 by 3 matrix of random numbers",
    "code": "numpy.random.random((3, 3))"
  },
  {
    "intent": "make new column 'C' in panda dataframe by adding values from other columns 'A' and 'B'",
    "code": "df['C'] = df['A'] + df['B']"
  },
  {
    "intent": "create a list of values from the dictionary `programs` that have a key with a case insensitive match to 'new york'",
    "code": "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"
  },
  {
    "intent": "append a path `/path/to/main_folder` in system path",
    "code": "sys.path.append('/path/to/main_folder')"
  },
  {
    "intent": "get all digits in a string `s` after a '[' character",
    "code": "re.findall('\\\\d+(?=[^[]+$)', s)"
  },
  {
    "intent": "python pickle/unpickle a list to/from a file 'afile'",
    "code": "pickle.load(open('afile', 'rb'))"
  },
  {
    "intent": "Clicking a link using selenium using python",
    "code": "driver.find_element_by_xpath('xpath').click()"
  },
  {
    "intent": "count unique index values in column 'A' in pandas dataframe `ex`",
    "code": "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"
  },
  {
    "intent": "Create a pandas dataframe of values from a dictionary `d` which contains dictionaries of dictionaries",
    "code": "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"
  },
  {
    "intent": "find out the number of non-matched elements at the same index of list `a` and list `b`",
    "code": "sum(1 for i, j in zip(a, b) if i != j)"
  },
  {
    "intent": "make all keys lowercase in dictionary `d`",
    "code": "d = {(a.lower(), b): v for (a, b), v in list(d.items())}"
  },
  {
    "intent": "sort list `list_` based on first element of each tuple and by the length of the second element of each tuple",
    "code": "list_.sort(key=lambda x: [x[0], len(x[1]), x[1]])"
  },
  {
    "intent": "trim whitespace in string `s`",
    "code": "s.strip()"
  },
  {
    "intent": "trim whitespace (including tabs) in `s` on the left side",
    "code": "s = s.lstrip()"
  },
  {
    "intent": "trim whitespace (including tabs) in `s` on the right side",
    "code": "s = s.rstrip()"
  },
  {
    "intent": "trim characters ' \\t\\n\\r' in `s`",
    "code": "s = s.strip(' \\t\\n\\r')"
  },
  {
    "intent": "trim whitespaces (including tabs) in string `s`",
    "code": "print(re.sub('[\\\\s+]', '', s))"
  },
  {
    "intent": "In Django, filter `Task.objects` based on all entities in ['A', 'P', 'F']",
    "code": "Task.objects.exclude(prerequisites__status__in=['A', 'P', 'F'])"
  },
  {
    "intent": "Change background color in Tkinter",
    "code": "root.configure(background='black')"
  },
  {
    "intent": "convert dict `result` to numpy structured array",
    "code": "numpy.array([(key, val) for key, val in result.items()], dtype)"
  },
  {
    "intent": "Concatenate dataframe `df_1` to dataframe `df_2` sorted by values of the column 'y'",
    "code": "pd.concat([df_1, df_2.sort_values('y')])"
  },
  {
    "intent": "replace the last occurence of an expression '</div>' with '</bad>' in a string `s`",
    "code": "re.sub('(.*)</div>', '\\\\1</bad>', s)"
  },
  {
    "intent": "get the maximum of 'salary' and 'bonus' values in a dictionary",
    "code": "print(max(d, key=lambda x: (d[x]['salary'], d[x]['bonus'])))"
  },
  {
    "intent": "Filter Django objects by `author` with ids `1` and `2`",
    "code": "Book.objects.filter(author__id=1).filter(author__id=2)"
  },
  {
    "intent": "split string 'fooxyzbar' based on case-insensitive matching using string 'XYZ'",
    "code": "re.compile('XYZ', re.IGNORECASE).split('fooxyzbar')"
  },
  {
    "intent": "get list of sums of neighboring integers in string `example`",
    "code": "[sum(map(int, s)) for s in example.split()]"
  },
  {
    "intent": "Get all the keys from dictionary `y` whose value is `1`",
    "code": "[i for i in y if y[i] == 1]"
  },
  {
    "intent": "converting byte string `c` in unicode string",
    "code": "c.decode('unicode_escape')"
  },
  {
    "intent": "unpivot first 2 columns into new columns 'year' and 'value' from a pandas dataframe `x`",
    "code": "pd.melt(x, id_vars=['farm', 'fruit'], var_name='year', value_name='value')"
  },
  {
    "intent": "add key \"item3\" and value \"3\" to dictionary `default_data `",
    "code": "default_data['item3'] = 3"
  },
  {
    "intent": "add key \"item3\" and value \"3\" to dictionary `default_data `",
    "code": "default_data.update({'item3': 3, })"
  },
  {
    "intent": "add key value pairs 'item4' , 4 and 'item5' , 5 to dictionary `default_data`",
    "code": "default_data.update({'item4': 4, 'item5': 5, })"
  },
  {
    "intent": "Get the first and last 3 elements of list `l`",
    "code": "l[:3] + l[-3:]"
  },
  {
    "intent": "reset index to default in dataframe `df`",
    "code": "df = df.reset_index(drop=True)"
  },
  {
    "intent": "For each index `x` from 0 to 3, append the element at index `x` of list `b` to the list at index `x` of list a.",
    "code": "[a[x].append(b[x]) for x in range(3)]"
  },
  {
    "intent": "get canonical path of the filename `path`",
    "code": "os.path.realpath(path)"
  },
  {
    "intent": "check if dictionary `L[0].f.items()` is in dictionary `a3.f.items()`",
    "code": "set(L[0].f.items()).issubset(set(a3.f.items()))"
  },
  {
    "intent": "find all the indexes in a Numpy 2D array where the value is 1",
    "code": "zip(*np.where(a == 1))"
  },
  {
    "intent": "How to find the index of a value in 2d array in Python?",
    "code": "np.where(a == 1)"
  },
  {
    "intent": "Collapse hierarchical column index to level 0 in dataframe `df`",
    "code": "df.columns = df.columns.get_level_values(0)"
  },
  {
    "intent": "create a matrix from a list `[1, 2, 3]`",
    "code": "x = scipy.matrix([1, 2, 3]).transpose()"
  },
  {
    "intent": "add character '@' after word 'get' in string `text`",
    "code": "text = re.sub('(\\\\bget\\\\b)', '\\\\1@', text)"
  },
  {
    "intent": "get a numpy array that contains the element wise minimum of three 3x1 arrays",
    "code": "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"
  },
  {
    "intent": "add a column 'new_col' to dataframe `df` for index in range",
    "code": "df['new_col'] = list(range(1, len(df) + 1))"
  },
  {
    "intent": "set environment variable 'DEBUSSY' equal to 1",
    "code": "os.environ['DEBUSSY'] = '1'"
  },
  {
    "intent": "Get a environment variable `DEBUSSY`",
    "code": "print(os.environ['DEBUSSY'])"
  },
  {
    "intent": "set environment variable 'DEBUSSY' to '1'",
    "code": "os.environ['DEBUSSY'] = '1'"
  },
  {
    "intent": "update dictionary `b`, overwriting values where keys are identical, with contents of dictionary `d`",
    "code": "b.update(d)"
  },
  {
    "intent": "get all the values in column `b` from pandas data frame `df`",
    "code": "df['b']"
  },
  {
    "intent": "make a line plot with errorbars, `ebar`, from data `x, y, err` and set color of the errorbars to `y` (yellow)",
    "code": "ebar = plt.errorbar(x, y, yerr=err, ecolor='y')"
  },
  {
    "intent": "find all files with extension '.c' in directory `folder`",
    "code": "results += [each for each in os.listdir(folder) if each.endswith('.c')]"
  },
  {
    "intent": "add unicode string '1' to UTF-8 decoded string '\\xc2\\xa3'",
    "code": "print('\\xc2\\xa3'.decode('utf8') + '1')"
  },
  {
    "intent": "lower-case the string obtained by replacing the occurrences of regex pattern '(?<=[a-z])([A-Z])' in string `s` with eplacement '-\\\\1'",
    "code": "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"
  },
  {
    "intent": "Setting stacksize in a python script",
    "code": "os.system('ulimit -s unlimited; some_executable')"
  },
  {
    "intent": "format a string `num` using string formatting",
    "code": "\"\"\"{0:.3g}\"\"\".format(num)"
  },
  {
    "intent": "append the first element of array `a` to array `a`",
    "code": "numpy.append(a, a[0])"
  },
  {
    "intent": "return the column for value 38.15 in dataframe `df`",
    "code": "df.ix[:, (df.loc[0] == 38.15)].columns"
  },
  {
    "intent": "merge 2 dataframes `df1` and `df2` with same values in a column 'revenue' with and index 'date'",
    "code": "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"
  },
  {
    "intent": "load a json data `json_string` into variable `json_data`",
    "code": "json_data = json.loads(json_string)"
  },
  {
    "intent": "convert radians 1 to degrees",
    "code": "math.cos(math.radians(1))"
  },
  {
    "intent": "count the number of integers in list `a`",
    "code": "sum(isinstance(x, int) for x in a)"
  },
  {
    "intent": "replacing  '\\u200b' with '*' in a string  using regular expressions",
    "code": "'used\\u200b'.replace('\\u200b', '*')"
  },
  {
    "intent": "run function 'SudsMove' simultaneously",
    "code": "threading.Thread(target=SudsMove).start()"
  },
  {
    "intent": "sum of squares values in a list `l`",
    "code": "sum(i * i for i in l)"
  },
  {
    "intent": "calculate the sum of the squares of each value in list `l`",
    "code": "sum(map(lambda x: x * x, l))"
  },
  {
    "intent": "Create a dictionary `d` from list `iterable`",
    "code": "d = dict(((key, value) for (key, value) in iterable))"
  },
  {
    "intent": "Create a dictionary `d` from list `iterable`",
    "code": "d = {key: value for (key, value) in iterable}"
  },
  {
    "intent": "Create a dictionary `d` from list of key value pairs `iterable`",
    "code": "d = {k: v for (k, v) in iterable}"
  },
  {
    "intent": "round off entries in dataframe `df` column `Alabama_exp` to two decimal places, and entries in column `Credit_exp` to three decimal places",
    "code": "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"
  },
  {
    "intent": "Make function `WRITEFUNCTION` output nothing in curl `p`",
    "code": "p.setopt(pycurl.WRITEFUNCTION, lambda x: None)"
  },
  {
    "intent": "return a random word from a word list 'words'",
    "code": "print(random.choice(words))"
  },
  {
    "intent": "Find a max value of the key `count` in a nested dictionary `d`",
    "code": "max(d, key=lambda x: d[x]['count'])"
  },
  {
    "intent": "get list of string elements in string `data` delimited by commas, putting `0` in place of empty strings",
    "code": "[(int(x) if x else 0) for x in data.split(',')]"
  },
  {
    "intent": "split string `s` into a list of strings based on ',' then replace empty strings with zero",
    "code": "\"\"\",\"\"\".join(x or '0' for x in s.split(','))"
  },
  {
    "intent": "regular expression match nothing",
    "code": "re.compile('$^')"
  },
  {
    "intent": "regular expression syntax for not to match anything",
    "code": "re.compile('.\\\\A|.\\\\A*|.\\\\A+')"
  },
  {
    "intent": "create a regular expression object with a pattern that will match nothing",
    "code": "re.compile('a^')"
  },
  {
    "intent": "drop all columns in dataframe `df` that holds a maximum value bigger than 0",
    "code": "df.columns[df.max() > 0]"
  },
  {
    "intent": "check if date `yourdatetime` is equal to today's date",
    "code": "yourdatetime.date() == datetime.today().date()"
  },
  {
    "intent": "print bold text 'Hello'",
    "code": "print('\\x1b[1m' + 'Hello')"
  },
  {
    "intent": "remove 20 symbols in front of '.' in string 'unique12345678901234567890.mkv'",
    "code": "re.sub('.{20}(.mkv)', '\\\\1', 'unique12345678901234567890.mkv')"
  },
  {
    "intent": "Define a list with string values `['a', 'c', 'b', 'obj']`",
    "code": "['a', 'c', 'b', 'obj']"
  },
  {
    "intent": "substitute multiple whitespace with single whitespace in string `mystring`",
    "code": "\"\"\" \"\"\".join(mystring.split())"
  },
  {
    "intent": "print a floating point number 2.345e-67 without any truncation",
    "code": "print('{:.100f}'.format(2.345e-67))"
  },
  {
    "intent": "Check if key 'key1' in `dict`",
    "code": "('key1' in dict)"
  },
  {
    "intent": "Check if key 'a' in `d`",
    "code": "('a' in d)"
  },
  {
    "intent": "Check if key 'c' in `d`",
    "code": "('c' in d)"
  },
  {
    "intent": "Check if a given key 'key1' exists in dictionary `dict`",
    "code": "if ('key1' in dict):\n    pass"
  },
  {
    "intent": "Check if a given key `key` exists in dictionary `d`",
    "code": "if (key in d):\n    pass"
  },
  {
    "intent": "create a django query for a list of values `1, 4, 7`",
    "code": "Blog.objects.filter(pk__in=[1, 4, 7])"
  },
  {
    "intent": "read a binary file 'test/test.pdf'",
    "code": "f = open('test/test.pdf', 'rb')"
  },
  {
    "intent": "insert ' ' between every three digit before '.' and replace ',' with '.' in 12345678.46",
    "code": "format(12345678.46, ',').replace(',', ' ').replace('.', ',')"
  },
  {
    "intent": "Join pandas data frame `frame_1` and `frame_2` with left join by `county_ID` and right join by `countyid`",
    "code": "pd.merge(frame_1, frame_2, left_on='county_ID', right_on='countyid')"
  },
  {
    "intent": "calculate ratio of sparsity in a numpy array `a`",
    "code": "np.isnan(a).sum() / np.prod(a.shape)"
  },
  {
    "intent": "reverse sort items in default dictionary `cityPopulation` by the third item in each key's list of values",
    "code": "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"
  },
  {
    "intent": "Sort dictionary `u` in ascending order based on second elements of its values",
    "code": "sorted(list(u.items()), key=lambda v: v[1])"
  },
  {
    "intent": "reverse sort dictionary `d` based on its values",
    "code": "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"
  },
  {
    "intent": "sorting a defaultdict `d` by value",
    "code": "sorted(list(d.items()), key=lambda k_v: k_v[1])"
  },
  {
    "intent": "open a file 'bundled-resource.jpg' in the same directory as a python script",
    "code": "f = open(os.path.join(__location__, 'bundled-resource.jpg'))"
  },
  {
    "intent": "open the file 'words.txt' in 'rU' mode",
    "code": "f = open('words.txt', 'rU')"
  },
  {
    "intent": "divide the values with same keys of two dictionary `d1` and `d2`",
    "code": "{k: (float(d2[k]) / d1[k]) for k in d2}"
  },
  {
    "intent": "divide the value for each key `k` in dict `d2` by the value for the same key `k` in dict `d1`",
    "code": "{k: (d2[k] / d1[k]) for k in list(d1.keys()) & d2}"
  },
  {
    "intent": "divide values associated with each key in dictionary `d1` from values associated with the same key in dictionary `d2`",
    "code": "dict((k, float(d2[k]) / d1[k]) for k in d2)"
  },
  {
    "intent": "write dataframe `df` to csv file `filename` with dates formatted as yearmonthday  `%Y%m%d`",
    "code": "df.to_csv(filename, date_format='%Y%m%d')"
  },
  {
    "intent": "remove a key 'key' from a dictionary `my_dict`",
    "code": "my_dict.pop('key', None)"
  },
  {
    "intent": "replace NaN values in array `a` with zeros",
    "code": "b = np.where(np.isnan(a), 0, a)"
  },
  {
    "intent": "subprocess run command 'start command -flags arguments' through the shell",
    "code": "subprocess.call('start command -flags arguments', shell=True)"
  },
  {
    "intent": "run command 'command -flags arguments &' on command line tools as separate processes",
    "code": "subprocess.call('command -flags arguments &', shell=True)"
  },
  {
    "intent": "replace percent-encoded code in request `f` to their single-character equivalent",
    "code": "f = urllib.request.urlopen(url, urllib.parse.unquote(urllib.parse.urlencode(params)))"
  },
  {
    "intent": "remove white spaces from the end of string \"    xyz     \"",
    "code": "\"\"\"    xyz     \"\"\".rstrip()"
  },
  {
    "intent": "Replace special characters in utf-8 encoded string `s` using the %xx escape",
    "code": "urllib.parse.quote(s.encode('utf-8'))"
  },
  {
    "intent": "URL encoding in python",
    "code": "urllib.parse.quote_plus('a b')"
  },
  {
    "intent": "Create an array containing the conversion of string '100110' into separate elements",
    "code": "np.array(map(int, '100110'))"
  },
  {
    "intent": "convert a string 'mystr' to numpy array of integer values",
    "code": "print(np.array(list(mystr), dtype=int))"
  },
  {
    "intent": "convert an rgb image 'messi5.jpg' into grayscale `img`",
    "code": "img = cv2.imread('messi5.jpg', 0)"
  },
  {
    "intent": "sort list `lst` in descending order based on the second item of each tuple in it",
    "code": "lst.sort(key=lambda x: x[2], reverse=True)"
  },
  {
    "intent": "How to find all occurrences of an element in a list?",
    "code": "indices = [i for i, x in enumerate(my_list) if x == 'whatever']"
  },
  {
    "intent": "execute shell command 'grep -r PASSED *.log | sort -u | wc -l' with a | pipe in it",
    "code": "subprocess.call('grep -r PASSED *.log | sort -u | wc -l', shell=True)"
  },
  {
    "intent": "count the number of trailing question marks in string `my_text`",
    "code": "len(my_text) - len(my_text.rstrip('?'))"
  },
  {
    "intent": "remove dollar sign '$' from second to last column data in dataframe 'df' and convert the data into floats",
    "code": "df[df.columns[1:]].replace('[\\\\$,]', '', regex=True).astype(float)"
  },
  {
    "intent": "Merge column  'word' in dataframe `df2` with column 'word' on dataframe `df1`",
    "code": "df1.merge(df2, how='left', on='word')"
  },
  {
    "intent": "switch positions of each two adjacent characters in string `a`",
    "code": "print(''.join(''.join(i) for i in zip(a2, a1)) + a[-1] if len(a) % 2 else '')"
  },
  {
    "intent": "make a window `root` jump to the front",
    "code": "root.attributes('-topmost', True)"
  },
  {
    "intent": "make a window `root` jump to the front",
    "code": "root.lift()"
  },
  {
    "intent": "Convert list of booleans `walls` into a hex string",
    "code": "hex(int(''.join([str(int(b)) for b in walls]), 2))"
  },
  {
    "intent": "convert the sum of list `walls` into a hex presentation",
    "code": "hex(sum(b << i for i, b in enumerate(reversed(walls))))"
  },
  {
    "intent": "print the string `Total score for`, the value of the variable `name`, the string `is` and the value of the variable `score` in one print call.",
    "code": "print(('Total score for', name, 'is', score))"
  },
  {
    "intent": "print multiple arguments 'name' and 'score'.",
    "code": "print('Total score for {} is {}'.format(name, score))"
  },
  {
    "intent": "print a string using multiple strings `name` and `score`",
    "code": "print('Total score for %s is %s  ' % (name, score))"
  },
  {
    "intent": "print string including multiple variables `name` and `score`",
    "code": "print(('Total score for', name, 'is', score))"
  },
  {
    "intent": "serve a static html page 'your_template.html' at the root of a django project",
    "code": "url('^$', TemplateView.as_view(template_name='your_template.html'))"
  },
  {
    "intent": "use a list of values `[3,6]` to select rows from a pandas dataframe `df`'s column 'A'",
    "code": "df[df['A'].isin([3, 6])]"
  },
  {
    "intent": "How to get the concrete class name as a string?",
    "code": "instance.__class__.__name__"
  },
  {
    "intent": "execute python code `myscript.py` in a virtualenv `/path/to/my/venv` from matlab",
    "code": "system('/path/to/my/venv/bin/python myscript.py')"
  },
  {
    "intent": "django return a QuerySet list containing the values of field 'eng_name' in model `Employees`",
    "code": "Employees.objects.values_list('eng_name', flat=True)"
  },
  {
    "intent": "find all digits in string '6,7)' and put them to a list",
    "code": "re.findall('\\\\d|\\\\d,\\\\d\\\\)', '6,7)')"
  },
  {
    "intent": "prompt string 'Press Enter to continue...' to the console",
    "code": "input('Press Enter to continue...')"
  },
  {
    "intent": "print string \"ABC\" as hex literal",
    "code": "\"\"\"\u0001ABC\"\"\".encode('hex')"
  },
  {
    "intent": "insert a new field 'geolocCountry' on an existing document  'b' using pymongo",
    "code": "db.Doc.update({'_id': b['_id']}, {'$set': {'geolocCountry': myGeolocCountry}})"
  },
  {
    "intent": "Write a regex statement to match 'lol' to 'lolllll'.",
    "code": "re.sub('l+', 'l', 'lollll')"
  },
  {
    "intent": "BeautifulSoup find all 'tr' elements in HTML string `soup` at the five stride starting from the fourth element",
    "code": "rows = soup.findAll('tr')[4::5]"
  },
  {
    "intent": "reverse all x-axis points in pyplot",
    "code": "plt.gca().invert_xaxis()"
  },
  {
    "intent": "reverse y-axis in pyplot",
    "code": "plt.gca().invert_yaxis()"
  },
  {
    "intent": "stack two dataframes next to each other in pandas",
    "code": "pd.concat([GOOG, AAPL], keys=['GOOG', 'AAPL'], axis=1)"
  },
  {
    "intent": "create a json response `response_data`",
    "code": "return HttpResponse(json.dumps(response_data), content_type='application/json')"
  },
  {
    "intent": "decode escape sequences in string `myString`",
    "code": "myString.decode('string_escape')"
  },
  {
    "intent": "calculate the md5 checksum of a file named  'filename.exe'",
    "code": "hashlib.md5(open('filename.exe', 'rb').read()).hexdigest()"
  },
  {
    "intent": "Find all keys from a dictionary `d` whose values are `desired_value`",
    "code": "[k for k, v in d.items() if v == desired_value]"
  },
  {
    "intent": "create a set containing all keys' names from dictionary `LoD`",
    "code": "{k for d in LoD for k in list(d.keys())}"
  },
  {
    "intent": "create a set containing all keys names from list of dictionaries `LoD`",
    "code": "set([i for s in [list(d.keys()) for d in LoD] for i in s])"
  },
  {
    "intent": "extract all keys from a list of dictionaries `LoD`",
    "code": "[i for s in [list(d.keys()) for d in LoD] for i in s]"
  },
  {
    "intent": "unpack keys and values of a dictionary `d` into two lists",
    "code": "keys, values = zip(*list(d.items()))"
  },
  {
    "intent": "convert a string `s` containing a decimal to an integer",
    "code": "int(Decimal(s))"
  },
  {
    "intent": "Convert a string to integer with decimal in Python",
    "code": "int(s.split('.')[0])"
  },
  {
    "intent": "check if array `b` contains all elements of array `a`",
    "code": "numpy.in1d(b, a).all()"
  },
  {
    "intent": "numpy:  check if array 'a' contains all the numbers in array 'b'.",
    "code": "numpy.array([(x in a) for x in b])"
  },
  {
    "intent": "Draw node labels `labels` on networkx graph `G ` at position `pos`",
    "code": "networkx.draw_networkx_labels(G, pos, labels)"
  },
  {
    "intent": "make a row-by-row copy `y` of array `x`",
    "code": "y = [row[:] for row in x]"
  },
  {
    "intent": "Create 2D numpy array from the data provided in 'somefile.csv' with each row in the file having same number of values",
    "code": "X = numpy.loadtxt('somefile.csv', delimiter=',')"
  },
  {
    "intent": "get a list of items from the list `some_list` that contain string 'abc'",
    "code": "matching = [s for s in some_list if 'abc' in s]"
  },
  {
    "intent": "export a pandas data frame `df` to a file `mydf.tsv` and retain the indices",
    "code": "df.to_csv('mydf.tsv', sep='\\t')"
  },
  {
    "intent": "How do I create a LIST of unique random numbers?",
    "code": "random.sample(list(range(100)), 10)"
  },
  {
    "intent": "split a string `s` on last delimiter",
    "code": "s.rsplit(',', 1)"
  },
  {
    "intent": "Check if all elements in list `lst` are tupples of long and int",
    "code": "all(isinstance(x, int) for x in lst)"
  },
  {
    "intent": "check if all elements in a list 'lst' are the same type 'int'",
    "code": "all(isinstance(x, int) for x in lst)"
  },
  {
    "intent": "strip a string `line` of all carriage returns and newlines",
    "code": "line.strip()"
  },
  {
    "intent": "scroll to the bottom of a web page using selenium webdriver",
    "code": "driver.execute_script('window.scrollTo(0, Y)')"
  },
  {
    "intent": "scroll a to the bottom of a web page using selenium webdriver",
    "code": "driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')"
  },
  {
    "intent": "convert Date object `dateobject` into a DateTime object",
    "code": "datetime.datetime.combine(dateobject, datetime.time())"
  },
  {
    "intent": "check if any item from list `b` is in list `a`",
    "code": "print(any(x in a for x in b))"
  },
  {
    "intent": "save a numpy array `image_array` as an image 'outfile.jpg'",
    "code": "scipy.misc.imsave('outfile.jpg', image_array)"
  },
  {
    "intent": "Remove anything in parenthesis from string `item` with a regex",
    "code": "item = re.sub(' ?\\\\([^)]+\\\\)', '', item)"
  },
  {
    "intent": "Remove word characters in parenthesis from string `item` with a regex",
    "code": "item = re.sub(' ?\\\\(\\\\w+\\\\)', '', item)"
  },
  {
    "intent": "Remove all data inside parenthesis in string `item`",
    "code": "item = re.sub(' \\\\(\\\\w+\\\\)', '', item)"
  },
  {
    "intent": "check if any elements in one list `list1` are in another list `list2`",
    "code": "len(set(list1).intersection(list2)) > 0"
  },
  {
    "intent": "convert hex string `s` to decimal",
    "code": "i = int(s, 16)"
  },
  {
    "intent": "convert hex string \"0xff\" to decimal",
    "code": "int('0xff', 16)"
  },
  {
    "intent": "convert hex string \"FFFF\" to decimal",
    "code": "int('FFFF', 16)"
  },
  {
    "intent": "convert hex string '0xdeadbeef' to decimal",
    "code": "ast.literal_eval('0xdeadbeef')"
  },
  {
    "intent": "convert hex string 'deadbeef' to decimal",
    "code": "int('deadbeef', 16)"
  },
  {
    "intent": "take screenshot 'screen.png' on mac os x",
    "code": "os.system('screencapture screen.png')"
  },
  {
    "intent": "Set a window size to `1400, 1000` using selenium webdriver",
    "code": "driver.set_window_size(1400, 1000)"
  },
  {
    "intent": "replace non-ascii chars from a unicode string u'm\\xfasica'",
    "code": "unicodedata.normalize('NFKD', 'm\\xfasica').encode('ascii', 'ignore')"
  },
  {
    "intent": "concatenate dataframe `df1` with `df2` whilst removing duplicates",
    "code": "pandas.concat([df1, df2]).drop_duplicates().reset_index(drop=True)"
  },
  {
    "intent": "Construct an array with data type float32 `a` from data in binary file 'filename'",
    "code": "a = numpy.fromfile('filename', dtype=numpy.float32)"
  },
  {
    "intent": "execute a mv command `mv /home/somedir/subdir/* somedir/` in subprocess",
    "code": "subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)"
  },
  {
    "intent": "How to use the mv command in Python with subprocess",
    "code": "subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)"
  },
  {
    "intent": "print a character that has unicode value `\\u25b2`",
    "code": "print('\\u25b2'.encode('utf-8'))"
  },
  {
    "intent": "compare contents  at filehandles `file1` and `file2` using difflib",
    "code": "difflib.SequenceMatcher(None, file1.read(), file2.read())"
  },
  {
    "intent": "Create a dictionary from string `e` separated by `-` and `,`",
    "code": "dict((k, int(v)) for k, v in (e.split(' - ') for e in s.split(',')))"
  },
  {
    "intent": "check if all elements in a tuple `(1, 6)` are in another `(1, 2, 3, 4, 5)`",
    "code": "all(i in (1, 2, 3, 4, 5) for i in (1, 6))"
  },
  {
    "intent": "extract unique dates from time series 'Date' in dataframe `df`",
    "code": "df['Date'].map(lambda t: t.date()).unique()"
  },
  {
    "intent": "right align string `mystring` with a width of 7",
    "code": "\"\"\"{:>7s}\"\"\".format(mystring)"
  },
  {
    "intent": "read an excel file 'ComponentReport-DJI.xls'",
    "code": "open('ComponentReport-DJI.xls', 'rb').read(200)"
  },
  {
    "intent": "sort dataframe `df` based on column 'b' in ascending and column 'c' in descending",
    "code": "df.sort_values(['b', 'c'], ascending=[True, False], inplace=True)"
  },
  {
    "intent": "sort dataframe `df` based on column 'a' in ascending and column 'b' in descending",
    "code": "df.sort_values(['a', 'b'], ascending=[True, False])"
  },
  {
    "intent": "sort a pandas data frame with column `a` in ascending and `b` in descending order",
    "code": "df1.sort(['a', 'b'], ascending=[True, False], inplace=True)"
  },
  {
    "intent": "sort a pandas data frame by column `a` in ascending, and by column `b` in descending order",
    "code": "df.sort(['a', 'b'], ascending=[True, False])"
  },
  {
    "intent": "django redirect to view 'Home.views.index'",
    "code": "redirect('Home.views.index')"
  },
  {
    "intent": "remove all values within one list `[2, 3, 7]` from another list `a`",
    "code": "[x for x in a if x not in [2, 3, 7]]"
  },
  {
    "intent": "remove the punctuation '!', '.', ':' from a string `asking`",
    "code": "out = ''.join(c for c in asking if c not in ('!', '.', ':'))"
  },
  {
    "intent": "BeautifulSoup get value associated with attribute 'content' where attribute 'name' is equal to 'City' in tag 'meta' in HTML parsed string `soup`",
    "code": "soup.find('meta', {'name': 'City'})['content']"
  },
  {
    "intent": "unquote a urlencoded unicode string '%0a'",
    "code": "urllib.parse.unquote('%0a')"
  },
  {
    "intent": "decode url `url` from UTF-16 code to UTF-8 code",
    "code": "urllib.parse.unquote(url).decode('utf8')"
  },
  {
    "intent": "empty a list `lst`",
    "code": "del lst[:]"
  },
  {
    "intent": "empty a list `lst`",
    "code": "del lst1[:]"
  },
  {
    "intent": "empty a list `lst`",
    "code": "lst[:] = []"
  },
  {
    "intent": "empty a list `alist`",
    "code": "alist[:] = []"
  },
  {
    "intent": "reset index of series `s`",
    "code": "s.reset_index(0).reset_index(drop=True)"
  },
  {
    "intent": "convert unicode text from list `elems` with index 0 to normal text 'utf-8'",
    "code": "elems[0].getText().encode('utf-8')"
  },
  {
    "intent": "create a list containing the subtraction of each item in list `L` from the item prior to it",
    "code": "[(y - x) for x, y in zip(L, L[1:])]"
  },
  {
    "intent": "get value in string `line` matched by regex pattern '\\\\bLOG_ADDR\\\\s+(\\\\S+)'",
    "code": "print(re.search('\\\\bLOG_ADDR\\\\s+(\\\\S+)', line).group(1))"
  },
  {
    "intent": "import all classes from module `some.package`",
    "code": "globals().update(importlib.import_module('some.package').__dict__)"
  },
  {
    "intent": "convert a list of characters `['a', 'b', 'c', 'd']` into a string",
    "code": "\"\"\"\"\"\".join(['a', 'b', 'c', 'd'])"
  },
  {
    "intent": "Slice `url` with '&' as delimiter  to get  \"http://www.domainname.com/page?CONTENT_ITEM_ID=1234\" from url \"http://www.domainname.com/page?CONTENT_ITEM_ID=1234&param2&param3\r\n\"",
    "code": "url.split('&')"
  },
  {
    "intent": "sort dictionary `d` by key",
    "code": "od = collections.OrderedDict(sorted(d.items()))"
  },
  {
    "intent": "sort a dictionary `d` by key",
    "code": "OrderedDict(sorted(list(d.items()), key=(lambda t: t[0])))"
  },
  {
    "intent": "Execute a put request to the url `url`",
    "code": "response = requests.put(url, data=json.dumps(data), headers=headers)"
  },
  {
    "intent": "replace everything that is not an alphabet or a digit with '' in 's'.",
    "code": "re.sub('[\\\\W_]+', '', s)"
  },
  {
    "intent": "create a list of aggregation of each element from list `l2` to all elements of list `l1`",
    "code": "[(x + y) for x in l2 for y in l1]"
  },
  {
    "intent": "convert string `x'  to dictionary splitted by `=` using list comprehension",
    "code": "dict([x.split('=') for x in s.split()])"
  },
  {
    "intent": "remove index 2 element from a list `my_list`",
    "code": "my_list.pop(2)"
  },
  {
    "intent": "Delete character \"M\" from a string `s` using python",
    "code": "s = s.replace('M', '')"
  },
  {
    "intent": "How to delete a character from a string using python?",
    "code": "newstr = oldstr.replace('M', '')"
  },
  {
    "intent": "get the sum of the products of each pair of corresponding elements in lists `a` and `b`",
    "code": "sum(x * y for x, y in zip(a, b))"
  },
  {
    "intent": "sum the products of each two elements at the same index of list `a` and list `b`",
    "code": "list(x * y for x, y in list(zip(a, b)))"
  },
  {
    "intent": "sum the product of each two items at the same index of list `a` and list `b`",
    "code": "sum(i * j for i, j in zip(a, b))"
  },
  {
    "intent": "sum the product of elements of two lists named `a` and `b`",
    "code": "sum(x * y for x, y in list(zip(a, b)))"
  },
  {
    "intent": "write the content of file `xxx.mp4` to file `f`",
    "code": "f.write(open('xxx.mp4', 'rb').read())"
  },
  {
    "intent": "Add 1 to each integer value in list `my_list`",
    "code": "new_list = [(x + 1) for x in my_list]"
  },
  {
    "intent": "get a list of all items in list `j` with values greater than `5`",
    "code": "[x for x in j if x >= 5]"
  },
  {
    "intent": "set color marker styles `--bo` in matplotlib",
    "code": "plt.plot(list(range(10)), '--bo')"
  },
  {
    "intent": "set circle markers on plot for individual points  defined in list   `[1,2,3,4,5,6,7,8,9,10]` created by range(10)",
    "code": "plt.plot(list(range(10)), linestyle='--', marker='o', color='b')"
  },
  {
    "intent": "split strings in list `l` on the first occurring tab `\\t` and enter only the first resulting substring in a new list",
    "code": "[i.split('\\t', 1)[0] for i in l]"
  },
  {
    "intent": "Split each string in list `myList` on the tab character",
    "code": "myList = [i.split('\\t')[0] for i in myList]"
  },
  {
    "intent": "Sum numbers in a list 'your_list'",
    "code": "sum(your_list)"
  },
  {
    "intent": "attach debugger pdb to class `ForkedPdb`",
    "code": "ForkedPdb().set_trace()"
  },
  {
    "intent": "Compose keys from dictionary `d1` with respective values in dictionary `d2`",
    "code": "result = {k: d2.get(v) for k, v in list(d1.items())}"
  },
  {
    "intent": "add one day and three hours to the present time from datetime.now()",
    "code": "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"
  },
  {
    "intent": "Convert binary string to list of integers using Python",
    "code": "[int(s[i:i + 3], 2) for i in range(0, len(s), 3)]"
  },
  {
    "intent": "switch keys and values in a dictionary `my_dict`",
    "code": "dict((v, k) for k, v in my_dict.items())"
  },
  {
    "intent": "sort a list `L` by number after second '.'",
    "code": "print(sorted(L, key=lambda x: int(x.split('.')[2])))"
  },
  {
    "intent": "Check if the value of the key \"name\" is \"Test\" in a list of dictionaries `label`",
    "code": "any(d['name'] == 'Test' for d in label)"
  },
  {
    "intent": "remove all instances of [1, 1] from list `a`",
    "code": "a[:] = [x for x in a if x != [1, 1]]"
  },
  {
    "intent": "remove all instances of `[1, 1]` from a list `a`",
    "code": "[x for x in a if x != [1, 1]]"
  },
  {
    "intent": "convert a list 'a' to a dictionary where each even element represents the key to the dictionary, and the following odd element is the value",
    "code": "b = {a[i]: a[i + 1] for i in range(0, len(a), 2)}"
  },
  {
    "intent": "check whether elements in list `a` appear only once",
    "code": "len(set(a)) == len(a)"
  },
  {
    "intent": "Generate MD5 checksum of file in the path `full_path` in hashlib",
    "code": "print(hashlib.md5(open(full_path, 'rb').read()).hexdigest())"
  },
  {
    "intent": "How to sort a dictionary in python by value when the value is a list and I want to sort it by the first index of that list",
    "code": "sorted(list(data.items()), key=lambda x: x[1][0])"
  },
  {
    "intent": "randomly switch letters' cases in string `s`",
    "code": "\"\"\"\"\"\".join(x.upper() if random.randint(0, 1) else x for x in s)"
  },
  {
    "intent": "force bash interpreter '/bin/bash' to be used instead of shell",
    "code": "os.system('GREPDB=\"echo 123\"; /bin/bash -c \"$GREPDB\"')"
  },
  {
    "intent": "Run a command `echo hello world` in bash instead of shell",
    "code": "os.system('/bin/bash -c \"echo hello world\"')"
  },
  {
    "intent": "access the class variable `a_string` from a class object `test`",
    "code": "getattr(test, a_string)"
  },
  {
    "intent": "Display a image file `pathToFile`",
    "code": "Image.open('pathToFile').show()"
  },
  {
    "intent": "replace single quote character in string \"didn't\" with empty string ''",
    "code": "\"\"\"didn't\"\"\".replace(\"'\", '')"
  },
  {
    "intent": "sort list `files` based on variable `file_number`",
    "code": "files.sort(key=file_number)"
  },
  {
    "intent": "remove all whitespace in a string `sentence`",
    "code": "sentence.replace(' ', '')"
  },
  {
    "intent": "remove all whitespace in a string `sentence`",
    "code": "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"
  },
  {
    "intent": "remove whitespace in string `sentence` from beginning and end",
    "code": "sentence.strip()"
  },
  {
    "intent": "remove all whitespaces in string `sentence`",
    "code": "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"
  },
  {
    "intent": "remove all whitespaces in a string `sentence`",
    "code": "sentence = ''.join(sentence.split())"
  },
  {
    "intent": "sum all the values in a counter variable `my_counter`",
    "code": "sum(my_counter.values())"
  },
  {
    "intent": "find the euclidean distance between two 3-d arrays `A` and `B`",
    "code": "np.sqrt(((A - B) ** 2).sum(-1))"
  },
  {
    "intent": "create list `levels` containing 3 empty dictionaries",
    "code": "levels = [{}, {}, {}]"
  },
  {
    "intent": "find the sums of length 7 subsets of a list `daily`",
    "code": "weekly = [sum(visitors[x:x + 7]) for x in range(0, len(daily), 7)]"
  },
  {
    "intent": "Delete an element `key` from a dictionary `d`",
    "code": "del d[key]"
  },
  {
    "intent": "Delete an element 0 from a dictionary `a`",
    "code": "{i: a[i] for i in a if (i != 0)}"
  },
  {
    "intent": "Delete an element \"hello\" from a dictionary `lol`",
    "code": "lol.pop('hello')"
  },
  {
    "intent": "Delete an element with key `key` dictionary `r`",
    "code": "del r[key]"
  },
  {
    "intent": "solve for the least squares' solution of matrices `a` and `b`",
    "code": "np.linalg.solve(np.dot(a.T, a), np.dot(a.T, b))"
  },
  {
    "intent": "split dictionary/list inside a pandas column 'b' into separate columns in dataframe `df`",
    "code": "pd.concat([df.drop('b', axis=1), pd.DataFrame(df['b'].tolist())], axis=1)"
  },
  {
    "intent": "loop through 0 to 10 with step 2",
    "code": "for i in range(0, 10, 2):\n    pass"
  },
  {
    "intent": "loop through `mylist` with step 2",
    "code": "for i in mylist[::2]:\n    pass"
  },
  {
    "intent": "lowercase string values with key 'content' in a list of dictionaries `messages`",
    "code": "[{'content': x['content'].lower()} for x in messages]"
  },
  {
    "intent": "convert a list `my_list` into string with values separated by spaces",
    "code": "\"\"\" \"\"\".join(my_list)"
  },
  {
    "intent": "replace each occurrence of the pattern '(http://\\\\S+|\\\\S*[^\\\\w\\\\s]\\\\S*)' within `a` with ''",
    "code": "re.sub('(http://\\\\S+|\\\\S*[^\\\\w\\\\s]\\\\S*)', '', a)"
  },
  {
    "intent": "check if string `str` is palindrome",
    "code": "str(n) == str(n)[::-1]"
  },
  {
    "intent": "upload binary file `myfile.txt` with ftplib",
    "code": "ftp.storbinary('STOR myfile.txt', open('myfile.txt', 'rb'))"
  },
  {
    "intent": "remove all characters from string `stri` upto character 'I'",
    "code": "re.sub('.*I', 'I', stri)"
  },
  {
    "intent": "parse a comma-separated string number '1,000,000' into int",
    "code": "int('1,000,000'.replace(',', ''))"
  },
  {
    "intent": "combine  dataframe `df1` and dataframe `df2` by index number",
    "code": "pd.merge(df1, df2, left_index=True, right_index=True, how='outer')"
  },
  {
    "intent": "Combine two Pandas dataframes with the same index",
    "code": "pandas.concat([df1, df2], axis=1)"
  },
  {
    "intent": "check if all boolean values in a python dictionary `dict` are true",
    "code": "all(dict.values())"
  },
  {
    "intent": "use regex pattern '^12(?=.{4}$)' to remove digit 12 if followed by 4 other digits in column `c_contofficeID` of dataframe `df`",
    "code": "df.c_contofficeID.str.replace('^12(?=.{4}$)', '')"
  },
  {
    "intent": "reverse a list `L`",
    "code": "L[::(-1)]"
  },
  {
    "intent": "reverse a list `array`",
    "code": "reversed(array)"
  },
  {
    "intent": "reverse a list `L`",
    "code": "L.reverse()"
  },
  {
    "intent": "reverse a list `array`",
    "code": "list(reversed(array))"
  },
  {
    "intent": "get first element of each tuple in list `A`",
    "code": "[tup[0] for tup in A]"
  },
  {
    "intent": "replace character 'a' with character 'e' and character 's' with character '3' in file `contents`",
    "code": "newcontents = contents.replace('a', 'e').replace('s', '3')"
  },
  {
    "intent": "serialise SqlAlchemy RowProxy object `row` to a json object",
    "code": "json.dumps([dict(list(row.items())) for row in rs])"
  },
  {
    "intent": "get file '~/foo.ini'",
    "code": "config_file = os.path.expanduser('~/foo.ini')"
  },
  {
    "intent": "get multiple parameters with same name from a url in pylons",
    "code": "request.params.getall('c')"
  },
  {
    "intent": "Convert array `x` into a correlation matrix",
    "code": "np.corrcoef(x)"
  },
  {
    "intent": "Find the greatest number in set `(1, 2, 3)`",
    "code": "print(max(1, 2, 3))"
  },
  {
    "intent": "Retrieve parameter 'var_name' from a GET request.",
    "code": "self.request.get('var_name')"
  },
  {
    "intent": "Add 100 to each element of column \"x\" in dataframe `a`",
    "code": "a['x'].apply(lambda x, y: x + y, args=(100,))"
  },
  {
    "intent": "Django get first 10 records of model `User` ordered by criteria 'age' of model 'pet'",
    "code": "User.objects.order_by('-pet__age')[:10]"
  },
  {
    "intent": "delay for \"5\" seconds",
    "code": "time.sleep(5)"
  },
  {
    "intent": "make a 60 seconds time delay",
    "code": "time.sleep(60)"
  },
  {
    "intent": "make a 0.1 seconds time delay",
    "code": "sleep(0.1)"
  },
  {
    "intent": "make a 60 seconds time delay",
    "code": "time.sleep(60)"
  },
  {
    "intent": "make a 0.1 seconds time delay",
    "code": "time.sleep(0.1)"
  },
  {
    "intent": "From a list of strings `my_list`, remove the values that contains numbers.",
    "code": "[x for x in my_list if not any(c.isdigit() for c in x)]"
  },
  {
    "intent": "get the middle two characters of a string 'state' in a pandas dataframe `df`",
    "code": "df['state'].apply(lambda x: x[len(x) / 2 - 1:len(x) / 2 + 1])"
  },
  {
    "intent": "draw a grid line on every tick of plot `plt`",
    "code": "plt.grid(True)"
  },
  {
    "intent": "sort list `lst` based on each element's number of occurrences",
    "code": "sorted(lst, key=lambda x: (-1 * c[x], lst.index(x)))"
  },
  {
    "intent": "Get the value with the maximum length in each column in array `foo`",
    "code": "[max(len(str(x)) for x in line) for line in zip(*foo)]"
  },
  {
    "intent": "get the count of each unique value in column `Country` of dataframe `df` and store in column `Sum of Accidents`",
    "code": "df.Country.value_counts().reset_index(name='Sum of Accidents')"
  },
  {
    "intent": "calculat the difference between each row and the row previous to it in dataframe `data`",
    "code": "data.set_index('Date').diff()"
  },
  {
    "intent": "append values `[3, 4]` to a set `a`",
    "code": "a.update([3, 4])"
  },
  {
    "intent": "set every two-stride far element to -1 starting from second element in array `a`",
    "code": "a[1::2] = -1"
  },
  {
    "intent": "Get rank of rows from highest to lowest of dataframe `df`, grouped by value in column `group`, according to value in column `value`",
    "code": "df.groupby('group')['value'].rank(ascending=False)"
  },
  {
    "intent": "convert js date object 'Tue, 22 Nov 2011 06:00:00 GMT' to python datetime",
    "code": "datetime.strptime('Tue, 22 Nov 2011 06:00:00 GMT', '%a, %d %b %Y %H:%M:%S %Z')"
  },
  {
    "intent": "Convert a binary value '1633837924' to string",
    "code": "struct.pack('<I', 1633837924)"
  },
  {
    "intent": "append string `foo` to list `list`",
    "code": "list.append('foo')"
  },
  {
    "intent": "insert string `foo` at position `0` of list `list`",
    "code": "list.insert(0, 'foo')"
  },
  {
    "intent": "convert keys in dictionary `thedict` into case insensitive",
    "code": "theset = set(k.lower() for k in thedict)"
  },
  {
    "intent": "pad 'dog' up to a length of 5 characters with 'x'",
    "code": "\"\"\"{s:{c}^{n}}\"\"\".format(s='dog', n=5, c='x')"
  },
  {
    "intent": "check if type of variable `s` is a string",
    "code": "isinstance(s, str)"
  },
  {
    "intent": "check if type of a variable `s` is string",
    "code": "isinstance(s, str)"
  },
  {
    "intent": "Convert list of dictionaries `L` into a flat dictionary",
    "code": "dict(pair for d in L for pair in list(d.items()))"
  },
  {
    "intent": "merge a list of dictionaries in list `L` into a single dict",
    "code": "{k: v for d in L for k, v in list(d.items())}"
  },
  {
    "intent": "sort a pandas data frame according to column `Peak` in ascending and `Weeks` in descending order",
    "code": "df.sort_values(['Peak', 'Weeks'], ascending=[True, False], inplace=True)"
  },
  {
    "intent": "sort a pandas data frame by column `Peak` in ascending and `Weeks` in descending order",
    "code": "df.sort(['Peak', 'Weeks'], ascending=[True, False], inplace=True)"
  },
  {
    "intent": "run the code contained in string \"print('Hello')\"",
    "code": "eval(\"print('Hello')\")"
  },
  {
    "intent": "creating a list of dictionaries [{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]",
    "code": "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]"
  },
  {
    "intent": "Creating a list of dictionaries in python",
    "code": "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]"
  },
  {
    "intent": "get all possible combination of items from 2-dimensional list `a`",
    "code": "list(itertools.product(*a))"
  },
  {
    "intent": "Get sum of values of columns  'Y1961', 'Y1962', 'Y1963' after group by on columns \"Country\" and \"Item_code\" in dataframe `df`.",
    "code": "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"
  },
  {
    "intent": "create list `done` containing permutations of each element in list `[a, b, c, d]` with variable `x` as tuples",
    "code": "done = [(el, x) for el in [a, b, c, d]]"
  },
  {
    "intent": "remove Nan values from array `x`",
    "code": "x = x[numpy.logical_not(numpy.isnan(x))]"
  },
  {
    "intent": "remove first directory from path '/First/Second/Third/Fourth/Fifth'",
    "code": "os.path.join(*x.split(os.path.sep)[2:])"
  },
  {
    "intent": "Replace `;` with `:` in a string `line`",
    "code": "line = line.replace(';', ':')"
  },
  {
    "intent": "call bash command 'tar c my_dir | md5sum' with pipe",
    "code": "subprocess.call('tar c my_dir | md5sum', shell=True)"
  },
  {
    "intent": "Convert a hex string `437c2123 ` according to ascii value.",
    "code": "\"\"\"437c2123\"\"\".decode('hex')"
  },
  {
    "intent": "Get a list of all fields in class `User` that are marked `required`",
    "code": "[k for k, v in User._fields.items() if v.required]"
  },
  {
    "intent": "remove column by index `[:, 0:2]` in dataframe `df`",
    "code": "df = df.ix[:, 0:2]"
  },
  {
    "intent": "change a string of integers `x` separated by spaces to a list of int",
    "code": "x = map(int, x.split())"
  },
  {
    "intent": "convert a string of integers `x` separated by spaces to a list of integers",
    "code": "x = [int(i) for i in x.split()]"
  },
  {
    "intent": "find element by css selector \"input[onclick*='1 Bedroom Deluxe']\"",
    "code": "driver.find_element_by_css_selector(\"input[onclick*='1 Bedroom Deluxe']\")"
  },
  {
    "intent": "Python / Remove special character from string",
    "code": "re.sub('[^a-zA-Z0-9-_*.]', '', my_string)"
  },
  {
    "intent": "display a pdf  file that has been downloaded as `my_pdf.pdf`",
    "code": "webbrowser.open('file:///my_pdf.pdf')"
  },
  {
    "intent": "replace backslashes in string `result` with empty string ''",
    "code": "result = result.replace('\\\\', '')"
  },
  {
    "intent": "remove backslashes from string `result`",
    "code": "result.replace('\\\\', '')"
  },
  {
    "intent": "replace value '-' in any column of pandas dataframe to \"NaN\"",
    "code": "df.replace('-', 'NaN')"
  },
  {
    "intent": "convert datetime object to date object in python",
    "code": "datetime.datetime.now().date()"
  },
  {
    "intent": "How do I convert datetime to date (in Python)?",
    "code": "datetime.datetime.now().date()"
  },
  {
    "intent": "get all sub-elements of an element `a` in an elementtree",
    "code": "[elem.tag for elem in a.iter()]"
  },
  {
    "intent": "get all sub-elements of an element tree `a` excluding the root element",
    "code": "[elem.tag for elem in a.iter() if elem is not a]"
  },
  {
    "intent": "How can I split and parse a string in Python?",
    "code": "\"\"\"2.7.0_bf4fda703454\"\"\".split('_')"
  },
  {
    "intent": "move dictionaries in list `lst` to the end of the list if value of key 'language' in each dictionary is not equal to 'en'",
    "code": "sorted(lst, key=lambda x: x['language'] != 'en')"
  },
  {
    "intent": "check if all values of a dictionary `your_dict` are zero `0`",
    "code": "all(value == 0 for value in list(your_dict.values()))"
  },
  {
    "intent": "produce a pivot table as dataframe using column 'Y' in datafram `df` to form the axes of the resulting dataframe",
    "code": "df.pivot_table('Y', rows='X', cols='X2')"
  },
  {
    "intent": "call `doSomething()` in a try-except without handling the exception",
    "code": "try:\n    doSomething()\nexcept:\n    pass"
  },
  {
    "intent": "call `doSomething()` in a try-except without handling the exception",
    "code": "try:\n    doSomething()\nexcept Exception:\n    pass"
  },
  {
    "intent": "get a sum of 4d array `M`",
    "code": "M.sum(axis=0).sum(axis=0)"
  },
  {
    "intent": "Convert a datetime object `dt` to microtime",
    "code": "time.mktime(dt.timetuple()) + dt.microsecond / 1000000.0"
  },
  {
    "intent": "select all rows in dataframe `df` where the values of column 'columnX' is bigger than or equal to `x` and smaller than or equal to `y`",
    "code": "df[(x <= df['columnX']) & (df['columnX'] <= y)]"
  },
  {
    "intent": "sort a list of lists `L` by index 2 of the inner list",
    "code": "sorted(L, key=itemgetter(2))"
  },
  {
    "intent": "sort a list of lists `l` by index 2 of the inner list",
    "code": "l.sort(key=(lambda x: x[2]))"
  },
  {
    "intent": "sort list `l` by index 2 of the item",
    "code": "sorted(l, key=(lambda x: x[2]))"
  },
  {
    "intent": "sort a list of lists `list_to_sort` by indices 2,0,1 of the inner list",
    "code": "sorted_list = sorted(list_to_sort, key=itemgetter(2, 0, 1))"
  },
  {
    "intent": "find rows of 2d array in 3d numpy array 'arr' if the row has value '[[0, 3], [3, 0]]'",
    "code": "np.argwhere(np.all(arr == [[0, 3], [3, 0]], axis=(1, 2)))"
  },
  {
    "intent": "From multiIndexed dataframe `data` select columns `a` and `c` within each higher order column `one` and `two`",
    "code": "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"
  },
  {
    "intent": "select only specific columns 'a' and 'c' from a dataframe 'data' with multiindex columns",
    "code": "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"
  },
  {
    "intent": "match a sharp, followed by letters (including accent characters) in string `str1` using a regex",
    "code": "hashtags = re.findall('#(\\\\w+)', str1, re.UNICODE)"
  },
  {
    "intent": "Rename file from `src` to `dst`",
    "code": "os.rename(src, dst)"
  },
  {
    "intent": "Get all texts and tags from a tag `strong` from etree tag `some_tag` using lxml",
    "code": "print(etree.tostring(some_tag.find('strong')))"
  },
  {
    "intent": "Serialize dictionary `data` and its keys to a JSON formatted string",
    "code": "json.dumps({str(k): v for k, v in data.items()})"
  },
  {
    "intent": "parse UTF-8 encoded HTML response `response` to BeautifulSoup object",
    "code": "soup = BeautifulSoup(response.read().decode('utf-8'))"
  },
  {
    "intent": "delete file `filename`",
    "code": "os.remove(filename)"
  },
  {
    "intent": "get the next value greatest to `2` from a list of numbers `num_list`",
    "code": "min([x for x in num_list if x > 2])"
  },
  {
    "intent": "Replace each value in column 'prod_type' of dataframe `df` with string 'responsive'",
    "code": "df['prod_type'] = 'responsive'"
  },
  {
    "intent": "sort list `lst` with positives coming before negatives with values sorted respectively",
    "code": "sorted(lst, key=lambda x: (x < 0, x))"
  },
  {
    "intent": "get the date 6 months from today",
    "code": "six_months = (date.today() + relativedelta(months=(+ 6)))"
  },
  {
    "intent": "get the date 1 month from today",
    "code": "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"
  },
  {
    "intent": "get the date 2 months from today",
    "code": "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"
  },
  {
    "intent": "calculate the date six months from the current date",
    "code": "print((datetime.date.today() + datetime.timedelta(((6 * 365) / 12))).isoformat())"
  },
  {
    "intent": "get a list of keys of dictionary `things` sorted by the value of nested dictionary key 'weight'",
    "code": "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"
  },
  {
    "intent": "get all the values from a numpy array `a` excluding index 3",
    "code": "a[np.arange(len(a)) != 3]"
  },
  {
    "intent": "delete all elements from a list `x` if a function `fn` taking value as parameter returns `0`",
    "code": "[x for x in lst if fn(x) != 0]"
  },
  {
    "intent": "set dataframe `df` index using column 'month'",
    "code": "df.set_index('month')"
  },
  {
    "intent": "read lines from a csv file `./urls-eu.csv` into a list of lists `arr`",
    "code": "arr = [line.split(',') for line in open('./urls-eu.csv')]"
  },
  {
    "intent": "list comprehension that produces integers between 11 and 19",
    "code": "[i for i in range(100) if i > 10 if i < 20]"
  },
  {
    "intent": "Get only digits from a string `strs`",
    "code": "\"\"\"\"\"\".join([c for c in strs if c.isdigit()])"
  },
  {
    "intent": "split a string `yas` based on tab '\\t'",
    "code": "re.split('\\\\t+', yas.rstrip('\\t'))"
  },
  {
    "intent": "scalar multiply matrix `a` by `b`",
    "code": "(a.T * b).T"
  },
  {
    "intent": "remove trailing newline in string \"test string\\n\"",
    "code": "'test string\\n'.rstrip()"
  },
  {
    "intent": "remove trailing newline in string 'test string \\n\\n'",
    "code": "'test string \\n\\n'.rstrip('\\n')"
  },
  {
    "intent": "remove newline in string `s`",
    "code": "s.strip()"
  },
  {
    "intent": "remove newline in string `s` on the right side",
    "code": "s.rstrip()"
  },
  {
    "intent": "remove newline in string `s` on the left side",
    "code": "s.lstrip()"
  },
  {
    "intent": "remove newline in string 'Mac EOL\\r'",
    "code": "'Mac EOL\\r'.rstrip('\\r\\n')"
  },
  {
    "intent": "remove newline in string 'Windows EOL\\r\\n' on the right side",
    "code": "'Windows EOL\\r\\n'.rstrip('\\r\\n')"
  },
  {
    "intent": "remove newline in string 'Unix EOL\\n' on the right side",
    "code": "'Unix EOL\\n'.rstrip('\\r\\n')"
  },
  {
    "intent": "remove newline in string \"Hello\\n\\n\\n\" on the right side",
    "code": "'Hello\\n\\n\\n'.rstrip('\\n')"
  },
  {
    "intent": "split string `text` into chunks of 16 characters each",
    "code": "re.findall('.{,16}\\\\b', text)"
  },
  {
    "intent": "Get a list comprehension in list of lists `X`",
    "code": "[[X[i][j] for j in range(len(X[i]))] for i in range(len(X))]"
  },
  {
    "intent": "convert unicode string '\\xd0\\xbc\\xd0\\xb0\\xd1\\x80\\xd0\\xba\\xd0\\xb0' to byte string",
    "code": "'\\xd0\\xbc\\xd0\\xb0\\xd1\\x80\\xd0\\xba\\xd0\\xb0'.encode('latin-1')"
  },
  {
    "intent": "split dataframe `df` where the value of column `a` is equal to 'B'",
    "code": "df.groupby((df.a == 'B').shift(1).fillna(0).cumsum())"
  },
  {
    "intent": "save json output from a url \u2018http://search.twitter.com/search.json?q=hi\u2019 to file \u2018hi.json\u2019 in Python 2",
    "code": "urllib.request.urlretrieve('http://search.twitter.com/search.json?q=hi', 'hi.json')"
  },
  {
    "intent": "Find indices of elements equal to zero from numpy array `x`",
    "code": "numpy.where((x == 0))[0]"
  },
  {
    "intent": "flush output of python print",
    "code": "sys.stdout.flush()"
  },
  {
    "intent": "convert `i` to string",
    "code": "str(i)"
  },
  {
    "intent": "convert `a` to string",
    "code": "a.__str__()"
  },
  {
    "intent": "convert `a` to string",
    "code": "str(a)"
  },
  {
    "intent": "sort list of lists `L` by the second item in each list",
    "code": "L.sort(key=operator.itemgetter(1))"
  },
  {
    "intent": "Print variable `count` and variable `conv` with space string '    ' in between",
    "code": "print(str(count) + '    ' + str(conv))"
  },
  {
    "intent": "change NaN values in dataframe `df` using preceding values in the frame",
    "code": "df.fillna(method='ffill', inplace=True)"
  },
  {
    "intent": "change the state of the Tkinter `Text` widget to read only i.e. `disabled`",
    "code": "text.config(state=DISABLED)"
  },
  {
    "intent": "python sum of ascii values of all characters in a string `string`",
    "code": "sum(map(ord, string))"
  },
  {
    "intent": "apply itertools.product to elements of a list of lists `arrays`",
    "code": "list(itertools.product(*arrays))"
  },
  {
    "intent": "print number `value` as thousands separators",
    "code": "'{:,}'.format(value)"
  },
  {
    "intent": "print number 1255000 as thousands separators",
    "code": "locale.setlocale(locale.LC_ALL, 'en_US')\nlocale.format('%d', 1255000, grouping=True)"
  },
  {
    "intent": "get rows of dataframe `df` where column `Col1` has values `['men', 'rocks', 'mountains']`",
    "code": "df[df.Col1.isin(['men', 'rocks', 'mountains'])]"
  },
  {
    "intent": "get the value at index 1 for each tuple in the list of tuples `L`",
    "code": "[x[1] for x in L]"
  },
  {
    "intent": "split unicode string \"\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438\" into words",
    "code": "'\\u0440\\u0430\\u0437 \\u0434\\u0432\\u0430 \\u0442\\u0440\\u0438'.split()"
  },
  {
    "intent": "sort query set by number of characters in a field `length` in django model `MyModel`",
    "code": "MyModel.objects.extra(select={'length': 'Length(name)'}).order_by('length')"
  },
  {
    "intent": "get a dictionary in list `dicts` which key 'ratio' is closer to a global value 1.77672955975",
    "code": "min(dicts, key=lambda x: (abs(1.77672955975 - x['ratio']), -x['pixels']))"
  },
  {
    "intent": "get the non-masked values of array `m`",
    "code": "m[~m.mask]"
  },
  {
    "intent": "Find all words containing letters between A and Z in string `formula`",
    "code": "re.findall('\\\\b[A-Z]', formula)"
  },
  {
    "intent": "create a list `matrix` containing 5 lists, each of 5 items  all set to 0",
    "code": "matrix = [([0] * 5) for i in range(5)]"
  },
  {
    "intent": "creating a numpy array of 3d coordinates from three 1d arrays `x_p`, `y_p` and `z_p`",
    "code": "np.vstack(np.meshgrid(x_p, y_p, z_p)).reshape(3, -1).T"
  },
  {
    "intent": "find the minimum value in a numpy array `arr` excluding 0",
    "code": "arr[arr != 0].min()"
  },
  {
    "intent": "get the text of multiple elements found by xpath \"//*[@type='submit']/@value\"",
    "code": "browser.find_elements_by_xpath(\"//*[@type='submit']/@value\").text"
  },
  {
    "intent": "find all the values in attribute `value` for the tags whose `type` attribute is `submit` in selenium",
    "code": "browser.find_elements_by_xpath(\"//*[@type='submit']\").get_attribute('value')"
  },
  {
    "intent": "parse a YAML file \"example.yaml\"",
    "code": "with open('example.yaml', 'r') as stream:\n    try:\n        print((yaml.load(stream)))\n    except yaml.YAMLError as exc:\n        print(exc)"
  },
  {
    "intent": "parse a YAML file \"example.yaml\"",
    "code": "with open('example.yaml') as stream:\n    try:\n        print((yaml.load(stream)))\n    except yaml.YAMLError as exc:\n        print(exc)"
  },
  {
    "intent": "Sort the values of the dataframe `df` and align the columns accordingly based on the obtained indices after np.argsort.",
    "code": "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"
  },
  {
    "intent": "Getting today's date in YYYY-MM-DD",
    "code": "datetime.datetime.today().strftime('%Y-%m-%d')"
  },
  {
    "intent": "urlencode a querystring 'string_of_characters_like_these:$#@=?%^Q^$' in python 2",
    "code": "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"
  },
  {
    "intent": "sort a dictionary `d` by length of its values and print as string",
    "code": "print(' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True)))"
  },
  {
    "intent": "convert tuple elements in list `[(1,2),(3,4),(5,6),]` into lists",
    "code": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))"
  },
  {
    "intent": "convert list of tuples to multiple lists in Python",
    "code": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))"
  },
  {
    "intent": "convert list of tuples to multiple lists in Python",
    "code": "zip(*[(1, 2), (3, 4), (5, 6)])"
  },
  {
    "intent": "create a list of tuples which contains number 9 and the number before it, for each occurrence of 9 in the list 'myList'",
    "code": "[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]"
  },
  {
    "intent": "navigate to webpage given by url `http://www.python.org` using Selenium",
    "code": "driver.get('http://www.google.com.br')"
  },
  {
    "intent": "reverse a UTF-8 string 'a'",
    "code": "b = a.decode('utf8')[::-1].encode('utf8')"
  },
  {
    "intent": "extract date from a string 'monkey 2010-07-32 love banana'",
    "code": "dparser.parse('monkey 2010-07-32 love banana', fuzzy=True)"
  },
  {
    "intent": "extract date from a string 'monkey 20/01/1980 love banana'",
    "code": "dparser.parse('monkey 20/01/1980 love banana', fuzzy=True)"
  },
  {
    "intent": "extract date from a string `monkey 10/01/1980 love banana`",
    "code": "dparser.parse('monkey 10/01/1980 love banana', fuzzy=True)"
  },
  {
    "intent": "Convert a list `['A:1', 'B:2', 'C:3', 'D:4']` to dictionary",
    "code": "dict(map(lambda s: s.split(':'), ['A:1', 'B:2', 'C:3', 'D:4']))"
  },
  {
    "intent": "check if string `the_string` contains any upper or lower-case ASCII letters",
    "code": "re.search('[a-zA-Z]', the_string)"
  },
  {
    "intent": "convert a pandas `df1` groupby object to dataframe",
    "code": "DataFrame({'count': df1.groupby(['Name', 'City']).size()}).reset_index()"
  },
  {
    "intent": "remove all non-numeric characters from string `sdkjh987978asd098as0980a98sd `",
    "code": "re.sub('[^0-9]', '', 'sdkjh987978asd098as0980a98sd')"
  },
  {
    "intent": "get items from list `a` that don't appear in list `b`",
    "code": "[y for y in a if y not in b]"
  },
  {
    "intent": "extract the first four rows of the column `ID` from a pandas dataframe `df`",
    "code": "df.groupby('ID').head(4)"
  },
  {
    "intent": "Unzip a list of tuples `l` into a list of lists",
    "code": "zip(*l)"
  },
  {
    "intent": "combine two lists `[1, 2, 3, 4]` and `['a', 'b', 'c', 'd']` into a dictionary",
    "code": "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))"
  },
  {
    "intent": "combine two lists `[1, 2, 3, 4]` and `['a', 'b', 'c', 'd']` into a dictionary",
    "code": "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))"
  },
  {
    "intent": "retrieve the path from a Flask request",
    "code": "request.url"
  },
  {
    "intent": "replace carriage return in string `somestring` with empty string ''",
    "code": "somestring.replace('\\\\r', '')"
  },
  {
    "intent": "serialize dictionary `d` as a JSON formatted string with each key formatted to pattern '%d,%d'",
    "code": "simplejson.dumps(dict([('%d,%d' % k, v) for k, v in list(d.items())]))"
  },
  {
    "intent": "parse string \"Jun 1 2005  1:33PM\" into datetime by format \"%b %d %Y %I:%M%p\"",
    "code": "datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')"
  },
  {
    "intent": "parse string \"Aug 28 1999 12:00AM\" into datetime",
    "code": "parser.parse('Aug 28 1999 12:00AM')"
  },
  {
    "intent": "Get absolute folder path and filename for file `existGDBPath `",
    "code": "os.path.split(os.path.abspath(existGDBPath))"
  },
  {
    "intent": "extract folder path from file path",
    "code": "os.path.dirname(os.path.abspath(existGDBPath))"
  },
  {
    "intent": "Execute a post request to url `http://httpbin.org/post` with json data `{'test': 'cheers'}`",
    "code": "requests.post('http://httpbin.org/post', json={'test': 'cheers'})"
  },
  {
    "intent": "remove dictionary from list `a` if the value associated with its key 'link' is in list `b`",
    "code": "a = [x for x in a if x['link'] not in b]"
  },
  {
    "intent": "get a request parameter `a` in jinja2",
    "code": "{{request.args.get('a')}}"
  },
  {
    "intent": "create a list of integers between 2 values `11` and `17`",
    "code": "list(range(11, 17))"
  },
  {
    "intent": "Change data type of data in column 'grade' of dataframe `data_df` into float and then to int",
    "code": "data_df['grade'] = data_df['grade'].astype(float).astype(int)"
  },
  {
    "intent": "Find the list in a list of lists `alkaline_earth_values` with the max value of the second element.",
    "code": "max(alkaline_earth_values, key=lambda x: x[1])"
  },
  {
    "intent": "remove leading and trailing zeros in the string 'your_Strip'",
    "code": "your_string.strip('0')"
  },
  {
    "intent": "generate a list of all unique pairs of integers in `range(9)`",
    "code": "list(permutations(list(range(9)), 2))"
  },
  {
    "intent": "create a regular expression that matches the pattern '^(.+)(?:\\\\n|\\\\r\\\\n?)((?:(?:\\\\n|\\\\r\\\\n?).+)+)' over multiple lines of text",
    "code": "re.compile('^(.+)(?:\\\\n|\\\\r\\\\n?)((?:(?:\\\\n|\\\\r\\\\n?).+)+)', re.MULTILINE)"
  },
  {
    "intent": "regular expression \"^(.+)\\\\n((?:\\\\n.+)+)\" matching a multiline block of text",
    "code": "re.compile('^(.+)\\\\n((?:\\\\n.+)+)', re.MULTILINE)"
  },
  {
    "intent": "Run 'test2.py' file with python location 'path/to/python' and arguments 'neededArgumetGoHere' as a subprocess",
    "code": "call(['path/to/python', 'test2.py', 'neededArgumetGoHere'])"
  },
  {
    "intent": "sort a multidimensional list `a` by second and third column",
    "code": "a.sort(key=operator.itemgetter(2, 3))"
  },
  {
    "intent": "Add a tuple with value `another_choice` to a tuple `my_choices`",
    "code": "final_choices = ((another_choice,) + my_choices)"
  },
  {
    "intent": "Add a tuple with value `another_choice` to a tuple `my_choices`",
    "code": "final_choices = ((another_choice,) + my_choices)"
  },
  {
    "intent": "find the current directory",
    "code": "os.getcwd()"
  },
  {
    "intent": "find the current directory",
    "code": "os.path.realpath(__file__)"
  },
  {
    "intent": "get the directory name of `path`",
    "code": "os.path.dirname(path)"
  },
  {
    "intent": "get the canonical path of file `path`",
    "code": "os.path.realpath(path)"
  },
  {
    "intent": "Find name of current directory",
    "code": "dir_path = os.path.dirname(os.path.realpath(__file__))"
  },
  {
    "intent": "Find current directory",
    "code": "cwd = os.getcwd()"
  },
  {
    "intent": "Find the full path of current directory",
    "code": "full_path = os.path.realpath(__file__)"
  },
  {
    "intent": "sort array `arr` in ascending order by values of the 3rd column",
    "code": "arr[arr[:, (2)].argsort()]"
  },
  {
    "intent": "sort rows of numpy matrix `arr` in ascending order according to all column values",
    "code": "numpy.sort(arr, axis=0)"
  },
  {
    "intent": "split string 'a b.c' on space \" \" and dot character \".\"",
    "code": "re.split('[ .]', 'a b.c')"
  },
  {
    "intent": "copy the content of file 'file.txt' to file 'file2.txt'",
    "code": "shutil.copy('file.txt', 'file2.txt')"
  },
  {
    "intent": "generate random upper-case ascii string of 12 characters length",
    "code": "print(''.join(choice(ascii_uppercase) for i in range(12)))"
  },
  {
    "intent": "merge the elements in a list `lst` sequentially",
    "code": "[''.join(seq) for seq in zip(lst, lst[1:])]"
  },
  {
    "intent": "rename column 'gdp' in dataframe `data` to 'log(gdp)'",
    "code": "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"
  },
  {
    "intent": "convert a beautiful soup html `soup` to text",
    "code": "print(soup.get_text())"
  },
  {
    "intent": "Sort list `li` in descending order based on the second element of each list inside list`li`",
    "code": "sorted(li, key=operator.itemgetter(1), reverse=True)"
  },
  {
    "intent": "replace value 0 with 'Female' and value 1 with 'Male' in column 'sex' of dataframe `data`",
    "code": "data['sex'].replace([0, 1], ['Female', 'Male'], inplace=True)"
  },
  {
    "intent": "split string 'Words, words, words.' on punctuation",
    "code": "re.split('\\\\W+', 'Words, words, words.')"
  },
  {
    "intent": "Extract first two substrings in string `phrase` that end in `.`, `?` or `!`",
    "code": "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"
  },
  {
    "intent": "split string `s` into strings of repeating elements",
    "code": "print([a for a, b in re.findall('((\\\\w)\\\\2*)', s)])"
  },
  {
    "intent": "Create new string with unique characters from `s` seperated by ' '",
    "code": "print(' '.join(OrderedDict.fromkeys(s)))"
  },
  {
    "intent": "create a set from string `s` to remove duplicate characters",
    "code": "print(' '.join(set(s)))"
  },
  {
    "intent": "list folders in zip file 'file' that ends with '/'",
    "code": "[x for x in file.namelist() if x.endswith('/')]"
  },
  {
    "intent": "find the count of a word 'Hello' in a string `input_string`",
    "code": "input_string.count('Hello')"
  },
  {
    "intent": "reduce the first element of list of strings `data` to a string, separated by '.'",
    "code": "print('.'.join([item[0] for item in data]))"
  },
  {
    "intent": "Move the cursor of file pointer `fh1` at the end of the file.",
    "code": "fh1.seek(2)"
  },
  {
    "intent": "convert a flat list into a list of tuples of every two items in the list, in order",
    "code": "print(zip(my_list[0::2], my_list[1::2]))"
  },
  {
    "intent": "group a list of ints into a list of tuples of each 2 elements",
    "code": "my_new_list = zip(my_list[0::2], my_list[1::2])"
  },
  {
    "intent": "set the default encoding to 'utf-8'",
    "code": "sys.setdefaultencoding('utf8')"
  },
  {
    "intent": "Formate current date and time to a string using pattern '%Y-%m-%d %H:%M:%S'",
    "code": "datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')"
  },
  {
    "intent": "retrieve arabic texts from string `my_string`",
    "code": "print(re.findall('[\\\\u0600-\\\\u06FF]+', my_string))"
  },
  {
    "intent": "group dataframe `df` based on minute interval",
    "code": "df.groupby(df.index.map(lambda t: t.minute))"
  },
  {
    "intent": "access value associated with key 'American' of key 'Apple' from dictionary `dict`",
    "code": "dict['Apple']['American']"
  },
  {
    "intent": "remove all null values from columns 'three', 'four' and 'five' of dataframe `df2`",
    "code": "df2.dropna(subset=['three', 'four', 'five'], how='all')"
  },
  {
    "intent": "insert a list `k` at the front of list `a`",
    "code": "a.insert(0, k)"
  },
  {
    "intent": "insert elements of list `k` into list `a` at position `n`",
    "code": "a = a[:n] + k + a[n:]"
  },
  {
    "intent": "calculate the mean of the nonzero values' indices of dataframe `df`",
    "code": "np.flatnonzero(x).mean()"
  },
  {
    "intent": "get date from dataframe `df` column 'dates' to column 'just_date'",
    "code": "df['just_date'] = df['dates'].dt.date"
  },
  {
    "intent": "remove elements in list `b` from list `a`",
    "code": "[x for x in a if x not in b]"
  },
  {
    "intent": "join elements of each tuple in list `a` into one string",
    "code": "[''.join(x) for x in a]"
  },
  {
    "intent": "join items of each tuple in list of tuples `a` into a list of strings",
    "code": "list(map(''.join, a))"
  },
  {
    "intent": "match blank lines in `s` with regular expressions",
    "code": "re.split('\\n\\\\s*\\n', s)"
  },
  {
    "intent": "merge a list of integers `[1, 2, 3, 4, 5]` into a single integer",
    "code": "from functools import reduce\nreduce(lambda x, y: 10 * x + y, [1, 2, 3, 4, 5])"
  },
  {
    "intent": "Convert float 24322.34 to comma-separated string",
    "code": "\"\"\"{0:,.2f}\"\"\".format(24322.34)"
  },
  {
    "intent": "pass dictionary items `data` as keyword arguments in function `my_function`",
    "code": "my_function(**data)"
  },
  {
    "intent": "get line count of file 'myfile.txt'",
    "code": "sum((1 for line in open('myfile.txt')))"
  },
  {
    "intent": "get line count of file `filename`",
    "code": "def bufcount(filename):\n    f = open(filename)\n    lines = 0\n    buf_size = (1024 * 1024)\n    read_f = f.read\n    buf = read_f(buf_size)\n    while buf:\n        lines += buf.count('\\n')\n        buf = read_f(buf_size)\n    return lines"
  },
  {
    "intent": "round 1123.456789 to be an integer",
    "code": "print(round(1123.456789, -1))"
  },
  {
    "intent": "sort list `X` based on values from another list `Y`",
    "code": "[x for y, x in sorted(zip(Y, X))]"
  },
  {
    "intent": "sorting list 'X' based on values from another list 'Y'",
    "code": "[x for y, x in sorted(zip(Y, X))]"
  },
  {
    "intent": "get equivalent week number from a date `2010/6/16` using  isocalendar",
    "code": "datetime.date(2010, 6, 16).isocalendar()[1]"
  },
  {
    "intent": "select multiple ranges of columns 1-10, 15, 17, and 50-100 in pandas dataframe `df`",
    "code": "df.iloc[:, (np.r_[1:10, (15), (17), 50:100])]"
  },
  {
    "intent": "apply two different aggregating functions `mean` and `sum` to the same column `dummy` in pandas data frame `df`",
    "code": "df.groupby('dummy').agg({'returns': [np.mean, np.sum]})"
  },
  {
    "intent": "convert string `s` to lowercase",
    "code": "s.lower()"
  },
  {
    "intent": "convert utf-8 string `s` to lowercase",
    "code": "s.decode('utf-8').lower()"
  },
  {
    "intent": "How to download a file via FTP with Python ftplib",
    "code": "ftp.retrbinary('RETR %s' % filename, file.write)"
  },
  {
    "intent": "handle the `urlfetch_errors ` exception for imaplib request to url `url`",
    "code": "urlfetch.fetch(url, deadline=10 * 60)"
  },
  {
    "intent": "output first 100 characters in a string `my_string`",
    "code": "print(my_string[0:100])"
  },
  {
    "intent": "make matplotlib plot legend put marker in legend only once",
    "code": "legend(numpoints=1)"
  },
  {
    "intent": "get set intersection between dictionaries `d1` and `d2`",
    "code": "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"
  },
  {
    "intent": "convert csv file 'test.csv' into two-dimensional matrix",
    "code": "numpy.loadtxt(open('test.csv', 'rb'), delimiter=',', skiprows=1)"
  },
  {
    "intent": "filter the objects in django model 'Sample' between date range `2011-01-01` and `2011-01-31`",
    "code": "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"
  },
  {
    "intent": "filter objects month wise in django model `Sample` for year `2011`",
    "code": "Sample.objects.filter(date__year='2011', date__month='01')"
  },
  {
    "intent": "create a dictionary `{'spam': 5, 'ham': 6}` into another dictionary `d` field 'dict3'",
    "code": "d['dict3'] = {'spam': 5, 'ham': 6}"
  },
  {
    "intent": "apply `numpy.linalg.norm` to each row of a matrix `a`",
    "code": "numpy.apply_along_axis(numpy.linalg.norm, 1, a)"
  },
  {
    "intent": "merge dictionaries form array `dicts` in a single expression",
    "code": "dict((k, v) for d in dicts for k, v in list(d.items()))"
  },
  {
    "intent": "Convert escaped utf string to utf string in `your string`",
    "code": "print('your string'.decode('string_escape'))"
  },
  {
    "intent": "counting the number of true booleans in a python list `[True, True, False, False, False, True]`",
    "code": "sum([True, True, False, False, False, True])"
  },
  {
    "intent": "set the size of figure `fig` in inches to width height of `w`, `h`",
    "code": "fig.set_size_inches(w, h, forward=True)"
  },
  {
    "intent": "format string with dict `{'5': 'you'}` with integer keys",
    "code": "'hello there %(5)s' % {'5': 'you'}"
  },
  {
    "intent": "Convert a string of numbers `example_string` separated by `,` into a list of integers",
    "code": "map(int, example_string.split(','))"
  },
  {
    "intent": "Convert a string of numbers 'example_string' separated by comma into a list of numbers",
    "code": "[int(s) for s in example_string.split(',')]"
  },
  {
    "intent": "Flatten list `x`",
    "code": "x = [i[0] for i in x]"
  },
  {
    "intent": "convert list `x` into a flat list",
    "code": "y = map(operator.itemgetter(0), x)"
  },
  {
    "intent": "get a list `y` of the first element of every tuple in list `x`",
    "code": "y = [i[0] for i in x]"
  },
  {
    "intent": "extract all the values of a specific key named 'values' from a list of dictionaries",
    "code": "results = [item['value'] for item in test_data]"
  },
  {
    "intent": "get current datetime in ISO format",
    "code": "datetime.datetime.now().isoformat()"
  },
  {
    "intent": "get UTC datetime in ISO format",
    "code": "datetime.datetime.utcnow().isoformat()"
  },
  {
    "intent": "Merge all columns in dataframe `df` into one column",
    "code": "df.apply(' '.join, axis=0)"
  },
  {
    "intent": "pandas subtract a row from dataframe `df2` from dataframe `df`",
    "code": "pd.DataFrame(df.values - df2.values, columns=df.columns)"
  },
  {
    "intent": "read file 'myfile.txt' using universal newline mode 'U'",
    "code": "print(open('myfile.txt', 'U').read())"
  },
  {
    "intent": "print line `line` from text file with 'utf-16-le' format",
    "code": "print(line.decode('utf-16-le').split())"
  },
  {
    "intent": "open a text file `data.txt` in io module with encoding `utf-16-le`",
    "code": "file = io.open('data.txt', 'r', encoding='utf-16-le')"
  },
  {
    "intent": "Join data of dataframe `df1` with data in dataframe `df2` based on similar values of column 'user_id' in both dataframes",
    "code": "s1 = pd.merge(df1, df2, how='inner', on=['user_id'])"
  },
  {
    "intent": "check if string `foo` is UTF-8 encoded",
    "code": "foo.decode('utf8').encode('utf8')"
  },
  {
    "intent": "get the dimensions of numpy array `a`",
    "code": "a.shape"
  },
  {
    "intent": "get the dimensions of numpy array `a`",
    "code": "N.shape(a)"
  },
  {
    "intent": "get the dimensions of array `a`",
    "code": "N.shape(a)"
  },
  {
    "intent": "get the dimensions of numpy array `a`",
    "code": "a.shape"
  },
  {
    "intent": "get the indices of tuples in list of tuples `L` where the first value is 53",
    "code": "[i for i, v in enumerate(L) if v[0] == 53]"
  },
  {
    "intent": "convert string of bytes `y\\xcc\\xa6\\xbb` into an int",
    "code": "struct.unpack('<L', 'y\\xcc\\xa6\\xbb')[0]"
  },
  {
    "intent": "get the first row, second column; second row, first column, and first row third column values of numpy array `arr`",
    "code": "arr[[0, 1, 1], [1, 0, 2]]"
  },
  {
    "intent": "create a list with permutations of string 'abcd'",
    "code": "list(powerset('abcd'))"
  },
  {
    "intent": "Convert string to boolean from defined set of strings",
    "code": "s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']"
  },
  {
    "intent": "replace special characters in url 'http://spam.com/go/' using the '%xx' escape",
    "code": "urllib.parse.quote('http://spam.com/go/')"
  },
  {
    "intent": "Save plot `plt` as svg file 'test.svg'",
    "code": "plt.savefig('test.svg')"
  },
  {
    "intent": "count the number of elements in array `myArray`",
    "code": "len(myArray)"
  },
  {
    "intent": "insert directory './path/to/your/modules/' to current directory",
    "code": "sys.path.insert(0, './path/to/your/modules/')"
  },
  {
    "intent": "How to plot with x-axis at the top of the figure?",
    "code": "ax.xaxis.set_ticks_position('top')"
  },
  {
    "intent": "Insert records in bulk from \"table1\" of \"master\" DB to \"table1\" of  sqlite3 `cursor` object",
    "code": "cursor.execute('INSERT OR REPLACE INTO master.table1 SELECT * FROM table1')"
  },
  {
    "intent": "Match regex '[a-zA-Z][\\\\w-]*\\\\Z' on string 'A\\n'",
    "code": "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"
  },
  {
    "intent": "match regex '[a-zA-Z][\\\\w-]*$' on string '!A_B'",
    "code": "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"
  },
  {
    "intent": "Convert hex string \"deadbeef\" to integer",
    "code": "int('deadbeef', 16)"
  },
  {
    "intent": "Convert hex string \"a\" to integer",
    "code": "int('a', 16)"
  },
  {
    "intent": "Convert hex string \"0xa\" to integer",
    "code": "int('0xa', 16)"
  },
  {
    "intent": "Convert hex string `s` to integer",
    "code": "int(s, 16)"
  },
  {
    "intent": "Convert hex string `hexString` to int",
    "code": "int(hexString, 16)"
  },
  {
    "intent": "print variable `value ` without spaces",
    "code": "print('Value is \"' + str(value) + '\"')"
  },
  {
    "intent": "Print a string `value` with string formatting",
    "code": "print('Value is \"{}\"'.format(value))"
  },
  {
    "intent": "Jinja join elements of array `tags` with space string ' '",
    "code": "{{tags | join(' ')}}"
  },
  {
    "intent": "get a list of locally installed Python modules",
    "code": "help('modules')"
  },
  {
    "intent": "Get only first element in each of the innermost of the multidimensional list `listD`",
    "code": "[[[x[0]] for x in listD[i]] for i in range(len(listD))]"
  },
  {
    "intent": "Sort a string `s` in lexicographic order",
    "code": "sorted(s, key=str.upper)"
  },
  {
    "intent": "sort string `s` in lexicographic order",
    "code": "sorted(sorted(s), key=str.upper)"
  },
  {
    "intent": "get a sorted list of the characters of string `s` in lexicographic order, with lowercase letters first",
    "code": "sorted(s, key=str.lower)"
  },
  {
    "intent": "find all the rows in Dataframe 'df2' that are also present in Dataframe 'df1', for the columns 'A', 'B', 'C' and 'D'.",
    "code": "pd.merge(df1, df2, on=['A', 'B', 'C', 'D'], how='inner')"
  },
  {
    "intent": "Reverse key-value pairs in a dictionary `map`",
    "code": "dict((v, k) for k, v in map.items())"
  },
  {
    "intent": "decode unicode string `s` into a readable unicode literal",
    "code": "s.decode('unicode_escape')"
  },
  {
    "intent": "convert list of strings `str_list` into list of integers",
    "code": "[int(i) for i in str_list]"
  },
  {
    "intent": "convert a list with string `['1', '2', '3']` into list with integers",
    "code": "map(int, ['1', '2', '3'])"
  },
  {
    "intent": "convert list with str into list with int",
    "code": "list(map(int, ['1', '2', '3']))"
  },
  {
    "intent": "find all anchor tags in html `soup` whose url begins with `http://www.iwashere.com`",
    "code": "soup.find_all('a', href=re.compile('http://www\\\\.iwashere\\\\.com/'))"
  },
  {
    "intent": "find all anchors with a hyperlink that matches the pattern '^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'",
    "code": "soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))"
  },
  {
    "intent": "execute a jar file 'Blender.jar' using subprocess",
    "code": "subprocess.call(['java', '-jar', 'Blender.jar'])"
  },
  {
    "intent": "insert row into mysql database with column 'column1' set to the value `value`",
    "code": "cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', (value,))"
  },
  {
    "intent": "remove a substring \".com\" from the end of string `url`",
    "code": "if url.endswith('.com'):\n    url = url[:(-4)]"
  },
  {
    "intent": "remove a substring \".com\" from the end of string `url`",
    "code": "url = re.sub('\\\\.com$', '', url)"
  },
  {
    "intent": "remove a substring \".com\" from the end of string `url`",
    "code": "print(url.replace('.com', ''))"
  },
  {
    "intent": "remove a substring `suffix` from the end of string `text`",
    "code": "if (not text.endswith(suffix)):\n    return text\nreturn text[:(len(text) - len(suffix))]"
  },
  {
    "intent": "print each first value from a list of tuples `mytuple` with string formatting",
    "code": "print(', ,'.join([str(i[0]) for i in mytuple]))"
  },
  {
    "intent": "clamping floating number `my_value` to be between `min_value` and `max_value`",
    "code": "max(min(my_value, max_value), min_value)"
  },
  {
    "intent": "split a unicode string `text` into a list of words and punctuation characters with a regex",
    "code": "re.findall('\\\\w+|[^\\\\w\\\\s]', text, re.UNICODE)"
  },
  {
    "intent": "execute raw sql queue '<sql here>' in database `db` in sqlalchemy-flask app",
    "code": "result = db.engine.execute('<sql here>')"
  },
  {
    "intent": "quit program",
    "code": "sys.exit(0)"
  },
  {
    "intent": "get digits in string `my_string`",
    "code": "\"\"\"\"\"\".join(c for c in my_string if c.isdigit())"
  },
  {
    "intent": "split string `str1` on one or more spaces with a regular expression",
    "code": "re.split(' +', str1)"
  },
  {
    "intent": "python split string based on regular expression",
    "code": "re.findall('\\\\S+', str1)"
  },
  {
    "intent": "Evaluate a nested dictionary `myobject.id.number` to get `number` if `myobject` is present with getattr",
    "code": "getattr(getattr(myobject, 'id', None), 'number', None)"
  },
  {
    "intent": "convert generator object to a dictionary",
    "code": "{i: (i * 2) for i in range(10)}"
  },
  {
    "intent": "convert generator object to a dictionary",
    "code": "dict((i, i * 2) for i in range(10))"
  },
  {
    "intent": "Matplotlib clear the current axes.",
    "code": "plt.cla()"
  },
  {
    "intent": "split string `s` into float values and write sum to `total`",
    "code": "total = sum(float(item) for item in s.split(','))"
  },
  {
    "intent": "Convert ascii value 'P' to binary",
    "code": "bin(ord('P'))"
  },
  {
    "intent": "print a string after a specific substring ', ' in string `my_string `",
    "code": "print(my_string.split(', ', 1)[1])"
  },
  {
    "intent": "get value of key `post code` associated with first index of key `places` of dictionary `data`",
    "code": "print(data['places'][0]['post code'])"
  },
  {
    "intent": "remove colon character surrounded by vowels letters in string `word`",
    "code": "word = re.sub('([aeiou]):(([aeiou][^aeiou]*){3})$', '\\\\1\\\\2', word)"
  },
  {
    "intent": "extract data field 'bar' from json object",
    "code": "json.loads('{\"foo\": 42, \"bar\": \"baz\"}')['bar']"
  },
  {
    "intent": "Convert JSON array `array` to Python object",
    "code": "data = json.loads(array)"
  },
  {
    "intent": "Convert JSON array `array` to Python object",
    "code": "data = json.loads(array)"
  },
  {
    "intent": "pars a string 'http://example.org/#comments' to extract hashtags into an array",
    "code": "re.findall('#(\\\\w+)', 'http://example.org/#comments')"
  },
  {
    "intent": "do a boolean check if a string `lestring` contains any of the items in list `lelist`",
    "code": "any(e in lestring for e in lelist)"
  },
  {
    "intent": "How to plot two columns of a pandas data frame using points?",
    "code": "df.plot(x='col_name_1', y='col_name_2', style='o')"
  },
  {
    "intent": "Parsing HTML string `html` using BeautifulSoup",
    "code": "parsed_html = BeautifulSoup(html)\nprint(parsed_html.body.find('div', attrs={'class': 'container', }).text)"
  },
  {
    "intent": "Parsing webpage 'http://www.google.com/' using BeautifulSoup",
    "code": "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"
  },
  {
    "intent": "change figure size to 3 by 4 in matplotlib",
    "code": "plt.figure(figsize=(3, 4))"
  },
  {
    "intent": "Strip punctuation from string `s`",
    "code": "s.translate(None, string.punctuation)"
  },
  {
    "intent": "django urlsafe base64 decode string `uenc` with decryption",
    "code": "base64.urlsafe_b64decode(uenc.encode('ascii'))"
  },
  {
    "intent": "get the number of all keys in the nested dictionary `dict_list`",
    "code": "len(dict_test) + sum(len(v) for v in dict_test.values())"
  },
  {
    "intent": "return the conversion of decimal `d` to hex without the '0x' prefix",
    "code": "hex(d).split('x')[1]"
  },
  {
    "intent": "create a list containing digits of number 123 as its elements",
    "code": "list(str(123))"
  },
  {
    "intent": "converting integer `num` to list",
    "code": "[int(x) for x in str(num)]"
  },
  {
    "intent": "select a first form with no name in mechanize",
    "code": "br.select_form(nr=0)"
  },
  {
    "intent": "Open file 'sample.json' in read mode with encoding of 'utf-8-sig'",
    "code": "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"
  },
  {
    "intent": "load json file 'sample.json' with utf-8 bom header",
    "code": "json.loads(open('sample.json').read().decode('utf-8-sig'))"
  },
  {
    "intent": "setup a smtp mail server to `smtp.gmail.com` with port `587`",
    "code": "server = smtplib.SMTP('smtp.gmail.com', 587)"
  },
  {
    "intent": "revers correlating bits of integer `n`",
    "code": "int('{:08b}'.format(n)[::-1], 2)"
  },
  {
    "intent": "add column `d` to index of dataframe `df`",
    "code": "df.set_index(['d'], append=True)"
  },
  {
    "intent": "Iterating over a dictionary `d` using for loops",
    "code": "for (key, value) in d.items():\n    pass"
  },
  {
    "intent": "Iterating over a dictionary `d` using for loops",
    "code": "for (key, value) in list(d.items()):\n    pass"
  },
  {
    "intent": "Iterating key and items over dictionary `d`",
    "code": "for (letter, number) in list(d.items()):\n    pass"
  },
  {
    "intent": "Iterating key and items over dictionary `d`",
    "code": "for (k, v) in list(d.items()):\n    pass"
  },
  {
    "intent": "get keys and items of dictionary `d`",
    "code": "list(d.items())"
  },
  {
    "intent": "get keys and items of dictionary `d` as a list",
    "code": "list(d.items())"
  },
  {
    "intent": "Iterating key and items over dictionary `d`",
    "code": "for (k, v) in list(d.items()):\n    pass"
  },
  {
    "intent": "Iterating key and items over dictionary `d`",
    "code": "for (letter, number) in list(d.items()):\n    pass"
  },
  {
    "intent": "Iterating key and items over dictionary `d`",
    "code": "for (letter, number) in list(d.items()):\n    pass"
  },
  {
    "intent": "query all data from table `Task` where the value of column `time_spent` is bigger than 3 hours",
    "code": "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"
  },
  {
    "intent": "compile Visual Studio project `project.sln` from the command line through python",
    "code": "os.system('msbuild project.sln /p:Configuration=Debug')"
  },
  {
    "intent": "get max key in dictionary `MyCount`",
    "code": "max(list(MyCount.keys()), key=int)"
  },
  {
    "intent": "execute command 'source .bashrc; shopt -s expand_aliases; nuke -x scriptPath' from python script",
    "code": "os.system('source .bashrc; shopt -s expand_aliases; nuke -x scriptPath')"
  },
  {
    "intent": "get a name of function `my_function` as a string",
    "code": "my_function.__name__"
  },
  {
    "intent": "How to get a function name as a string in Python?",
    "code": "my_function.__name__"
  },
  {
    "intent": "check if all values in the columns of a numpy matrix `a` are same",
    "code": "np.all(a == a[(0), :], axis=0)"
  },
  {
    "intent": "sort list `a` in ascending order based on the addition of the second and third elements of each tuple in it",
    "code": "sorted(a, key=lambda x: (sum(x[1:3]), x[0]))"
  },
  {
    "intent": "sort a list of tuples `a` by the sum of second and third element of each tuple",
    "code": "sorted(a, key=lambda x: (sum(x[1:3]), x[0]), reverse=True)"
  },
  {
    "intent": "sorting a list of tuples `lst` by the sum of the second elements onwards, and third element of the tuple",
    "code": "sorted(lst, key=lambda x: (sum(x[1:]), x[0]))"
  },
  {
    "intent": "sort the list of tuples `lst` by the sum of every value except the first and by the first value in reverse order",
    "code": "sorted(lst, key=lambda x: (sum(x[1:]), x[0]), reverse=True)"
  },
  {
    "intent": "add header 'WWWAuthenticate' in a flask app with value 'Basic realm=\"test\"'",
    "code": "response.headers['WWW-Authenticate'] = 'Basic realm=\"test\"'"
  },
  {
    "intent": "clear session key 'mykey'",
    "code": "del request.session['mykey']"
  },
  {
    "intent": "convert date string '24052010' to date object in format '%d%m%Y'",
    "code": "datetime.datetime.strptime('24052010', '%d%m%Y').date()"
  },
  {
    "intent": "Replace non-ASCII characters in string `text` with a single space",
    "code": "re.sub('[^\\\\x00-\\\\x7F]+', ' ', text)"
  },
  {
    "intent": "List of lists into numpy array",
    "code": "numpy.array([[1, 2], [3, 4]])"
  },
  {
    "intent": "Get a list `myList` from 1 to 10",
    "code": "myList = [i for i in range(10)]"
  },
  {
    "intent": "use regex pattern '((.+?)\\\\2+)' to split string '44442(2)2(2)44'",
    "code": "[m[0] for m in re.compile('((.+?)\\\\2+)').findall('44442(2)2(2)44')]"
  },
  {
    "intent": "use regular expression '((\\\\d)(?:[()]*\\\\2*[()]*)*)' to split string `s`",
    "code": "[i[0] for i in re.findall('((\\\\d)(?:[()]*\\\\2*[()]*)*)', s)]"
  },
  {
    "intent": "remove the space between subplots in matplotlib.pyplot",
    "code": "fig.subplots_adjust(wspace=0, hspace=0)"
  },
  {
    "intent": "Reverse list `x`",
    "code": "x[::-1]"
  },
  {
    "intent": "Python JSON encoding",
    "code": "json.dumps({'apple': 'cat', 'banana': 'dog', 'pear': 'fish'})"
  },
  {
    "intent": "write a list of strings `row` to csv object `csvwriter`",
    "code": "csvwriter.writerow(row)"
  },
  {
    "intent": "Jinja2 formate date `item.date` accorto pattern 'Y M d'",
    "code": "{{(item.date | date): 'Y M d'}}"
  },
  {
    "intent": "Split a string `text` with comma, question mark or exclamation by non-consuming regex using look-behind",
    "code": "re.split('(?<=[\\\\.\\\\?!]) ', text)"
  },
  {
    "intent": "create a regular expression object with the pattern '\\xe2\\x80\\x93'",
    "code": "re.compile('\\xe2\\x80\\x93')"
  },
  {
    "intent": "declare an array `variable`",
    "code": "variable = []"
  },
  {
    "intent": "declare an array with element 'i'",
    "code": "intarray = array('i')"
  },
  {
    "intent": "given list `to_reverse`, reverse the all sublists and the list itself",
    "code": "[sublist[::-1] for sublist in to_reverse[::-1]]"
  },
  {
    "intent": "Replace all non-alphanumeric characters in a string",
    "code": "re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')"
  },
  {
    "intent": "unescape special characters without splitting data in array of strings `['I ', u'<', '3s U ', u'&', ' you luvz me']`",
    "code": "\"\"\"\"\"\".join(['I ', '<', '3s U ', '&', ' you luvz me'])"
  },
  {
    "intent": "disable logging while running unit tests in python django",
    "code": "logging.disable(logging.CRITICAL)"
  },
  {
    "intent": "adding url `url` to mysql row",
    "code": "cursor.execute('INSERT INTO index(url) VALUES(%s)', (url,))"
  },
  {
    "intent": "convert column of date objects 'DateObj' in pandas dataframe `df` to strings in new column 'DateStr'",
    "code": "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"
  },
  {
    "intent": "split string `s` by '@' and get the first element",
    "code": "s.split('@')[0]"
  },
  {
    "intent": "drop rows of dataframe `df` whose index is smaller than the value of `start_remove` or bigger than the value of`end_remove`",
    "code": "df.query('index < @start_remove or index > @end_remove')"
  },
  {
    "intent": "Drop the rows in pandas timeseries `df` from the row containing index `start_remove` to the row containing index `end_remove`",
    "code": "df.loc[(df.index < start_remove) | (df.index > end_remove)]"
  },
  {
    "intent": "Get the number of NaN values in each column of dataframe `df`",
    "code": "df.isnull().sum()"
  },
  {
    "intent": "reset index of dataframe `df`so that existing index values are transferred into `df`as columns",
    "code": "df.reset_index(inplace=True)"
  },
  {
    "intent": "generate a list containing values associated with the key 'value' of each dictionary inside list `list_of_dicts`",
    "code": "[x['value'] for x in list_of_dicts]"
  },
  {
    "intent": "python getting a list of value from list of dict",
    "code": "[d['value'] for d in l]"
  },
  {
    "intent": "python getting a list of value from list of dict",
    "code": "[d['value'] for d in l if 'value' in d]"
  },
  {
    "intent": "convert numpy array into python list structure",
    "code": "np.array([[1, 2, 3], [4, 5, 6]]).tolist()"
  },
  {
    "intent": "converting string '(1,2,3,4)' to a tuple",
    "code": "ast.literal_eval('(1,2,3,4)')"
  },
  {
    "intent": "keep a list `dataList` of lists sorted as it is created by second element",
    "code": "dataList.sort(key=lambda x: x[1])"
  },
  {
    "intent": "remove duplicated items from list of lists `testdata`",
    "code": "list(map(list, set(map(lambda i: tuple(i), testdata))))"
  },
  {
    "intent": "uniqueness for list of lists `testdata`",
    "code": "[list(i) for i in set(tuple(i) for i in testdata)]"
  },
  {
    "intent": "in django, check if a user is in a group 'Member'",
    "code": "return user.groups.filter(name='Member').exists()"
  },
  {
    "intent": "check if a user `user` is in a group from list of groups `['group1', 'group2']`",
    "code": "return user.groups.filter(name__in=['group1', 'group2']).exists()"
  },
  {
    "intent": "Change log level dynamically to 'DEBUG' without restarting the application",
    "code": "logging.getLogger().setLevel(logging.DEBUG)"
  },
  {
    "intent": "Concat each values in a tuple `(34.2424, -64.2344, 76.3534, 45.2344)` to get a string",
    "code": "\"\"\"\"\"\".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))"
  },
  {
    "intent": "swap each pair of characters in string `s`",
    "code": "\"\"\"\"\"\".join([s[x:x + 2][::-1] for x in range(0, len(s), 2)])"
  },
  {
    "intent": "save current figure to file 'graph.png' with resolution of 1000 dpi",
    "code": "plt.savefig('graph.png', dpi=1000)"
  },
  {
    "intent": "delete items from list `my_list` if the item exist in list `to_dell`",
    "code": "my_list = [[x for x in sublist if x not in to_del] for sublist in my_list]"
  },
  {
    "intent": "find all the elements that consists value '1' in a list of tuples 'a'",
    "code": "[item for item in a if 1 in item]"
  },
  {
    "intent": "find all elements in a list of tuples `a` where the first element of each tuple equals 1",
    "code": "[item for item in a if item[0] == 1]"
  },
  {
    "intent": "Get the index value in list `p_list` using enumerate in list comprehension",
    "code": "{p.id: {'id': p.id, 'position': ind} for ind, p in enumerate(p_list)}"
  },
  {
    "intent": "how to uniqify a list of dict in python",
    "code": "[dict(y) for y in set(tuple(x.items()) for x in d)]"
  },
  {
    "intent": "load a file `file.py` into the python console",
    "code": "exec(compile(open('file.py').read(), 'file.py', 'exec'))"
  },
  {
    "intent": "SQLAlchemy count the number of rows in table `Congress`",
    "code": "rows = session.query(Congress).count()"
  },
  {
    "intent": "Execute Shell Script from python with variable",
    "code": "subprocess.call(['test.sh', str(domid)])"
  },
  {
    "intent": "read excel file `file_name` using pandas",
    "code": "dfs = pd.read_excel(file_name, sheetname=None)"
  },
  {
    "intent": "unpack the binary data represented by the hexadecimal string '4081637ef7d0424a' to a float",
    "code": "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"
  },
  {
    "intent": "Get index of numpy array `a` with another numpy array `b`",
    "code": "a[tuple(b)]"
  },
  {
    "intent": "find all possible sequences of elements in a list `[2, 3, 4]`",
    "code": "map(list, permutations([2, 3, 4]))"
  },
  {
    "intent": "sort a list `unsorted_list` based on another sorted list `presorted_list`",
    "code": "sorted(unsorted_list, key=presorted_list.index)"
  },
  {
    "intent": "How to get yesterday in python",
    "code": "datetime.datetime.now() - datetime.timedelta(days=1)"
  },
  {
    "intent": "create a dataframe `d` filled with zeros with indices from 0 to length of `data` and column names from `feature_list`",
    "code": "d = pd.DataFrame(0, index=np.arange(len(data)), columns=feature_list)"
  },
  {
    "intent": "find the index of sub string 'World' in `x`",
    "code": "x.find('World')"
  },
  {
    "intent": "find the index of sub string 'Aloha' in `x`",
    "code": "x.find('Aloha')"
  },
  {
    "intent": "find the index of sub string 'cc' in string 'sdfasdf'",
    "code": "'sdfasdf'.index('cc')"
  },
  {
    "intent": "find the index of sub string 'df' in string 'sdfasdf'",
    "code": "'sdfasdf'.index('df')"
  },
  {
    "intent": "find the index of sub string 'a' in string `str`",
    "code": "str.find('a')"
  },
  {
    "intent": "find the index of sub string 'g' in string `str`",
    "code": "str.find('g')"
  },
  {
    "intent": "find the index of sub string 's' in string `str` starting from index 11",
    "code": "str.find('s', 11)"
  },
  {
    "intent": "find the index of sub string 's' in string `str` starting from index 15",
    "code": "str.find('s', 15)"
  },
  {
    "intent": "find the index of sub string 's' in string `str` starting from index 16",
    "code": "str.find('s', 16)"
  },
  {
    "intent": "find the index of sub string 's' in string `str` starting from index 11 and ending at index 14",
    "code": "str.find('s', 11, 14)"
  },
  {
    "intent": "sort list of date strings 'd'",
    "code": "sorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))"
  },
  {
    "intent": "Get all the sentences from a string `text` using regex",
    "code": "re.split('\\\\.\\\\s', text)"
  },
  {
    "intent": "Regular expression in Python sentence extractor",
    "code": "re.split('\\\\.\\\\s', re.sub('\\\\.\\\\s*$', '', text))"
  },
  {
    "intent": "get all characters in string 'foobar' up to the fourth index",
    "code": "\"\"\"foobar\"\"\"[:4]"
  },
  {
    "intent": "cut a string by delimiter '&'",
    "code": "s.rfind('&')"
  },
  {
    "intent": "cut a string using delimiter '&'",
    "code": "s[:s.rfind('&')]"
  },
  {
    "intent": "find a tag `option` whose `value` attribute is `state` in selenium",
    "code": "driver.find_element_by_xpath(\"//option[@value='\" + state + \"']\").click()"
  },
  {
    "intent": "append line \"appended text\" to file \"test.txt\"",
    "code": "with open('test.txt', 'a') as myfile:\n    myfile.write('appended text')"
  },
  {
    "intent": "append line \"cool beans...\" to file \"foo\"",
    "code": "with open('foo', 'a') as f:\n    f.write('cool beans...')"
  },
  {
    "intent": "append to file 'test1' content 'koko'",
    "code": "with open('test1', 'ab') as f:\n    pass"
  },
  {
    "intent": "append to file 'test' content 'koko'",
    "code": "open('test', 'a+b').write('koko')"
  },
  {
    "intent": "split string 'x+13.5*10x-4e1' into tokens",
    "code": "print([i for i in re.split('([\\\\d.]+|\\\\W+)', 'x+13.5*10x-4e1') if i])"
  },
  {
    "intent": "Find all Chinese characters in string `ipath`",
    "code": "re.findall('[\\u4e00-\\u9fff]+', ipath)"
  },
  {
    "intent": "split string `s` by letter 's'",
    "code": "s.split('s')"
  },
  {
    "intent": "run shell command 'rm -r some.file' in the background",
    "code": "subprocess.Popen(['rm', '-r', 'some.file'])"
  },
  {
    "intent": "convert a list of dictionaries `listofdict into a dictionary of dictionaries",
    "code": "dict((d['name'], d) for d in listofdict)"
  },
  {
    "intent": "print current date and time in a regular format",
    "code": "datetime.datetime.now().strftime('%Y-%m-%d %H:%M')"
  },
  {
    "intent": "print current date and time in a regular format",
    "code": "time.strftime('%Y-%m-%d %H:%M')"
  },
  {
    "intent": "find consecutive consonants in a word `CONCENTRATION` using regex",
    "code": "re.findall('[bcdfghjklmnpqrstvwxyz]+', 'CONCERTATION', re.IGNORECASE)"
  },
  {
    "intent": "get a list of indices of non zero elements in a list `a`",
    "code": "[i for i, e in enumerate(a) if e != 0]"
  },
  {
    "intent": "get multiple integer values from a string 'string1'",
    "code": "map(int, re.findall('\\\\d+', string1))"
  },
  {
    "intent": "get the path of Python executable under windows",
    "code": "os.path.dirname(sys.executable)"
  },
  {
    "intent": "move an x-axis label to the top of a plot `ax` in matplotlib",
    "code": "ax.xaxis.set_label_position('top')"
  },
  {
    "intent": "move x-axis to the top of a plot `ax`",
    "code": "ax.xaxis.tick_top()"
  },
  {
    "intent": "Move x-axis of the pyplot object `ax` to the top of a plot in matplotlib",
    "code": "ax.xaxis.set_ticks_position('top')"
  },
  {
    "intent": "parse string '2015/01/01 12:12am' to DateTime object using format '%Y/%m/%d %I:%M%p'",
    "code": "datetime.strptime('2015/01/01 12:12am', '%Y/%m/%d %I:%M%p')"
  },
  {
    "intent": "Open image 'picture.jpg'",
    "code": "img = Image.open('picture.jpg')\nimg.show()"
  },
  {
    "intent": "Open image \"picture.jpg\"",
    "code": "img = Image.open('picture.jpg')\nImg.show"
  },
  {
    "intent": "terminate the script using status value 0",
    "code": "sys.exit(0)"
  },
  {
    "intent": "abort the execution of the script using message 'aa! errors!'",
    "code": "sys.exit('aa! errors!')"
  },
  {
    "intent": "abort the execution of a python script",
    "code": "sys.exit()"
  },
  {
    "intent": "find maximum with lookahead = 4 in a list `arr`",
    "code": "[max(abs(x) for x in arr[i:i + 4]) for i in range(0, len(arr), 4)]"
  },
  {
    "intent": "set the current working directory to 'c:\\\\Users\\\\uname\\\\desktop\\\\python'",
    "code": "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"
  },
  {
    "intent": "set the current working directory to path `path`",
    "code": "os.chdir(path)"
  },
  {
    "intent": "get a list `no_integers` of all the items in list `mylist` that are not of type `int`",
    "code": "no_integers = [x for x in mylist if not isinstance(x, int)]"
  },
  {
    "intent": "match contents of an element to 'Example' in xpath (lxml)",
    "code": "tree.xpath(\".//a[text()='Example']\")[0].tag"
  },
  {
    "intent": "concatenate key/value pairs in dictionary `a` with string ', ' into a single string",
    "code": "\"\"\", \"\"\".join([(str(k) + ' ' + str(v)) for k, v in list(a.items())])"
  },
  {
    "intent": "Strip all non-ASCII characters from a unicode string, `\\xa3\\u20ac\\xa3\\u20ac`",
    "code": "print(set(re.sub('[\\x00-\\x7f]', '', '\\xa3\\u20ac\\xa3\\u20ac')))"
  },
  {
    "intent": "Get all non-ascii characters in a unicode string `\\xa3100 is worth more than \\u20ac100`",
    "code": "print(re.sub('[\\x00-\\x7f]', '', '\\xa3100 is worth more than \\u20ac100'))"
  },
  {
    "intent": "build a dict of key:value pairs from a string representation of a dict, `{'muffin' : 'lolz', 'foo' : 'kitty'}`",
    "code": "ast.literal_eval(\"{'muffin' : 'lolz', 'foo' : 'kitty'}\")"
  },
  {
    "intent": "Print string `t` with proper unicode representations",
    "code": "print(t.decode('unicode_escape'))"
  },
  {
    "intent": "Normalize string `str` from 'cp1252' code to 'utf-8' code",
    "code": "print(str.encode('cp1252').decode('utf-8').encode('cp1252').decode('utf-8'))"
  },
  {
    "intent": "merge lists `list_a` and `list_b` into a list of tuples",
    "code": "zip(list_a, list_b)"
  },
  {
    "intent": "merge lists `a` and `a` into a list of tuples",
    "code": "list(zip(a, b))"
  },
  {
    "intent": "convert pandas DataFrame `df` to a dictionary using `id` field as the key",
    "code": "df.set_index('id').to_dict()"
  },
  {
    "intent": "convert pandas dataframe `df` with fields 'id', 'value' to dictionary",
    "code": "df.set_index('id')['value'].to_dict()"
  },
  {
    "intent": "Can I sort text by its numeric value in Python?",
    "code": "sorted(list(mydict.items()), key=lambda a: map(int, a[0].split('.')))"
  },
  {
    "intent": "remove parentheses and text within it in string `filename`",
    "code": "re.sub('\\\\([^)]*\\\\)', '', filename)"
  },
  {
    "intent": "Check if string 'a b' only contains letters and spaces",
    "code": "\"\"\"a b\"\"\".replace(' ', '').isalpha()"
  },
  {
    "intent": "sum each element `x` in list `first` with element `y` at the same index in list `second`.",
    "code": "[(x + y) for x, y in zip(first, second)]"
  },
  {
    "intent": "sort a python dictionary `a_dict` by element `1` of the value",
    "code": "sorted(list(a_dict.items()), key=lambda item: item[1][1])"
  },
  {
    "intent": "How to exclude a character from a regex group?",
    "code": "re.compile('[^a-zA-Z0-9-]+')"
  },
  {
    "intent": "get index of the biggest 2 values of a list `a`",
    "code": "sorted(list(range(len(a))), key=lambda i: a[i])[-2:]"
  },
  {
    "intent": "get indexes of the largest `2` values from a list `a` using itemgetter",
    "code": "zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]"
  },
  {
    "intent": "get the indexes of the largest `2` values from a list of integers `a`",
    "code": "sorted(list(range(len(a))), key=lambda i: a[i], reverse=True)[:2]"
  },
  {
    "intent": "get index of key 'c' in dictionary `x`",
    "code": "list(x.keys()).index('c')"
  },
  {
    "intent": "Print +1 using format '{0:+d}'",
    "code": "print('{0:+d}'.format(score))"
  },
  {
    "intent": "remove adjacent duplicate elements from a list `[1, 2, 2, 3, 2, 2, 4]`",
    "code": "[k for k, g in itertools.groupby([1, 2, 2, 3, 2, 2, 4])]"
  },
  {
    "intent": "split string \"0,1,2\" based on delimiter ','",
    "code": "\"\"\"0,1,2\"\"\".split(',')"
  },
  {
    "intent": "convert the string '0,1,2' to a list of integers",
    "code": "[int(x) for x in '0,1,2'.split(',')]"
  },
  {
    "intent": "convert list of key-value tuples `[('A', 1), ('B', 2), ('C', 3)]` into dictionary",
    "code": "dict([('A', 1), ('B', 2), ('C', 3)])"
  },
  {
    "intent": "save numpy array `x` into text file 'test.txt'",
    "code": "np.savetxt('test.txt', x)"
  },
  {
    "intent": "store the output of command 'ls' in variable `direct_output`",
    "code": "direct_output = subprocess.check_output('ls', shell=True)"
  },
  {
    "intent": "get all column name of dataframe `df` except for column 'T1_V6'",
    "code": "df[df.columns - ['T1_V6']]"
  },
  {
    "intent": "get count of values in numpy array `a` that are between values `25` and `100`",
    "code": "((25 < a) & (a < 100)).sum()"
  },
  {
    "intent": "Get day name from a datetime object",
    "code": "date.today().strftime('%A')"
  },
  {
    "intent": "Python regular expression match whole word",
    "code": "re.search('\\\\bis\\\\b', your_string)"
  },
  {
    "intent": "Jinja parse datetime object `car.date_of_manufacture` to use format pattern `datetime`",
    "code": "{{car.date_of_manufacture | datetime}}"
  },
  {
    "intent": "Get the date object `date_of_manufacture` of object `car` in string  format '%Y-%m-%d'",
    "code": "{{car.date_of_manufacture.strftime('%Y-%m-%d')}}"
  },
  {
    "intent": "make a flat list from list of lists `sublist`",
    "code": "[item for sublist in l for item in sublist]"
  },
  {
    "intent": "make a flat list from list of lists `list2d`",
    "code": "list(itertools.chain(*list2d))"
  },
  {
    "intent": "make a flat list from list of lists `list2d`",
    "code": "list(itertools.chain.from_iterable(list2d))"
  },
  {
    "intent": "convert ascii value 'a' to int",
    "code": "ord('a')"
  },
  {
    "intent": "replace white spaces in string '  a\\n b\\n c\\nd  e' with empty string ''",
    "code": "re.sub('(?m)^[^\\\\S\\\\n]+', '', '  a\\n b\\n c\\nd  e')"
  },
  {
    "intent": "remove white spaces from all the lines using a regular expression in string 'a\\n b\\n c'",
    "code": "re.sub('(?m)^\\\\s+', '', 'a\\n b\\n c')"
  },
  {
    "intent": "destruct elements of list `[1, 2, 3]` to variables `a`, `b` and `c`",
    "code": "a, b, c = [1, 2, 3]"
  },
  {
    "intent": "split list `mylist` into a list of lists whose elements have the same first five characters",
    "code": "[list(v) for k, v in itertools.groupby(mylist, key=lambda x: x[:5])]"
  },
  {
    "intent": "remove all instances of parenthesesis containing text beginning with `as ` from string `line`",
    "code": "line = re.sub('\\\\(+as .*?\\\\) ', '', line)"
  },
  {
    "intent": "skip the newline while printing `line`",
    "code": "print(line.rstrip('\\n'))"
  },
  {
    "intent": "get index values of pandas dataframe `df` as list",
    "code": "df.index.values.tolist()"
  },
  {
    "intent": "check if list `a` is empty",
    "code": "if (not a):\n    pass"
  },
  {
    "intent": "check if list `seq` is empty",
    "code": "if (not seq):\n    pass"
  },
  {
    "intent": "check if list `li` is empty",
    "code": "if (len(li) == 0):\n    pass"
  },
  {
    "intent": "create a list containing the indices of elements greater than 4 in list `a`",
    "code": "[i for i, v in enumerate(a) if v > 4]"
  },
  {
    "intent": "reverse list `yourdata`",
    "code": "sorted(yourdata, reverse=True)"
  },
  {
    "intent": "sort list of nested dictionaries `yourdata` in reverse based on values associated with each dictionary's key 'subkey'",
    "code": "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"
  },
  {
    "intent": "sort list of nested dictionaries `yourdata` in reverse order of 'key' and 'subkey'",
    "code": "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"
  },
  {
    "intent": "remove decimal points in pandas data frame using round",
    "code": "df.round()"
  },
  {
    "intent": "Get data from matplotlib plot",
    "code": "gca().get_lines()[n].get_xydata()"
  },
  {
    "intent": "get the maximum 2 values per row in array `A`",
    "code": "A[:, -2:]"
  },
  {
    "intent": "Get value for  \"username\" parameter in GET request  in Django",
    "code": "request.GET.get('username', '')"
  },
  {
    "intent": "pretty-print ordered dictionary `o`",
    "code": "pprint(dict(list(o.items())))"
  },
  {
    "intent": "Confirm urls in Django properly",
    "code": "url('^$', include('sms.urls')),"
  },
  {
    "intent": "Configure url in django properly",
    "code": "url('^', include('sms.urls')),"
  },
  {
    "intent": "get the tuple in list `a_list` that has the largest item in the second index",
    "code": "max_item = max(a_list, key=operator.itemgetter(1))"
  },
  {
    "intent": "find tuple in list of tuples `a_list` with the largest second element",
    "code": "max(a_list, key=operator.itemgetter(1))"
  },
  {
    "intent": "resample series `s` into 3 months bins and sum each bin",
    "code": "s.resample('3M', how='sum')"
  },
  {
    "intent": "extract elements at indices (1, 2, 5) from a list `a`",
    "code": "[a[i] for i in (1, 2, 5)]"
  },
  {
    "intent": "filter lines from a text file 'textfile' which contain a word 'apple'",
    "code": "[line for line in open('textfile') if 'apple' in line]"
  },
  {
    "intent": "convert a date string `s` to a datetime object",
    "code": "datetime.datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ')"
  },
  {
    "intent": "reading tab-delimited csv file `filename` with pandas on mac",
    "code": "pandas.read_csv(filename, sep='\\t', lineterminator='\\r')"
  },
  {
    "intent": "replace only first occurence of string `TEST` from a string `longlongTESTstringTEST`",
    "code": "'longlongTESTstringTEST'.replace('TEST', '?', 1)"
  },
  {
    "intent": "zip file `pdffile` using its basename as directory name",
    "code": "archive.write(pdffile, os.path.basename(pdffile))"
  },
  {
    "intent": "create a dictionary of pairs from a list of tuples `myListOfTuples`",
    "code": "dict(x[1:] for x in reversed(myListOfTuples))"
  },
  {
    "intent": "subtract elements of list `List1` from elements of list `List2`",
    "code": "[(x1 - x2) for x1, x2 in zip(List1, List2)]"
  },
  {
    "intent": "check if string `string` starts with a number",
    "code": "string[0].isdigit()"
  },
  {
    "intent": "Check if string `strg` starts with any of the elements in list ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')",
    "code": "strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))"
  },
  {
    "intent": "print script's directory",
    "code": "print(os.path.dirname(os.path.realpath(__file__)))"
  },
  {
    "intent": "split string `text` by the occurrences of regex pattern '(?<=\\\\?|!|\\\\.)\\\\s{0,2}(?=[A-Z]|$)'",
    "code": "re.split('(?<=\\\\?|!|\\\\.)\\\\s{0,2}(?=[A-Z]|$)', text)"
  },
  {
    "intent": "Make a scatter plot using unpacked values of list `li`",
    "code": "plt.scatter(*zip(*li))"
  },
  {
    "intent": "rearrange tuple of tuples `t`",
    "code": "tuple(zip(*t))"
  },
  {
    "intent": "Get average for every three columns in `df` dataframe",
    "code": "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"
  },
  {
    "intent": "convert a list `L` of ascii values to a string",
    "code": "\"\"\"\"\"\".join(chr(i) for i in L)"
  },
  {
    "intent": "count the number of pairs in dictionary `d` whose value equal to `chosen_value`",
    "code": "sum(x == chosen_value for x in list(d.values()))"
  },
  {
    "intent": "count the number of values in `d` dictionary that are predicate to function `some_condition`",
    "code": "sum(1 for x in list(d.values()) if some_condition(x))"
  },
  {
    "intent": "convert double 0.00582811585976 to float",
    "code": "struct.unpack('f', struct.pack('f', 0.00582811585976))"
  },
  {
    "intent": "convert datetime.date `dt` to utc timestamp",
    "code": "timestamp = (dt - datetime(1970, 1, 1)).total_seconds()"
  },
  {
    "intent": "sort column `m` in panda dataframe `df`",
    "code": "df.sort('m')"
  },
  {
    "intent": "Sort a data `a` in descending order based on the `modified` attribute of elements using lambda function",
    "code": "a = sorted(a, key=lambda x: x.modified, reverse=True)"
  },
  {
    "intent": "print the truth value of `a`",
    "code": "print(bool(a))"
  },
  {
    "intent": "rename `last` row index label in dataframe `df` to `a`",
    "code": "df = df.rename(index={last: 'a'})"
  },
  {
    "intent": "Fit Kmeans function to a one-dimensional array `x` by reshaping it to be a multidimensional array of single values",
    "code": "km.fit(x.reshape(-1, 1))"
  },
  {
    "intent": "Sort a list of strings 'words' such that items starting with 's' come first.",
    "code": "sorted(words, key=lambda x: 'a' + x if x.startswith('s') else 'b' + x)"
  },
  {
    "intent": "open the login site 'http://somesite.com/adminpanel/index.php' in the browser",
    "code": "webbrowser.open('http://somesite.com/adminpanel/index.php')"
  },
  {
    "intent": "fetch all elements in a dictionary `parent_dict`, falling between two keys 2 and 4",
    "code": "dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)"
  },
  {
    "intent": "fetch all elements in a dictionary 'parent_dict' where the key is between the range of 2 to 4",
    "code": "dict((k, v) for k, v in parent_dict.items() if k > 2 and k < 4)"
  },
  {
    "intent": "sort two lists `list1` and `list2` together using lambda function",
    "code": "[list(x) for x in zip(*sorted(zip(list1, list2), key=lambda pair: pair[0]))]"
  },
  {
    "intent": "get the number of values in list `j` that is greater than 5",
    "code": "sum(((i > 5) for i in j))"
  },
  {
    "intent": "get the number of values in list `j` that is greater than 5",
    "code": "len([1 for i in j if (i > 5)])"
  },
  {
    "intent": "get the number of values in list `j` that is greater than `i`",
    "code": "j = np.array(j)\nsum((j > i))"
  },
  {
    "intent": "zip list `a`, `b`, `c` into a list of tuples",
    "code": "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"
  },
  {
    "intent": "changing permission of file `path` to `stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH`",
    "code": "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"
  },
  {
    "intent": "argparse associate zero or more arguments with flag 'file'",
    "code": "parser.add_argument('file', nargs='*')"
  },
  {
    "intent": "get a list of booleans `z` that shows wether the corresponding items in list `x` and `y` are equal",
    "code": "z = [(i == j) for i, j in zip(x, y)]"
  },
  {
    "intent": "create a list which indicates whether each element in `x` and `y` is identical",
    "code": "[(x[i] == y[i]) for i in range(len(x))]"
  },
  {
    "intent": "Python: Extract numbers from a string",
    "code": "[int(s) for s in re.findall('\\\\b\\\\d+\\\\b', \"he33llo 42 I'm a 32 string 30\")]"
  },
  {
    "intent": "create an empty data frame `df2` with index from another data frame `df1`",
    "code": "df2 = pd.DataFrame(index=df1.index)"
  },
  {
    "intent": "unpack first and second bytes of byte string `pS` into integer",
    "code": "struct.unpack('h', pS[0:2])"
  },
  {
    "intent": "print list `t` into a table-like shape",
    "code": "print('\\n'.join('  '.join(map(str, row)) for row in t))"
  },
  {
    "intent": "Sort Pandas Dataframe by Date",
    "code": "df.sort_values(by='Date')"
  },
  {
    "intent": "check if a checkbox is checked in selenium python webdriver",
    "code": "driver.find_element_by_name('<check_box_name>').is_selected()"
  },
  {
    "intent": "determine if checkbox with id '<check_box_id>' is checked in selenium python webdriver",
    "code": "driver.find_element_by_id('<check_box_id>').is_selected()"
  },
  {
    "intent": "replace `0` with `2` in the list `[0, 1, 0, 3]`",
    "code": "[(a if a else 2) for a in [0, 1, 0, 3]]"
  },
  {
    "intent": "Produce a string that is suitable as Unicode literal from string 'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'",
    "code": "'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'.encode().decode('unicode-escape')"
  },
  {
    "intent": "Parse a unicode string `M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s`",
    "code": "'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'.decode('unicode-escape')"
  },
  {
    "intent": "convert Unicode codepoint to utf8 hex",
    "code": "chr(int('fd9b', 16)).encode('utf-8')"
  },
  {
    "intent": "use upper case letters to print hex value `value`",
    "code": "print('0x%X' % value)"
  },
  {
    "intent": "get a list `cleaned` that contains all non-empty elements in list `your_list`",
    "code": "cleaned = [x for x in your_list if x]"
  },
  {
    "intent": "create a slice object using string `string_slice`",
    "code": "slice(*[(int(i.strip()) if i else None) for i in string_slice.split(':')])"
  },
  {
    "intent": "Find all the tags `a` and `div` from Beautiful Soup object `soup`",
    "code": "soup.find_all(['a', 'div'])"
  },
  {
    "intent": "get the name of function `func` as a string",
    "code": "print(func.__name__)"
  },
  {
    "intent": "convert dictionary `adict` into string",
    "code": "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"
  },
  {
    "intent": "convert dictionary `adict` into string",
    "code": "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"
  },
  {
    "intent": "copy list `old_list` as `new_list`",
    "code": "new_list = old_list[:]"
  },
  {
    "intent": "copy list `old_list` as `new_list`",
    "code": "new_list = list(old_list)"
  },
  {
    "intent": "copy list `old_list` as `new_list`",
    "code": "new_list = copy.copy(old_list)"
  },
  {
    "intent": "deep copy list `old_list` as `new_list`",
    "code": "new_list = copy.deepcopy(old_list)"
  },
  {
    "intent": "make a copy of list `old_list`",
    "code": "[i for i in old_list]"
  },
  {
    "intent": "remove frame of legend in plot `plt`",
    "code": "plt.legend(frameon=False)"
  },
  {
    "intent": "Print a emoji from a string `\\\\ud83d\\\\ude4f` having surrogate pairs",
    "code": "\"\"\"\\\\ud83d\\\\ude4f\"\"\".encode('utf-16', 'surrogatepass').decode('utf-16')"
  },
  {
    "intent": "calling a function named 'myfunction' in the module",
    "code": "globals()['myfunction']()"
  },
  {
    "intent": "Check the status code of url \"http://www.stackoverflow.com\"",
    "code": "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"
  },
  {
    "intent": "Check the status code of url \"www.python.org\"",
    "code": "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"
  },
  {
    "intent": "Check the status code of url `url`",
    "code": "r = requests.head(url)\nreturn (r.status_code == 200)"
  },
  {
    "intent": "Checking if website \"http://www.stackoverflow.com\" is up",
    "code": "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"
  },
  {
    "intent": "Selenium `driver` click a hyperlink with the pattern \"a[href^='javascript']\"",
    "code": "driver.find_element_by_css_selector(\"a[href^='javascript']\").click()"
  },
  {
    "intent": "store data frame `df` to file `file_name` using pandas, python",
    "code": "df.to_pickle(file_name)"
  },
  {
    "intent": "calculate the mean of columns with same name in dataframe `df`",
    "code": "df.groupby(by=df.columns, axis=1).mean()"
  },
  {
    "intent": "sort list `bar` by each element's attribute `attrb1` and attribute `attrb2` in reverse order",
    "code": "bar.sort(key=lambda x: (x.attrb1, x.attrb2), reverse=True)"
  },
  {
    "intent": "get alpha value `alpha` of a png image `img`",
    "code": "alpha = img.split()[-1]"
  },
  {
    "intent": "How to get the length of words in a sentence?",
    "code": "[len(x) for x in s.split()]"
  },
  {
    "intent": "BeautifulSoup find tag 'div' with styling 'width=300px;' in HTML string `soup`",
    "code": "soup.findAll('div', style='width=300px;')"
  },
  {
    "intent": "Execute SQL statement `sql` with values of dictionary `myDict` as parameters",
    "code": "cursor.execute(sql, list(myDict.values()))"
  },
  {
    "intent": "Convert CSV file `Result.csv` to Pandas dataframe using separator ' '",
    "code": "df.to_csv('Result.csv', index=False, sep=' ')"
  },
  {
    "intent": "update the `globals()` dictionary with the contents of the `vars(args)` dictionary",
    "code": "globals().update(vars(args))"
  },
  {
    "intent": "find all substrings in `mystring` beginning and ending with square brackets",
    "code": "re.findall('\\\\[(.*?)\\\\]', mystring)"
  },
  {
    "intent": "Format all floating variables `var1`, `var2`, `var3`, `var1` to print to two decimal places.",
    "code": "print('%.2f kg = %.2f lb = %.2f gal = %.2f l' % (var1, var2, var3, var4))"
  },
  {
    "intent": "Remove all items from a dictionary `d` where the values are less than `1`",
    "code": "d = dict((k, v) for k, v in d.items() if v > 0)"
  },
  {
    "intent": "Filter dictionary `d` to have items with value greater than 0",
    "code": "d = {k: v for k, v in list(d.items()) if v > 0}"
  },
  {
    "intent": "convert a string of date strings `date_stngs ` to datetime objects and put them in a dataframe",
    "code": "pd.to_datetime(pd.Series(date_stngs))"
  },
  {
    "intent": "get  value at index `[2, 0]` in dataframe `df`",
    "code": "df.iloc[2, 0]"
  },
  {
    "intent": "change the font size on plot `matplotlib` to 22",
    "code": "matplotlib.rcParams.update({'font.size': 22})"
  },
  {
    "intent": "converting dictionary `d` into a dataframe `pd` with keys as data for column 'Date' and the corresponding values as data for column 'DateValue'",
    "code": "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"
  },
  {
    "intent": "create a dataframe containing the multiplication of element-wise in dataframe `df` and dataframe `df2` using index name and column labels of dataframe `df`",
    "code": "pd.DataFrame(df.values * df2.values, columns=df.columns, index=df.index)"
  },
  {
    "intent": "extract floating number from string 'Current Level: 13.4 db.'",
    "code": "re.findall('\\\\d+\\\\.\\\\d+', 'Current Level: 13.4 db.')"
  },
  {
    "intent": "extract floating point numbers from a string 'Current Level: -13.2 db or 14.2 or 3'",
    "code": "re.findall('[-+]?\\\\d*\\\\.\\\\d+|\\\\d+', 'Current Level: -13.2 db or 14.2 or 3')"
  },
  {
    "intent": "pair each element in list `it` 3 times into a tuple",
    "code": "zip(it, it, it)"
  },
  {
    "intent": "lowercase a python dataframe string in column 'x' if it has missing values in dataframe `df`",
    "code": "df['x'].str.lower()"
  },
  {
    "intent": "append dict `{'f': var6, 'g': var7, 'h': var8}` to value of key `e` in dict `jsobj['a']['b']`",
    "code": "jsobj['a']['b']['e'].append({'f': var6, 'g': var7, 'h': var8})"
  },
  {
    "intent": "Concat a list of strings `lst` using string formatting",
    "code": "\"\"\"\"\"\".join(lst)"
  },
  {
    "intent": "sum values greater than 0 in dictionary `d`",
    "code": "sum(v for v in list(d.values()) if v > 0)"
  },
  {
    "intent": "run flask application `app` in debug mode.",
    "code": "app.run(debug=True)"
  },
  {
    "intent": "drop rows whose index value in list `[1, 3]` in dataframe `df`",
    "code": "df.drop(df.index[[1, 3]], inplace=True)"
  },
  {
    "intent": "replace nan values in a pandas data frame with the average of columns",
    "code": "df.apply(lambda x: x.fillna(x.mean()), axis=0)"
  },
  {
    "intent": "extract attribute `my_attr` from each object in list `my_list`",
    "code": "[o.my_attr for o in my_list]"
  },
  {
    "intent": "python get time stamp on file `file` in '%m/%d/%Y' format",
    "code": "time.strftime('%m/%d/%Y', time.gmtime(os.path.getmtime(file)))"
  },
  {
    "intent": "check if dictionary `subset` is a subset of dictionary `superset`",
    "code": "all(item in list(superset.items()) for item in list(subset.items()))"
  },
  {
    "intent": "Convert integer elements in list `wordids` to strings",
    "code": "[str(wi) for wi in wordids]"
  },
  {
    "intent": "Reset the indexes of a pandas data frame",
    "code": "df2 = df.reset_index()"
  },
  {
    "intent": "format datetime in `dt` as string in format `'%m/%d/%Y`",
    "code": "dt.strftime('%m/%d/%Y')"
  },
  {
    "intent": "format floating point number  `TotalAmount` to be rounded off to two decimal places and have a comma thousands' seperator",
    "code": "print('Total cost is: ${:,.2f}'.format(TotalAmount))"
  },
  {
    "intent": "sum the values in each row of every two adjacent columns in dataframe `df`",
    "code": "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"
  },
  {
    "intent": "create list `randomList` with 10 random floating point numbers between 0.0 and 1.0",
    "code": "randomList = [random.random() for _ in range(10)]"
  },
  {
    "intent": "find href value that has string 'follow?page' inside it",
    "code": "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"
  },
  {
    "intent": "immediately see output of print statement that doesn't end in a newline",
    "code": "sys.stdout.flush()"
  },
  {
    "intent": "get a random key `country` and value `capital` form a dictionary `d`",
    "code": "country, capital = random.choice(list(d.items()))"
  },
  {
    "intent": "split string `Word to Split` into a list of characters",
    "code": "list('Word to Split')"
  },
  {
    "intent": "Create a list containing words that contain vowel letter followed by the same vowel in file 'file.text'",
    "code": "[w for w in open('file.txt') if not re.search('[aeiou]{2}', w)]"
  },
  {
    "intent": "Validate IP address using Regex",
    "code": "pat = re.compile('^\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}$')"
  },
  {
    "intent": "execute file 'filename.py'",
    "code": "exec(compile(open('filename.py').read(), 'filename.py', 'exec'))"
  },
  {
    "intent": "SQLAlchemy count the number of rows with distinct values in column `name` of table `Tag`",
    "code": "session.query(Tag).distinct(Tag.name).group_by(Tag.name).count()"
  },
  {
    "intent": "remove null columns in a dataframe `df`",
    "code": "df = df.dropna(axis=1, how='all')"
  },
  {
    "intent": "check if all lists in list `L` have three elements of integer 1",
    "code": "all(x.count(1) == 3 for x in L)"
  },
  {
    "intent": "Get a list comparing two lists of tuples `l1` and `l2` if any first value in `l1` matches with first value in `l2`",
    "code": "[x[0] for x in l1 if any(x[0] == y[0] for y in l2)]"
  },
  {
    "intent": "clear the textbox `text` in tkinter",
    "code": "tex.delete('1.0', END)"
  },
  {
    "intent": "Convert long int `myNumber` into date and time represented in the the string format '%Y-%m-%d %H:%M:%S'",
    "code": "datetime.datetime.fromtimestamp(myNumber).strftime('%Y-%m-%d %H:%M:%S')"
  },
  {
    "intent": "Spawn a process to run python script `myscript.py` in C++",
    "code": "system('python myscript.py')"
  },
  {
    "intent": "sort a list `your_list` of class objects by their values for the attribute `anniversary_score`",
    "code": "your_list.sort(key=operator.attrgetter('anniversary_score'))"
  },
  {
    "intent": "sort list `your_list` by the `anniversary_score` attribute of each object",
    "code": "your_list.sort(key=lambda x: x.anniversary_score)"
  },
  {
    "intent": "convert a tensor with list of constants `[1, 2, 3]` into a numpy array in tensorflow",
    "code": "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"
  },
  {
    "intent": "convert list `a` from being consecutive sequences of tuples into a single sequence of elements",
    "code": "list(itertools.chain(*a))"
  },
  {
    "intent": "Set value for key `a` in dict `count` to `0` if key `a` does not exist or if value is `none`",
    "code": "count.setdefault('a', 0)"
  },
  {
    "intent": "Do group by on `cluster` column in `df` and get its mean",
    "code": "df.groupby(['cluster']).mean()"
  },
  {
    "intent": "get number in list `myList` closest in value to number `myNumber`",
    "code": "min(myList, key=lambda x: abs(x - myNumber))"
  },
  {
    "intent": "check if any of the items in  `search` appear in `string`",
    "code": "any(x in string for x in search)"
  },
  {
    "intent": "search for occurrences of regex pattern `pattern` in string `url`",
    "code": "print(pattern.search(url).group(1))"
  },
  {
    "intent": "factorize all string values in dataframe `s` into floats",
    "code": "(s.factorize()[0] + 1).astype('float')"
  },
  {
    "intent": "Get a list `C` by subtracting values in one list `B` from corresponding values in another list `A`",
    "code": "C = [(a - b) for a, b in zip(A, B)]"
  },
  {
    "intent": "derive the week start for the given week number and year \u20182011, 4, 0\u2019",
    "code": "datetime.datetime.strptime('2011, 4, 0', '%Y, %U, %w')"
  },
  {
    "intent": "convert a list of strings `['1', '-1', '1']` to a list of numbers",
    "code": "map(int, ['1', '-1', '1'])"
  },
  {
    "intent": "create datetime object from \"16sep2012\"",
    "code": "datetime.datetime.strptime('16Sep2012', '%d%b%Y')"
  },
  {
    "intent": "update fields in Django model `Book` with arguments in dictionary `d` where primary key is equal to `pk`",
    "code": "Book.objects.filter(pk=pk).update(**d)"
  },
  {
    "intent": "update the fields in django model `Book` using dictionary `d`",
    "code": "Book.objects.create(**d)"
  },
  {
    "intent": "print a digit `your_number` with exactly 2 digits after decimal",
    "code": "print('{0:.2f}'.format(your_number))"
  },
  {
    "intent": "generate a 12-digit random number",
    "code": "random.randint(100000000000, 999999999999)"
  },
  {
    "intent": "generate a random 12-digit number",
    "code": "int(''.join(str(random.randint(0, 9)) for _ in range(12)))"
  },
  {
    "intent": "generate a random 12-digit number",
    "code": "\"\"\"\"\"\".join(str(random.randint(0, 9)) for _ in range(12))"
  },
  {
    "intent": "generate a 12-digit random number",
    "code": "'%0.12d' % random.randint(0, 999999999999)"
  },
  {
    "intent": "remove specific elements in a numpy array `a`",
    "code": "numpy.delete(a, index)"
  },
  {
    "intent": "sort list `trial_list` based on values of dictionary `trail_dict`",
    "code": "sorted(trial_list, key=lambda x: trial_dict[x])"
  },
  {
    "intent": "read a single character from stdin",
    "code": "sys.stdin.read(1)"
  },
  {
    "intent": "get a list of characters in string `x` matching regex pattern `pattern`",
    "code": "print(re.findall(pattern, x))"
  },
  {
    "intent": "get the context of a search by keyword 'My keywords' in beautifulsoup `soup`",
    "code": "k = soup.find(text=re.compile('My keywords')).parent.text"
  },
  {
    "intent": "convert rows in pandas data frame `df` into list",
    "code": "df.apply(lambda x: x.tolist(), axis=1)"
  },
  {
    "intent": "convert a 1d `A` array to a 2d array `B`",
    "code": "B = np.reshape(A, (-1, 2))"
  },
  {
    "intent": "run app `app` on host '192.168.0.58' and port 9000 in Flask",
    "code": "app.run(host='192.168.0.58', port=9000, debug=False)"
  },
  {
    "intent": "encode unicode string '\\xc5\\xc4\\xd6' to utf-8 code",
    "code": "print('\\xc5\\xc4\\xd6'.encode('UTF8'))"
  },
  {
    "intent": "get the first element of each tuple from a list of tuples `G`",
    "code": "[x[0] for x in G]"
  },
  {
    "intent": "regular expression matching all but 'aa' and 'bb' for string `string`",
    "code": "re.findall('-(?!aa-|bb-)([^-]+)', string)"
  },
  {
    "intent": "regular expression matching all but 'aa' and 'bb'",
    "code": "re.findall('-(?!aa|bb)([^-]+)', string)"
  },
  {
    "intent": "remove false entries from a dictionary `hand`",
    "code": "{k: v for k, v in list(hand.items()) if v}"
  },
  {
    "intent": "Get a dictionary from a dictionary `hand` where the values are present",
    "code": "dict((k, v) for k, v in hand.items() if v)"
  },
  {
    "intent": "sort list `L` based on the value of variable 'resultType' for each object in list `L`",
    "code": "sorted(L, key=operator.itemgetter('resultType'))"
  },
  {
    "intent": "sort a list of objects `s` by a member variable 'resultType'",
    "code": "s.sort(key=operator.attrgetter('resultType'))"
  },
  {
    "intent": "sort a list of objects 'somelist' where the object has member number variable `resultType`",
    "code": "somelist.sort(key=lambda x: x.resultType)"
  },
  {
    "intent": "join multiple dataframes `d1`, `d2`, and `d3` on column 'name'",
    "code": "df1.merge(df2, on='name').merge(df3, on='name')"
  },
  {
    "intent": "generate random Decimal",
    "code": "decimal.Decimal(random.randrange(10000)) / 100"
  },
  {
    "intent": "list all files of a directory `mypath`",
    "code": "onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"
  },
  {
    "intent": "list all files of a directory `mypath`",
    "code": "f = []\nfor (dirpath, dirnames, filenames) in walk(mypath):\n    f.extend(filenames)\n    break"
  },
  {
    "intent": "list all \".txt\" files of a directory \"/home/adam/\"",
    "code": "print(glob.glob('/home/adam/*.txt'))"
  },
  {
    "intent": "list all files of a directory \"somedirectory\"",
    "code": "os.listdir('somedirectory')"
  },
  {
    "intent": "execute sql query 'INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)' with all parameters in list `tup`",
    "code": "cur.executemany('INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)', tup)"
  },
  {
    "intent": "get keys with same value in dictionary `d`",
    "code": "print([key for key in d if d[key] == 1])"
  },
  {
    "intent": "get keys with same value in dictionary `d`",
    "code": "print([key for key, value in d.items() if value == 1])"
  },
  {
    "intent": "Get keys from a dictionary 'd' where the value is '1'.",
    "code": "print([key for key, value in list(d.items()) if value == 1])"
  },
  {
    "intent": "create list of 'size' empty strings",
    "code": "strs = ['' for x in range(size)]"
  },
  {
    "intent": "generate pdf file `output_filename` from markdown file `input_filename`",
    "code": "with open(input_filename, 'r') as f:\n    html_text = markdown(f.read(), output_format='html4')\npdfkit.from_string(html_text, output_filename)"
  },
  {
    "intent": "remove duplicate dict in list `l`",
    "code": "[dict(t) for t in set([tuple(d.items()) for d in l])]"
  },
  {
    "intent": "Set time zone `Europe/Istanbul` in Django",
    "code": "TIME_ZONE = 'Europe/Istanbul'"
  },
  {
    "intent": "append `date` to list value of `key` in dictionary `dates_dict`, or create key `key` with value `date` in a list if it does not exist",
    "code": "dates_dict.setdefault(key, []).append(date)"
  },
  {
    "intent": "Group the values from django model `Article` with group by value `pub_date` and annotate by `title`",
    "code": "Article.objects.values('pub_date').annotate(article_count=Count('title'))"
  },
  {
    "intent": "clear Tkinter Canvas `canvas`",
    "code": "canvas.delete('all')"
  },
  {
    "intent": "Initialize a pandas series object `s` with columns `['A', 'B', 'A1R', 'B2', 'AABB4']`",
    "code": "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"
  },
  {
    "intent": "None",
    "code": "datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')"
  },
  {
    "intent": "sort list `a` using the first dimension of the element as the key to list `b`",
    "code": "a.sort(key=lambda x: b.index(x[0]))"
  },
  {
    "intent": "How to sort a list according to another list?",
    "code": "a.sort(key=lambda x_y: b.index(x_y[0]))"
  },
  {
    "intent": "Save plot `plt` as png file 'filename.png'",
    "code": "plt.savefig('filename.png')"
  },
  {
    "intent": "Save matplotlib graph to image file `filename.png` at a resolution of `300 dpi`",
    "code": "plt.savefig('filename.png', dpi=300)"
  },
  {
    "intent": "get output from process `p1`",
    "code": "p1.communicate()[0]"
  },
  {
    "intent": "How to get output of exe in python script?",
    "code": "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"
  },
  {
    "intent": "searche in HTML string for elements that have text 'Python'",
    "code": "soup.body.findAll(text='Python')"
  },
  {
    "intent": "BeautifulSoup find string 'Python Jobs' in HTML body `body`",
    "code": "soup.body.findAll(text='Python Jobs')"
  },
  {
    "intent": "Sort items in dictionary `d`  using the first part of the key after splitting the key",
    "code": "sorted(list(d.items()), key=lambda name_num: (name_num[0].rsplit(None, 1)[0], name_num[1]))"
  },
  {
    "intent": "create a set that is the exclusive or of [1, 2, 3] and [3, 4, 5]",
    "code": "set([1, 2, 3]) ^ set([3, 4, 5])"
  },
  {
    "intent": "Get a list values of a dictionary item `pass_id` from post requests in django",
    "code": "request.POST.getlist('pass_id')"
  },
  {
    "intent": "Filter duplicate entries w.r.t. value in 'id' from a list of dictionaries 'L'",
    "code": "list(dict((x['id'], x) for x in L).values())"
  },
  {
    "intent": "Get pandas GroupBy object with sum over the rows with same column names within  dataframe `df`",
    "code": "df.groupby(df.columns, axis=1).sum()"
  },
  {
    "intent": "convert the zip of range `(1, 5)` and range `(7, 11)` into a dictionary",
    "code": "dict(zip(list(range(1, 5)), list(range(7, 11))))"
  },
  {
    "intent": "Get all indexes of boolean numpy array where boolean value `mask` is True",
    "code": "numpy.where(mask)"
  },
  {
    "intent": "case insensitive comparison of strings `string1` and `string2`",
    "code": "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"
  },
  {
    "intent": "case insensitive string comparison between `string1` and `string2`",
    "code": "if (string1.lower() == string2.lower()):\n    pass"
  },
  {
    "intent": "case insensitive string comparison between `string1` and `string2`",
    "code": "(string1.lower() == string2.lower())"
  },
  {
    "intent": "case insensitive string comparison between `first` and `second`",
    "code": "(first.lower() == second.lower())"
  },
  {
    "intent": "case insensitive comparison between strings `first` and `second`",
    "code": "(first.upper() == second.upper())"
  },
  {
    "intent": "Taking the results of a bash command \"awk '{print $10, $11}' test.txt > test2.txt\"",
    "code": "os.system(\"awk '{print $10, $11}' test.txt > test2.txt\")"
  },
  {
    "intent": "remove multiple values from a list `my_list` at the same time with index starting at `2` and ending just before `6`.",
    "code": "del my_list[2:6]"
  },
  {
    "intent": "convert a string `s` to its base-10 representation",
    "code": "int(s.encode('hex'), 16)"
  },
  {
    "intent": "match regex pattern 'TAA(?:[ATGC]{3})+?TAA' on string `seq`",
    "code": "re.findall('TAA(?:[ATGC]{3})+?TAA', seq)"
  },
  {
    "intent": "sort a set `s` by numerical value",
    "code": "sorted(s, key=float)"
  },
  {
    "intent": "convert an int 65 to hex string",
    "code": "hex(65)"
  },
  {
    "intent": "append a pandas series `b` to the series `a` and get a continuous index",
    "code": "a.append(b).reset_index(drop=True)"
  },
  {
    "intent": "simple way to append a pandas series `a` and `b` with same index",
    "code": "pd.concat([a, b], ignore_index=True)"
  },
  {
    "intent": "Get a list of tuples with multiple iterators using list comprehension",
    "code": "[(i, j) for i in range(1, 3) for j in range(1, 5)]"
  },
  {
    "intent": "reverse sort items in dictionary `mydict` by value",
    "code": "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"
  },
  {
    "intent": "select the last business day of the month for each month in 2014 in pandas",
    "code": "pd.date_range('1/1/2014', periods=12, freq='BM')"
  },
  {
    "intent": "disable the certificate check in https requests for url `https://kennethreitz.com`",
    "code": "requests.get('https://kennethreitz.com', verify=False)"
  },
  {
    "intent": "return dataframe `df` with last row dropped",
    "code": "df.ix[:-1]"
  },
  {
    "intent": "check if \"blah\" is in string `somestring`",
    "code": "if ('blah' not in somestring):\n    pass"
  },
  {
    "intent": "check if string `needle` is in `haystack`",
    "code": "if (needle in haystack):\n    pass"
  },
  {
    "intent": "check if string \"substring\" is in string",
    "code": "string.find('substring')"
  },
  {
    "intent": "check if string `s` contains \"is\"",
    "code": "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"
  },
  {
    "intent": "extract first and last row of a dataframe `df`",
    "code": "pd.concat([df.head(1), df.tail(1)])"
  },
  {
    "intent": "filter a Django model `MyModel` to have charfield length of max `255`",
    "code": "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"
  },
  {
    "intent": "Filter queryset for all objects in Django model `MyModel` where texts length are greater than `254`",
    "code": "MyModel.objects.filter(text__regex='^.{254}.*')"
  },
  {
    "intent": "count the number of rows with missing values in a pandas dataframe `df`",
    "code": "sum(df.apply(lambda x: sum(x.isnull().values), axis=1) > 0)"
  },
  {
    "intent": "Sorting while preserving order in python",
    "code": "sorted(enumerate(a), key=lambda x: x[1])"
  },
  {
    "intent": "set the font 'Purisa' of size 12 for a canvas' text item `k`",
    "code": "canvas.create_text(x, y, font=('Purisa', 12), text=k)"
  },
  {
    "intent": "create a list containing all values associated with key 'baz' in dictionaries of list `foos` using list comprehension",
    "code": "[y['baz'] for x in foos for y in x['bar']]"
  },
  {
    "intent": "read pandas data frame csv `comma.csv` with extra commas in column specifying string delimiter `'`",
    "code": "df = pd.read_csv('comma.csv', quotechar=\"'\")"
  },
  {
    "intent": "replace string 'in.' with ' in. ' in dataframe `df` column 'a'",
    "code": "df['a'] = df['a'].str.replace('in.', ' in. ')"
  },
  {
    "intent": "Get all indexes of a list `a` where each value is greater than `2`",
    "code": "[i for i in range(len(a)) if a[i] > 2]"
  },
  {
    "intent": "check if a local variable `myVar` exists",
    "code": "('myVar' in locals())"
  },
  {
    "intent": "check if a global variable `myVar` exists",
    "code": "('myVar' in globals())"
  },
  {
    "intent": "check if object `obj` has attribute 'attr_name'",
    "code": "hasattr(obj, 'attr_name')"
  },
  {
    "intent": "check if a local variable 'myVar' exists",
    "code": "if ('myVar' in locals()):\n    pass"
  },
  {
    "intent": "check if a global variable 'myVar' exists",
    "code": "if ('myVar' in globals()):\n    pass"
  },
  {
    "intent": "lambda function that adds two operands",
    "code": "lambda x, y: x + y"
  },
  {
    "intent": "count the number of items in a generator/iterator `it`",
    "code": "sum(1 for i in it)"
  },
  {
    "intent": "get tuples of the corresponding elements from lists `lst` and `lst2`",
    "code": "[(x, lst2[i]) for i, x in enumerate(lst)]"
  },
  {
    "intent": "create tuples containing elements that are at the same index of list `lst` and list `lst2`",
    "code": "[(i, j) for i, j in zip(lst, lst2)]"
  },
  {
    "intent": "get tuples from lists `lst` and `lst2` using list comprehension in python 2",
    "code": "[(lst[i], lst2[i]) for i in range(len(lst))]"
  },
  {
    "intent": "convert hex triplet string `rgbstr` to rgb tuple",
    "code": "struct.unpack('BBB', rgbstr.decode('hex'))"
  },
  {
    "intent": "Check if 3 is not in a list [2, 3, 4]",
    "code": "(3 not in [2, 3, 4])"
  },
  {
    "intent": "Check if tuple (2, 3) is not in a list [(2, 3), (5, 6), (9, 1)]",
    "code": "((2, 3) not in [(2, 3), (5, 6), (9, 1)])"
  },
  {
    "intent": "Check if tuple (2, 3) is not in a list [(2, 7), (7, 3), \"hi\"]",
    "code": "((2, 3) not in [(2, 7), (7, 3), 'hi'])"
  },
  {
    "intent": "Check if 3 is not in the list [4,5,6]",
    "code": "(3 not in [4, 5, 6])"
  },
  {
    "intent": "create a list by appending components from list `a` and reversed list `b` interchangeably",
    "code": "[value for pair in zip(a, b[::-1]) for value in pair]"
  },
  {
    "intent": "delete the last column of numpy array `a` and assign resulting array to `b`",
    "code": "b = np.delete(a, -1, 1)"
  },
  {
    "intent": "commit all the changes after executing a query.",
    "code": "dbb.commit()"
  },
  {
    "intent": "join two dataframes based on values in selected columns",
    "code": "pd.merge(a, b, on=['A', 'B'], how='outer')"
  },
  {
    "intent": "set text color as `red` and background color as `#A3C1DA` in qpushbutton",
    "code": "setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;}')"
  },
  {
    "intent": "find the mean of elements in list `l`",
    "code": "sum(l) / float(len(l))"
  },
  {
    "intent": "Find all the items from a dictionary `D` if the key contains the string `Light`",
    "code": "[(k, v) for k, v in D.items() if 'Light' in k]"
  },
  {
    "intent": "Get a md5 hash from string `thecakeisalie`",
    "code": "k = hashlib.md5('thecakeisalie').hexdigest()"
  },
  {
    "intent": "How to get only the last part of a path in Python?",
    "code": "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"
  },
  {
    "intent": "sort datetime objects `birthdays` by `month` and `day`",
    "code": "birthdays.sort(key=lambda d: (d.month, d.day))"
  },
  {
    "intent": "extract table data from table `rows` using beautifulsoup",
    "code": "[[td.findNext(text=True) for td in tr.findAll('td')] for tr in rows]"
  },
  {
    "intent": "strip the string `.txt` from anywhere in the string `Boat.txt.txt`",
    "code": "\"\"\"Boat.txt.txt\"\"\".replace('.txt', '')"
  },
  {
    "intent": "get a list of the row names from index of a pandas data frame",
    "code": "list(df.index)"
  },
  {
    "intent": "get the row names from index in a pandas data frame",
    "code": "df.index"
  },
  {
    "intent": "create a list of all unique characters in string 'aaabcabccd'",
    "code": "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"
  },
  {
    "intent": "get list of all unique characters in a string 'aaabcabccd'",
    "code": "list(set('aaabcabccd'))"
  },
  {
    "intent": "List of all unique characters in a string?",
    "code": "\"\"\"\"\"\".join(set('aaabcabccd'))"
  },
  {
    "intent": "find rows with non zero values in a subset of columns where `df.dtypes` is not equal to `object` in pandas dataframe",
    "code": "df.loc[(df.loc[:, (df.dtypes != object)] != 0).any(1)]"
  },
  {
    "intent": "upload file with Python Mechanize",
    "code": "br.form.add_file(open(filename), 'text/plain', filename)"
  },
  {
    "intent": "check if  dictionary `d` contains all keys in list `['somekey', 'someotherkey', 'somekeyggg']`",
    "code": "all(word in d for word in ['somekey', 'someotherkey', 'somekeyggg'])"
  },
  {
    "intent": "hide output of subprocess `['espeak', text]`",
    "code": "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"
  },
  {
    "intent": "replace nans by preceding values in pandas dataframe `df`",
    "code": "df.fillna(method='ffill', inplace=True)"
  },
  {
    "intent": "create 4 numbers in range between 1 and 3",
    "code": "print(np.linspace(1, 3, num=4, endpoint=False))"
  },
  {
    "intent": "Create numpy array of `5` numbers starting from `1` with interval of `3`",
    "code": "print(np.linspace(1, 3, num=5))"
  },
  {
    "intent": "create a symlink directory `D:\\\\testdirLink` for directory `D:\\\\testdir` with unicode support using ctypes library",
    "code": "kdll.CreateSymbolicLinkW('D:\\\\testdirLink', 'D:\\\\testdir', 1)"
  },
  {
    "intent": "get a list `slice` of array slices of the first two rows and columns from array `arr`",
    "code": "slice = [arr[i][0:2] for i in range(0, 2)]"
  },
  {
    "intent": "upload uploaded file from path '/upload' to Google cloud storage 'my_bucket' bucket",
    "code": "upload_url = blobstore.create_upload_url('/upload', gs_bucket_name='my_bucket')"
  },
  {
    "intent": "change directory to the directory of a python script",
    "code": "os.chdir(os.path.dirname(__file__))"
  },
  {
    "intent": "call a function with argument list `args`",
    "code": "func(*args)"
  },
  {
    "intent": "split column 'AB' in dataframe `df` into two columns by first whitespace ' '",
    "code": "df['AB'].str.split(' ', 1, expand=True)"
  },
  {
    "intent": "pandas dataframe, how do i split a column 'AB' into two 'A' and 'B' on delimiter ' '",
    "code": "df['A'], df['B'] = df['AB'].str.split(' ', 1).str"
  },
  {
    "intent": "sort list `xs` based on the length of its elements",
    "code": "print(sorted(xs, key=len))"
  },
  {
    "intent": "sort list `xs` in ascending order of length of elements",
    "code": "xs.sort(lambda x, y: cmp(len(x), len(y)))"
  },
  {
    "intent": "sort list of strings `xs` by the length of string",
    "code": "xs.sort(key=lambda s: len(s))"
  },
  {
    "intent": "plot point marker '.' on series `ts`",
    "code": "ts.plot(marker='.')"
  },
  {
    "intent": "get all combination of n binary values",
    "code": "lst = list(itertools.product([0, 1], repeat=n))"
  },
  {
    "intent": "get all combination of n binary values",
    "code": "lst = map(list, itertools.product([0, 1], repeat=n))"
  },
  {
    "intent": "get all combination of 3 binary values",
    "code": "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"
  },
  {
    "intent": "get all combination of 3 binary values",
    "code": "lst = list(itertools.product([0, 1], repeat=3))"
  },
  {
    "intent": "append string 'str' at the beginning of each value in column 'col' of dataframe `df`",
    "code": "df['col'] = 'str' + df['col'].astype(str)"
  },
  {
    "intent": "get a dict of variable names `['some', 'list', 'of', 'vars']` as a string and their values",
    "code": "dict((name, eval(name)) for name in ['some', 'list', 'of', 'vars'])"
  },
  {
    "intent": "add a colorbar to plot `plt` using image `im` on axes `ax`",
    "code": "plt.colorbar(im, ax=ax)"
  },
  {
    "intent": "convert nested list 'Cards' into a flat list",
    "code": "[a for c in Cards for b in c for a in b]"
  },
  {
    "intent": "create a list containing keys of dictionary `d` and sort it alphabetically",
    "code": "sorted(d, key=d.get)"
  },
  {
    "intent": "print the number of occurences of not `none` in a list `lst` in Python 2",
    "code": "print(len([x for x in lst if x is not None]))"
  },
  {
    "intent": "lookup dictionary key `key1` in Django template `json`",
    "code": "{{json.key1}}"
  },
  {
    "intent": "get unique values from the list `['a', 'b', 'c', 'd']`",
    "code": "set(['a', 'b', 'c', 'd'])"
  },
  {
    "intent": "set size of `figure` to landscape A4 i.e. `11.69, 8.27` inches",
    "code": "figure(figsize=(11.69, 8.27))"
  },
  {
    "intent": "get every thing after last `/`",
    "code": "url.rsplit('/', 1)"
  },
  {
    "intent": "get everything after last slash in a url stored in variable 'url'",
    "code": "url.rsplit('/', 1)[-1]"
  },
  {
    "intent": "open file '5_1.txt' in directory `direct`",
    "code": "x_file = open(os.path.join(direct, '5_1.txt'), 'r')"
  },
  {
    "intent": "create a list with the characters of a string `5+6`",
    "code": "list('5+6')"
  },
  {
    "intent": "concatenate a list of numpy arrays `input_list` together into a flattened list of values",
    "code": "np.concatenate(input_list).ravel().tolist()"
  },
  {
    "intent": "convert dictionary `dict` into a flat list",
    "code": "print([y for x in list(dict.items()) for y in x])"
  },
  {
    "intent": "Convert a dictionary `dict` into a list with key and values as list items.",
    "code": "[y for x in list(dict.items()) for y in x]"
  },
  {
    "intent": "get a random record from model 'MyModel' using django's orm",
    "code": "MyModel.objects.order_by('?').first()"
  },
  {
    "intent": "change current working directory to directory 'chapter3'",
    "code": "os.chdir('chapter3')"
  },
  {
    "intent": "change current working directory",
    "code": "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"
  },
  {
    "intent": "change current working directory",
    "code": "os.chdir('.\\\\chapter3')"
  },
  {
    "intent": "create a flat dictionary by summing values associated with similar keys in each dictionary of list `dictlist`",
    "code": "dict((key, sum(d[key] for d in dictList)) for key in dictList[0])"
  },
  {
    "intent": "sort pandas data frame `df` using values from columns `c1` and `c2` in ascending order",
    "code": "df.sort(['c1', 'c2'], ascending=[True, True])"
  },
  {
    "intent": "Converting string lists `s` to float list",
    "code": "floats = [float(x) for x in s.split()]"
  },
  {
    "intent": "Converting string lists `s` to float list",
    "code": "floats = map(float, s.split())"
  },
  {
    "intent": "set labels `[1, 2, 3, 4, 5]` on axis X in plot `plt`",
    "code": "plt.xticks([1, 2, 3, 4, 5])"
  },
  {
    "intent": "read line by line from stdin",
    "code": "for line in fileinput.input():\n    pass"
  },
  {
    "intent": "read line by line from stdin",
    "code": "for line in sys.stdin:\n    pass"
  },
  {
    "intent": "check if string `one` exists in the values of dictionary `d`",
    "code": "'one' in list(d.values())"
  },
  {
    "intent": "Check if value 'one' is among the values of dictionary `d`",
    "code": "'one' in iter(d.values())"
  },
  {
    "intent": "call parent class `Instructor` of child class constructor",
    "code": "super(Instructor, self).__init__(name, year)"
  },
  {
    "intent": "create a dictionary using two lists`x` and `y`",
    "code": "dict(zip(x, y))"
  },
  {
    "intent": "sort a list of dictionaries `a` by dictionary values in descending order",
    "code": "sorted(a, key=lambda i: list(i.values())[0], reverse=True)"
  },
  {
    "intent": "sorting a list of dictionary `a` by values in descending order",
    "code": "sorted(a, key=dict.values, reverse=True)"
  },
  {
    "intent": "Use multiple groupby and agg operations `sum`, `count`, `std` for pandas data frame `df`",
    "code": "df.groupby(level=0).agg(['sum', 'count', 'std'])"
  },
  {
    "intent": "for a dictionary `a`, set default value for key `somekey` as list and append value `bob`  in that key",
    "code": "a.setdefault('somekey', []).append('bob')"
  },
  {
    "intent": "sum values in list of dictionaries `example_list` with key 'gold'",
    "code": "sum(item['gold'] for item in example_list)"
  },
  {
    "intent": "get a sum of all values from key `gold` in a list of dictionary `example_list`",
    "code": "sum([item['gold'] for item in example_list])"
  },
  {
    "intent": "Get all the values in key `gold` summed from a list of dictionary `myLIst`",
    "code": "sum(item['gold'] for item in myLIst)"
  },
  {
    "intent": "writing string 'text to write\\n' to file `f`",
    "code": "f.write('text to write\\n')"
  },
  {
    "intent": "Write a string `My String` to a file `file` including new line character",
    "code": "file.write('My String\\n')"
  },
  {
    "intent": "find consecutive segments from a column 'A' in a pandas data frame 'df'",
    "code": "df.reset_index().groupby('A')['index'].apply(np.array)"
  },
  {
    "intent": "get a relative path of file 'my_file' into variable `fn`",
    "code": "fn = os.path.join(os.path.dirname(__file__), 'my_file')"
  },
  {
    "intent": "retrieve an element from a set `s` without removing it",
    "code": "e = next(iter(s))"
  },
  {
    "intent": "execute a command in the command prompt to list directory contents of the c drive `c:\\\\'",
    "code": "os.system('dir c:\\\\')"
  },
  {
    "intent": "Make a auto scrolled window to the end of the list in gtk",
    "code": "self.treeview.connect('size-allocate', self.treeview_changed)"
  },
  {
    "intent": "check if 3 is inside list `[1, 2, 3]`",
    "code": "3 in [1, 2, 3]"
  },
  {
    "intent": "Represent DateTime object '10/05/2012' with format '%d/%m/%Y' into format '%Y-%m-%d'",
    "code": "datetime.datetime.strptime('10/05/2012', '%d/%m/%Y').strftime('%Y-%m-%d')"
  },
  {
    "intent": "convert a string literal `s` with values `\\\\` to raw string literal",
    "code": "s = s.replace('\\\\', '\\\\\\\\')"
  },
  {
    "intent": "get output of script `proc`",
    "code": "print(proc.communicate()[0])"
  },
  {
    "intent": "create a pandas data frame from list of nested dictionaries `my_list`",
    "code": "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"
  },
  {
    "intent": "delete all columns in  DataFrame `df` that do not hold a non-zero value in its records",
    "code": "df.loc[:, ((df != 0).any(axis=0))]"
  },
  {
    "intent": "sort a multidimensional array `a` by column with index 1",
    "code": "sorted(a, key=lambda x: x[1])"
  },
  {
    "intent": "split string `s` to list conversion by ','",
    "code": "[x.strip() for x in s.split(',')]"
  },
  {
    "intent": "Get a list of items in the list `container` with attribute equal to `value`",
    "code": "items = [item for item in container if item.attribute == value]"
  },
  {
    "intent": "create a file 'filename' with each tuple in the list `mylist` written to a line",
    "code": "open('filename', 'w').write('\\n'.join('%s %s' % x for x in mylist))"
  },
  {
    "intent": "Get multiple matched strings using regex pattern `(?:review: )?(http://url.com/(\\\\d+))\\\\s?`",
    "code": "pattern = re.compile('(?:review: )?(http://url.com/(\\\\d+))\\\\s?', re.IGNORECASE)"
  },
  {
    "intent": "read a text file 'very_Important.txt' into a string variable `str`",
    "code": "str = open('very_Important.txt', 'r').read()"
  },
  {
    "intent": "Return values for column `C` after group by on column `A` and `B` in dataframe `df`",
    "code": "df.groupby(['A', 'B'])['C'].unique()"
  },
  {
    "intent": "read file `fname` line by line into a list `content`",
    "code": "with open(fname) as f:\n    content = f.readlines()"
  },
  {
    "intent": "read file 'filename' line by line into a list `lines`",
    "code": "with open('filename') as f:\n    lines = f.readlines()"
  },
  {
    "intent": "read file 'filename' line by line into a list `lines`",
    "code": "lines = [line.rstrip('\\n') for line in open('filename')]"
  },
  {
    "intent": "read file \"file.txt\" line by line into a list `array`",
    "code": "with open('file.txt', 'r') as ins:\n    array = []\n    for line in ins:\n        array.append(line)"
  },
  {
    "intent": "convert the dataframe column 'col' from string types to datetime types",
    "code": "df['col'] = pd.to_datetime(df['col'])"
  },
  {
    "intent": "get a list of the keys in each dictionary in a dictionary of dictionaries `foo`",
    "code": "[k for d in list(foo.values()) for k in d]"
  },
  {
    "intent": "get user input using message 'Enter name here: ' and insert it to the first placeholder in string 'Hello, {0}, how do you do?'",
    "code": "print('Hello, {0}, how do you do?'.format(input('Enter name here: ')))"
  },
  {
    "intent": "create pandas data frame `df` from txt file `filename.txt` with column `Region Name` and separator `;`",
    "code": "df = pd.read_csv('filename.txt', sep=';', names=['Region Name'])"
  },
  {
    "intent": "Pandas: How can I use the apply() function for a single column?",
    "code": "df['a'] = df['a'].apply(lambda x: x + 1)"
  },
  {
    "intent": "get the platform OS name",
    "code": "platform.system()"
  },
  {
    "intent": "sort list `a` in ascending order based on its elements' float values",
    "code": "a = sorted(a, key=lambda x: float(x))"
  },
  {
    "intent": "finding words in string `s` after keyword 'name'",
    "code": "re.search('name (.*)', s)"
  },
  {
    "intent": "Find all records from collection `collection` without extracting mongo id `_id`",
    "code": "db.collection.find({}, {'_id': False})"
  },
  {
    "intent": "Get all the second values from a list of lists `A`",
    "code": "[row[1] for row in A]"
  },
  {
    "intent": "extract first column from a multi-dimensional array `a`",
    "code": "[row[0] for row in a]"
  },
  {
    "intent": "sort list `['10', '3', '2']` in ascending order based on the integer value of its elements",
    "code": "sorted(['10', '3', '2'], key=int)"
  },
  {
    "intent": "check if file `filename` is descendant of directory '/the/dir/'",
    "code": "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"
  },
  {
    "intent": "check if any element of list `substring_list` are in string `string`",
    "code": "any(substring in string for substring in substring_list)"
  },
  {
    "intent": "construct pandas dataframe from a list of tuples",
    "code": "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"
  },
  {
    "intent": "find and replace 2nd occurrence of word 'cat' by 'Bull' in a sentence 's'",
    "code": "re.sub('^((?:(?!cat).)*cat(?:(?!cat).)*)cat', '\\\\1Bull', s)"
  },
  {
    "intent": "find and replace 2nd occurrence of word 'cat' by 'Bull' in a sentence 's'",
    "code": "re.sub('^((.*?cat.*?){1})cat', '\\\\1Bull', s)"
  },
  {
    "intent": "sort list of strings in list `the_list` by integer suffix",
    "code": "sorted(the_list, key=lambda k: int(k.split('_')[1]))"
  },
  {
    "intent": "sort list of strings `the_list` by integer suffix before \"_\"",
    "code": "sorted(the_list, key=lambda x: int(x.split('_')[1]))"
  },
  {
    "intent": "make a list of lists in which each list `g` are the elements from list `test` which have the same characters up to the first `_` character",
    "code": "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"
  },
  {
    "intent": "How to group similar items in a list?",
    "code": "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"
  },
  {
    "intent": "Load the url `http://www.google.com` in selenium webdriver `driver`",
    "code": "driver.get('http://www.google.com')"
  },
  {
    "intent": "using python's datetime module, get the year that utc-11 is currently in",
    "code": "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"
  },
  {
    "intent": "Get the difference between two lists `[1, 2, 2, 2, 3]` and `[1, 2]` that may have duplicate values",
    "code": "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"
  },
  {
    "intent": "remove tags from a string `mystring`",
    "code": "re.sub('<[^>]*>', '', mystring)"
  },
  {
    "intent": "encode string `data` as `hex`",
    "code": "data.encode('hex')"
  },
  {
    "intent": "filter `Users` by field `userprofile` with level greater than or equal to `0`",
    "code": "User.objects.filter(userprofile__level__gte=0)"
  },
  {
    "intent": "BeautifulSoup find a tag whose id ends with string 'para'",
    "code": "soup.findAll(id=re.compile('para$'))"
  },
  {
    "intent": "select `div` tags whose `id`s begin with `value_xxx_c_1_f_8_a_`",
    "code": "soup.select('div[id^=\"value_xxx_c_1_f_8_a_\"]')"
  },
  {
    "intent": "delete an item `thing` in a list `some_list` if it exists",
    "code": "cleaned_list = [x for x in some_list if x is not thing]"
  },
  {
    "intent": "print \"Please enter something: \" to console, and read user input to `var`",
    "code": "var = input('Please enter something: ')"
  },
  {
    "intent": "append 4 to list `foo`",
    "code": "foo.append(4)"
  },
  {
    "intent": "append a list [8, 7] to list `foo`",
    "code": "foo.append([8, 7])"
  },
  {
    "intent": "insert 77 to index 2 of list `x`",
    "code": "x.insert(2, 77)"
  },
  {
    "intent": "remove white space padding around a saved image `test.png` in matplotlib",
    "code": "plt.savefig('test.png', bbox_inches='tight')"
  },
  {
    "intent": "concatenate lists `listone` and `listtwo`",
    "code": "(listone + listtwo)"
  },
  {
    "intent": "iterate items in lists `listone` and `listtwo`",
    "code": "for item in itertools.chain(listone, listtwo):\n    pass"
  },
  {
    "intent": "create dataframe `males` containing data of dataframe `df` where column `Gender` is equal to 'Male' and column `Year` is equal to 2014",
    "code": "males = df[(df[Gender] == 'Male') & (df[Year] == 2014)]"
  },
  {
    "intent": "print backslash",
    "code": "print('\\\\')"
  },
  {
    "intent": "replace '-' in pandas dataframe `df` with `np.nan`",
    "code": "df.replace('-', np.nan)"
  },
  {
    "intent": "delete column 'column_name' from dataframe `df`",
    "code": "df = df.drop('column_name', 1)"
  },
  {
    "intent": "delete 1st, 2nd and 4th columns from dataframe `df`",
    "code": "df.drop(df.columns[[0, 1, 3]], axis=1)"
  },
  {
    "intent": "delete a column `column_name` without having to reassign from pandas data frame `df`",
    "code": "df.drop('column_name', axis=1, inplace=True)"
  },
  {
    "intent": "disable abbreviation in argparse",
    "code": "parser = argparse.ArgumentParser(allow_abbrev=False)"
  },
  {
    "intent": "extract dictionary values by key 'Feature3' from data frame `df`",
    "code": "feature3 = [d.get('Feature3') for d in df.dic]"
  },
  {
    "intent": "get data of column 'A' and column 'B' in dataframe `df` where column 'A' is equal to 'foo'",
    "code": "df.loc[gb.groups['foo'], ('A', 'B')]"
  },
  {
    "intent": "print '[1, 2, 3]'",
    "code": "print('[%s, %s, %s]' % (1, 2, 3))"
  },
  {
    "intent": "Display `1 2 3` as a list of string",
    "code": "print('[{0}, {1}, {2}]'.format(1, 2, 3))"
  },
  {
    "intent": "get values from a dictionary `my_dict` whose key contains the string `Date`",
    "code": "[v for k, v in list(my_dict.items()) if 'Date' in k]"
  },
  {
    "intent": "Python date string formatting",
    "code": "\"\"\"{0.month}/{0.day}/{0.year}\"\"\".format(my_date)"
  },
  {
    "intent": "drop a single subcolumn 'a' in column 'col1' from a dataframe `df`",
    "code": "df.drop(('col1', 'a'), axis=1)"
  },
  {
    "intent": "dropping all columns named 'a' from a multiindex 'df', across all level.",
    "code": "df.drop('a', level=1, axis=1)"
  },
  {
    "intent": "build dictionary with keys of dictionary `_container` as keys and values of returned value of function `_value` with correlating key as parameter",
    "code": "{_key: _value(_key) for _key in _container}"
  },
  {
    "intent": "click on the text button 'section-select-all' using selenium python",
    "code": "browser.find_element_by_class_name('section-select-all').click()"
  },
  {
    "intent": "combine two dictionaries `d ` and `d1`, concatenate string values with identical `keys`",
    "code": "dict((k, d.get(k, '') + d1.get(k, '')) for k in keys)"
  },
  {
    "intent": "generate unique equal hash for equal dictionaries `a` and `b`",
    "code": "hash(pformat(a)) == hash(pformat(b))"
  },
  {
    "intent": "convert nested list of lists `[['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]` into a list of tuples",
    "code": "list(map(tuple, [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]))"
  },
  {
    "intent": "sum the column `positions` along the  other columns `stock`, `same1`, `same2` in a pandas data frame `df`",
    "code": "df.groupby(['stock', 'same1', 'same2'], as_index=False)['positions'].sum()"
  },
  {
    "intent": "Summing across rows of Pandas Dataframe",
    "code": "df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()"
  },
  {
    "intent": "change string `s` to upper case",
    "code": "s.upper()"
  },
  {
    "intent": "split a string `s` by ';' and convert to a dictionary",
    "code": "dict(item.split('=') for item in s.split(';'))"
  },
  {
    "intent": "Add header `('Cookie', 'cookiename=cookie value')` to mechanize browser `br`",
    "code": "br.addheaders = [('Cookie', 'cookiename=cookie value')]"
  },
  {
    "intent": "set data in column 'value' of dataframe `df` equal to first element of each list",
    "code": "df['value'] = df['value'].str[0]"
  },
  {
    "intent": "get element at index 0 of each list in column 'value' of dataframe `df`",
    "code": "df['value'] = df['value'].str.get(0)"
  },
  {
    "intent": "remove square bracket '[]' from pandas dataframe `df` column 'value'",
    "code": "df['value'] = df['value'].str.strip('[]')"
  },
  {
    "intent": "Get a string with string formatting from dictionary `d`",
    "code": "\"\"\", \"\"\".join(['{}_{}'.format(k, v) for k, v in d.items()])"
  },
  {
    "intent": "Sum of sums of each list, in a list of lists named 'lists'.",
    "code": "sum(sum(x) for x in lists)"
  },
  {
    "intent": "Check whether a numpy array `a` contains a given row `[1, 2]`",
    "code": "any(np.equal(a, [1, 2]).all(1))"
  },
  {
    "intent": "check if all elements in list `mylist` are the same",
    "code": "len(set(mylist)) == 1"
  },
  {
    "intent": "split a string `s` at line breaks `\\r\\n`",
    "code": "[map(int, x.split('\\t')) for x in s.rstrip().split('\\r\\n')]"
  },
  {
    "intent": "sort a dictionary `a` by values that are list type",
    "code": "t = sorted(list(a.items()), key=lambda x: x[1])"
  },
  {
    "intent": "Search for string 'blabla' in txt file 'example.txt'",
    "code": "if ('blabla' in open('example.txt').read()):\n    pass"
  },
  {
    "intent": "Search for string 'blabla' in txt file 'example.txt'",
    "code": "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"
  },
  {
    "intent": "Search for string `blabla` in txt file 'example.txt'",
    "code": "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"
  },
  {
    "intent": "insert string `string1` after each character of `string2`",
    "code": "string2.replace('', string1)[len(string1):-len(string1)]"
  },
  {
    "intent": "getting every possible combination of two elements in a list",
    "code": "list(itertools.combinations([1, 2, 3, 4, 5, 6], 2))"
  },
  {
    "intent": "get a utf-8 string literal representation of byte string `x`",
    "code": "\"\"\"x = {}\"\"\".format(x.decode('utf8')).encode('utf8')"
  },
  {
    "intent": "check if `x` is an integer",
    "code": "isinstance(x, int)"
  },
  {
    "intent": "check if `x` is an integer",
    "code": "(type(x) == int)"
  },
  {
    "intent": "play the wav file 'sound.wav'",
    "code": "winsound.PlaySound('sound.wav', winsound.SND_FILENAME)"
  },
  {
    "intent": "create a list containing the `n` next values of generator `it`",
    "code": "[next(it) for _ in range(n)]"
  },
  {
    "intent": "get list of n next values of a generator `it`",
    "code": "list(itertools.islice(it, 0, n, 1))"
  },
  {
    "intent": "compare two lists in python `a` and `b` and return matches",
    "code": "set(a).intersection(b)"
  },
  {
    "intent": "How can I compare two lists in python and return matches",
    "code": "[i for i, j in zip(a, b) if i == j]"
  },
  {
    "intent": "convert list `data` into a string of its elements",
    "code": "print(''.join(map(str, data)))"
  },
  {
    "intent": "match regex pattern '\\\\$[0-9]+[^\\\\$]*$' on string '$1 off delicious $5 ham.'",
    "code": "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"
  },
  {
    "intent": "import a nested module `c.py` within `b` within `a` with importlib",
    "code": "importlib.import_module('.c', 'a.b')"
  },
  {
    "intent": "import a module 'a.b.c' with importlib.import_module in python 2",
    "code": "importlib.import_module('a.b.c')"
  },
  {
    "intent": "Convert array `a` to numpy array",
    "code": "a = np.array(a)"
  },
  {
    "intent": "Find all `div` tags whose classes has the value `comment-` in a beautiful soup object `soup`",
    "code": "soup.find_all('div', class_=re.compile('comment-'))"
  },
  {
    "intent": "a sequence of empty lists of length `n`",
    "code": "[[] for _ in range(n)]"
  },
  {
    "intent": "create dictionary from list of variables 'foo' and 'bar' already defined",
    "code": "dict((k, globals()[k]) for k in ('foo', 'bar'))"
  },
  {
    "intent": "get two random records from model 'MyModel' in Django",
    "code": "MyModel.objects.order_by('?')[:2]"
  },
  {
    "intent": "Print a dictionary `{'user': {'name': 'Markus'}}` with string formatting",
    "code": "\"\"\"Hello {user[name]}\"\"\".format(**{'user': {'name': 'Markus'}})"
  },
  {
    "intent": "create a dictionary `list_dict` containing each tuple in list `tuple_list` as values and the tuple's first element as the corresponding key",
    "code": "list_dict = {t[0]: t for t in tuple_list}"
  },
  {
    "intent": "Generate a random integer between 0 and 9",
    "code": "randint(0, 9)"
  },
  {
    "intent": "Generate a random integer between `a` and `b`",
    "code": "random.randint(a, b)"
  },
  {
    "intent": "Generate random integers between 0 and 9",
    "code": "print((random.randint(0, 9)))"
  },
  {
    "intent": "reverse a string `a` by 2 characters at a time",
    "code": "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"
  },
  {
    "intent": "transform time series `df` into a pivot table aggregated by column 'Close' using column `df.index.date` as index and values of column `df.index.time` as columns",
    "code": "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"
  },
  {
    "intent": "check if the third element of all the lists in a list \"items\" is equal to zero.",
    "code": "any(item[2] == 0 for item in items)"
  },
  {
    "intent": "Find all the lists from a lists of list 'items' if third element in all sub-lists is '0'",
    "code": "[x for x in items if x[2] == 0]"
  },
  {
    "intent": "sort dictionary of dictionaries `dic` according to the key 'Fisher'",
    "code": "sorted(list(dic.items()), key=lambda x: x[1]['Fisher'], reverse=True)"
  },
  {
    "intent": "plot a data logarithmically in y axis",
    "code": "plt.yscale('log', nonposy='clip')"
  },
  {
    "intent": "extract digits in a simple way from a python string",
    "code": "map(int, re.findall('\\\\d+', s))"
  },
  {
    "intent": "list the contents of a directory '/home/username/www/'",
    "code": "os.listdir('/home/username/www/')"
  },
  {
    "intent": "list all the contents of the directory 'path'.",
    "code": "os.listdir('path')"
  },
  {
    "intent": "merge a pandas data frame `distancesDF` and column `dates` in pandas data frame `datesDF` into single",
    "code": "pd.concat([distancesDF, datesDF.dates], axis=1)"
  },
  {
    "intent": "get value of first index of each element in list `a`",
    "code": "[x[0] for x in a]"
  },
  {
    "intent": "python how to get every first element in 2 dimensional list `a`",
    "code": "[i[0] for i in a]"
  },
  {
    "intent": "remove line breaks from string `textblock` using regex",
    "code": "re.sub('(?<=[a-z])\\\\r?\\\\n', ' ', textblock)"
  },
  {
    "intent": "Open gzip-compressed file encoded as utf-8 'file.gz' in text mode",
    "code": "gzip.open('file.gz', 'rt', encoding='utf-8')"
  },
  {
    "intent": "test if either of strings `a` or `b` are members of the set of strings, `['b', 'a', 'foo', 'bar']`",
    "code": "set(['a', 'b']).issubset(['b', 'a', 'foo', 'bar'])"
  },
  {
    "intent": "Check if all the values in a list `['a', 'b']` are present in another list `['b', 'a', 'foo', 'bar']`",
    "code": "all(x in ['b', 'a', 'foo', 'bar'] for x in ['a', 'b'])"
  },
  {
    "intent": "Remove characters \"!@#$\" from a string `line`",
    "code": "line.translate(None, '!@#$')"
  },
  {
    "intent": "Remove characters \"!@#$\" from a string `line`",
    "code": "line = re.sub('[!@#$]', '', line)"
  },
  {
    "intent": "Remove string \"1\" from string `string`",
    "code": "string.replace('1', '')"
  },
  {
    "intent": "Remove character `char` from a string `a`",
    "code": "a = a.replace(char, '')"
  },
  {
    "intent": "Remove characters in `b` from a string `a`",
    "code": "a = a.replace(char, '')"
  },
  {
    "intent": "Remove characters in '!@#$' from a string `line`",
    "code": "line = line.translate(string.maketrans('', ''), '!@#$')"
  },
  {
    "intent": "binarize the values in columns of list `order` in a pandas data frame",
    "code": "pd.concat([df, pd.get_dummies(df, '', '').astype(int)], axis=1)[order]"
  },
  {
    "intent": "store integer 3, 4, 1 and 2 in a list",
    "code": "[3, 4, 1, 2]"
  },
  {
    "intent": "define global variable `something` with value `bob`",
    "code": "globals()['something'] = 'bob'"
  },
  {
    "intent": "insert spaces before capital letters in string `text`",
    "code": "re.sub('([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', '\\\\1 ', text)"
  },
  {
    "intent": "print unicode string `ex\\xe1mple` in uppercase",
    "code": "print('ex\\xe1mple'.upper())"
  },
  {
    "intent": "get last element of string splitted by '\\\\' from list of strings `list_dirs`",
    "code": "[l.split('\\\\')[-1] for l in list_dirs]"
  },
  {
    "intent": "combine two sequences into a dictionary",
    "code": "dict(zip(keys, values))"
  },
  {
    "intent": "customize the time format in python logging",
    "code": "formatter = logging.Formatter('%(asctime)s;%(levelname)s;%(message)s')"
  },
  {
    "intent": "Replace comma with dot in a string `original_string` using regex",
    "code": "new_string = re.sub('\"(\\\\d+),(\\\\d+)\"', '\\\\1.\\\\2', original_string)"
  },
  {
    "intent": "call a function `otherfunc` inside a bash script `test.sh` using subprocess",
    "code": "subprocess.call('test.sh otherfunc')"
  },
  {
    "intent": "Can a python script execute a function inside a bash script?",
    "code": "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"
  },
  {
    "intent": "remove multiple spaces in a string `foo`",
    "code": "\"\"\" \"\"\".join(foo.split())"
  },
  {
    "intent": "convert decimal 8 to a list of its binary values",
    "code": "list('{0:0b}'.format(8))"
  },
  {
    "intent": "convert decimal integer 8 to a list of its binary values as elements",
    "code": "[int(x) for x in list('{0:0b}'.format(8))]"
  },
  {
    "intent": "convert decimal `8` to binary list",
    "code": "[int(x) for x in bin(8)[2:]]"
  },
  {
    "intent": "get key-value pairs in dictionary `my_dictionary` for all keys in list `my_list` in the order they appear in `my_list`",
    "code": "dict(zip(my_list, map(my_dictionary.get, my_list)))"
  },
  {
    "intent": "cartesian product of `x` and `y` array points into single array of 2d points",
    "code": "numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)"
  },
  {
    "intent": "selenium wait for driver `driver` 60 seconds before throwing a NoSuchElementExceptions exception",
    "code": "driver.implicitly_wait(60)"
  },
  {
    "intent": "selenium webdriver switch to frame 'frameName'",
    "code": "driver.switch_to_frame('frameName')"
  },
  {
    "intent": "format current date to pattern '{%Y-%m-%d %H:%M:%S}'",
    "code": "time.strftime('{%Y-%m-%d %H:%M:%S}')"
  },
  {
    "intent": "sort list `['14:10:01', '03:12:08']`",
    "code": "sorted(['14:10:01', '03:12:08'])"
  },
  {
    "intent": "find all occurrences of regex pattern '(?:\\\\w+(?:\\\\s+\\\\w+)*,\\\\s)+(?:\\\\w+(?:\\\\s\\\\w+)*)' in string `x`",
    "code": "re.findall('(?:\\\\w+(?:\\\\s+\\\\w+)*,\\\\s)+(?:\\\\w+(?:\\\\s\\\\w+)*)', x)"
  },
  {
    "intent": "remove duplicate rows from dataframe `df1` and calculate their frequency",
    "code": "df1.groupby(['key', 'year']).size().reset_index()"
  },
  {
    "intent": "sort dictionary `dictionary` in ascending order by its values",
    "code": "sorted(list(dictionary.items()), key=operator.itemgetter(1))"
  },
  {
    "intent": "Iterate over dictionary `d` in ascending order of values",
    "code": "sorted(iter(d.items()), key=lambda x: x[1])"
  },
  {
    "intent": "iterate over a python dictionary, ordered by values",
    "code": "sorted(list(dictionary.items()), key=lambda x: x[1])"
  },
  {
    "intent": "split 1d array `a` into 2d array at the last element",
    "code": "np.split(a, [-1])"
  },
  {
    "intent": "convert dataframe `df` into a pivot table using column 'order' as index and values of column 'sample' as columns",
    "code": "df.pivot(index='order', columns='sample')"
  },
  {
    "intent": "select all rows from pandas DataFrame 'df' where the value in column 'A' is greater than 1 or less than -1 in column 'B'.",
    "code": "df[(df['A'] > 1) | (df['B'] < -1)]"
  },
  {
    "intent": "Get the zip output as list from the lists `[1, 2, 3]`, `[4, 5, 6]`, `[7, 8, 9]`",
    "code": "[list(a) for a in zip([1, 2, 3], [4, 5, 6], [7, 8, 9])]"
  },
  {
    "intent": "select rows of dataframe `df` whose value for column `A` is `foo`",
    "code": "print(df.loc[df['A'] == 'foo'])"
  },
  {
    "intent": "select rows whose column value in column `column_name` does not equal `some_value` in pandas data frame",
    "code": "df.loc[df['column_name'] != some_value]"
  },
  {
    "intent": "select rows from a dataframe `df` whose value for column `column_name` is not in `some_values`",
    "code": "df.loc[~df['column_name'].isin(some_values)]"
  },
  {
    "intent": "select all rows whose values in a column `column_name` equals a scalar `some_value` in pandas data frame object `df`",
    "code": "df.loc[df['column_name'] == some_value]"
  },
  {
    "intent": "Select rows whose value of the \"B\" column is \"one\" or \"three\" in the DataFrame `df`",
    "code": "print(df.loc[df['B'].isin(['one', 'three'])])"
  },
  {
    "intent": "repeat every character for 7 times in string 'map'",
    "code": "\"\"\"\"\"\".join(map(lambda x: x * 7, 'map'))"
  },
  {
    "intent": "delete an empty directory",
    "code": "os.rmdir()"
  },
  {
    "intent": "recursively delete all contents in directory `path`",
    "code": "shutil.rmtree(path, ignore_errors=False, onerror=None)"
  },
  {
    "intent": "recursively remove folder `name`",
    "code": "os.removedirs(name)"
  },
  {
    "intent": "Add row `['8/19/2014', 'Jun', 'Fly', '98765']` to dataframe `df`",
    "code": "df.loc[len(df)] = ['8/19/2014', 'Jun', 'Fly', '98765']"
  },
  {
    "intent": "list all files in a current directory",
    "code": "glob.glob('*')"
  },
  {
    "intent": "List all the files that doesn't contain the name `hello`",
    "code": "glob.glob('[!hello]*.txt')"
  },
  {
    "intent": "List all the files that matches the pattern `hello*.txt`",
    "code": "glob.glob('hello*.txt')"
  },
  {
    "intent": "evaluate the expression '20<30'",
    "code": "eval('20<30')"
  },
  {
    "intent": "Copy list `old_list` and name it `new_list`",
    "code": "new_list = [x[:] for x in old_list]"
  },
  {
    "intent": "convert scientific notation of variable `a` to decimal",
    "code": "\"\"\"{:.50f}\"\"\".format(float(a[0] / a[1]))"
  },
  {
    "intent": "convert dataframe `df` to integer-type sparse object",
    "code": "df.to_sparse(0)"
  },
  {
    "intent": "display attribute `attr` for each object `obj` in list `my_list_of_objs`",
    "code": "print([obj.attr for obj in my_list_of_objs])"
  },
  {
    "intent": "count the number of True values associated with key 'success' in dictionary `d`",
    "code": "sum(1 if d['success'] else 0 for d in s)"
  },
  {
    "intent": "get the sum of values associated with the key \u2018success\u2019 for a list of dictionaries `s`",
    "code": "sum(d['success'] for d in s)"
  },
  {
    "intent": "get complete path of a module named `os`",
    "code": "imp.find_module('os')[1]"
  },
  {
    "intent": "get logical xor of `a` and `b`",
    "code": "(bool(a) != bool(b))"
  },
  {
    "intent": "get logical xor of `a` and `b`",
    "code": "((a and (not b)) or ((not a) and b))"
  },
  {
    "intent": "get logical xor of `a` and `b`",
    "code": "(bool(a) ^ bool(b))"
  },
  {
    "intent": "get logical xor of `a` and `b`",
    "code": "xor(bool(a), bool(b))"
  },
  {
    "intent": "get the logical xor of two variables `str1` and `str2`",
    "code": "return (bool(str1) ^ bool(str2))"
  },
  {
    "intent": "Sort list `my_list` in alphabetical order based on the values associated with key 'name' of each dictionary in the list",
    "code": "my_list.sort(key=operator.itemgetter('name'))"
  },
  {
    "intent": "split a string `a , b; cdf`  using both commas and semicolons as delimeters",
    "code": "re.split('\\\\s*,\\\\s*|\\\\s*;\\\\s*', 'a , b; cdf')"
  },
  {
    "intent": "Split a string `string` by multiple separators `,` and `;`",
    "code": "[t.strip() for s in string.split(',') for t in s.split(';')]"
  },
  {
    "intent": "make a function `f` that calculates the sum of two integer variables `x` and `y`",
    "code": "f = lambda x, y: x + y"
  },
  {
    "intent": "Create list `instancelist` containing 29 objects of type MyClass",
    "code": "instancelist = [MyClass() for i in range(29)]"
  },
  {
    "intent": "Make a dictionary from list `f` which is in the format of four sets of  \"val, key, val\"",
    "code": "{f[i + 1]: [f[i], f[i + 2]] for i in range(0, len(f), 3)}"
  },
  {
    "intent": "convert bytes string `s`  to an unsigned integer",
    "code": "struct.unpack('>q', s)[0]"
  },
  {
    "intent": "concatenate a series `students` onto a dataframe `marks` with pandas",
    "code": "pd.concat([students, pd.DataFrame(marks)], axis=1)"
  },
  {
    "intent": "Sort list `alist` in ascending order based on each of its elements' attribute `foo`",
    "code": "alist.sort(key=lambda x: x.foo)"
  },
  {
    "intent": "BeautifulSoup select 'div' elements with an id attribute value ending with sub-string '_answer' in HTML parsed string `soup`",
    "code": "soup.select('div[id$=_answer]')"
  },
  {
    "intent": "sympy solve matrix of linear equations `(([1, 1, 1, 1], [1, 1, 2, 3]))` with variables `(x, y, z)`",
    "code": "linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))"
  },
  {
    "intent": "best way to extract subset of key-value pairs with keys matching 'l', 'm', or 'n' from python dictionary object",
    "code": "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"
  },
  {
    "intent": "extract subset of key-value pairs with keys as `('l', 'm', 'n')` from dictionary object `bigdict`",
    "code": "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"
  },
  {
    "intent": "Get items from a dictionary `bigdict` where the keys are present in `('l', 'm', 'n')`",
    "code": "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"
  },
  {
    "intent": "Extract subset of key value pair for keys 'l', 'm', 'n' from `bigdict` in python 3",
    "code": "{k: bigdict[k] for k in ('l', 'm', 'n')}"
  },
  {
    "intent": "Selenium get the entire `driver` page text",
    "code": "driver.page_source"
  },
  {
    "intent": "extracting column `1` and `9` from array `data`",
    "code": "data[:, ([1, 9])]"
  },
  {
    "intent": "remove all square brackets from string 'abcd[e]yth[ac]ytwec'",
    "code": "re.sub('\\\\[.*?\\\\]', '', 'abcd[e]yth[ac]ytwec')"
  },
  {
    "intent": "How can I resize the root window in Tkinter?",
    "code": "root.geometry('500x500')"
  },
  {
    "intent": "find all substrings in string `mystring` composed only of letters `a` and `b` where each `a` is directly preceded and succeeded by `b`",
    "code": "re.findall('\\\\b(?:b+a)+b+\\\\b', mystring)"
  },
  {
    "intent": "convert list `lst` of tuples of floats to list `str_list` of tuples of strings of floats in scientific notation with eight decimal point precision",
    "code": "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"
  },
  {
    "intent": "convert list of sublists `lst` of floats to a list of sublists `str_list` of strings of integers in scientific notation with 8 decimal points",
    "code": "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"
  },
  {
    "intent": "Create a tuple `t` containing first element of each tuple in tuple `s`",
    "code": "t = tuple(x[0] for x in s)"
  },
  {
    "intent": "obtain the current day of the week in a 3 letter format from a datetime object",
    "code": "datetime.datetime.now().strftime('%a')"
  },
  {
    "intent": "get the ASCII value of a character 'a' as an int",
    "code": "ord('a')"
  },
  {
    "intent": "get the ASCII value of a character u'\u3042' as an int",
    "code": "ord('\\u3042')"
  },
  {
    "intent": "get the ASCII value of a character as an int",
    "code": "ord()"
  },
  {
    "intent": "decode JSON string `u` to a dictionary",
    "code": "json.load(u)"
  },
  {
    "intent": "Delete mulitple columns `columnheading1`, `columnheading2` in pandas data frame `yourdf`",
    "code": "yourdf.drop(['columnheading1', 'columnheading2'], axis=1, inplace=True)"
  },
  {
    "intent": "get a list of of elements resulting from splitting user input by commas and stripping white space from each resulting string `s`",
    "code": "[s.strip() for s in input().split(',')]"
  },
  {
    "intent": "create a list containing the digits values from binary string `x` as elements",
    "code": "[int(d) for d in str(bin(x))[2:]]"
  },
  {
    "intent": "get the max string length in list `i`",
    "code": "max(len(word) for word in i)"
  },
  {
    "intent": "get the maximum string length in nested list `i`",
    "code": "len(max(i, key=len))"
  },
  {
    "intent": "execute os command `my_cmd`",
    "code": "os.system(my_cmd)"
  },
  {
    "intent": "sort list `mylist` alphabetically",
    "code": "mylist.sort(key=lambda x: x.lower())"
  },
  {
    "intent": "sort list `mylist` in alphabetical order",
    "code": "mylist.sort(key=str.lower)"
  },
  {
    "intent": "sort a list of strings 'mylist'.",
    "code": "mylist.sort()"
  },
  {
    "intent": "sort a list of strings `list`",
    "code": "list.sort()"
  },
  {
    "intent": "Set multi index on columns 'Company' and 'date' of data frame `df` in pandas.",
    "code": "df.set_index(['Company', 'date'], inplace=True)"
  },
  {
    "intent": "get the attribute `x` from object `your_obj`",
    "code": "getattr(your_obj, x)"
  },
  {
    "intent": "remove first word in string `s`",
    "code": "s.split(' ', 1)[1]"
  },
  {
    "intent": "save xlsxwriter file in 'app/smth1/smth2/Expenses01.xlsx' path and assign to variable `workbook`",
    "code": "workbook = xlsxwriter.Workbook('app/smth1/smth2/Expenses01.xlsx')"
  },
  {
    "intent": "save xlsxwriter file to 'C:/Users/Steven/Documents/demo.xlsx' path",
    "code": "workbook = xlsxwriter.Workbook('C:/Users/Steven/Documents/demo.xlsx')"
  },
  {
    "intent": "change legend size to 'x-small' in upper-left location",
    "code": "pyplot.legend(loc=2, fontsize='x-small')"
  },
  {
    "intent": "change legend font size with matplotlib.pyplot to 6",
    "code": "plot.legend(loc=2, prop={'size': 6})"
  },
  {
    "intent": "split list `l` into `n` sized lists",
    "code": "[l[i:i + n] for i in range(0, len(l), n)]"
  },
  {
    "intent": "split a list `l` into evenly sized chunks `n`",
    "code": "[l[i:i + n] for i in range(0, len(l), n)]"
  },
  {
    "intent": "check if character '-' exists in a dataframe `df` cell 'a'",
    "code": "df['a'].str.contains('-')"
  },
  {
    "intent": "remove all non -word, -whitespace, or -apostrophe characters from string `doesn't this mean it -technically- works?`",
    "code": "re.sub(\"[^\\\\w' ]\", '', \"doesn't this mean it -technically- works?\")"
  },
  {
    "intent": "find all digits between two characters `\\xab` and `\\xbb`in a string `text`",
    "code": "print(re.findall('\\\\d+', '\\n'.join(re.findall('\\xab([\\\\s\\\\S]*?)\\xbb', text))))"
  },
  {
    "intent": "plot data of column 'index' versus column 'A' of dataframe `monthly_mean` after resetting its index",
    "code": "monthly_mean.reset_index().plot(x='index', y='A')"
  },
  {
    "intent": "get the output of a subprocess command `echo \"foo\"` in command line",
    "code": "subprocess.check_output('echo \"foo\"', shell=True)"
  },
  {
    "intent": "Encode each value to 'UTF8' in the list `EmployeeList`",
    "code": "[x.encode('UTF8') for x in EmployeeList]"
  },
  {
    "intent": "combine two columns `foo` and `bar` in a pandas data frame",
    "code": "pandas.concat([df['foo'].dropna(), df['bar'].dropna()]).reindex_like(df)"
  },
  {
    "intent": "generate a list of consecutive integers from 0 to 8",
    "code": "list(range(9))"
  },
  {
    "intent": "convert list `myintegers` into a unicode string",
    "code": "\"\"\"\"\"\".join(chr(i) for i in myintegers)"
  },
  {
    "intent": "inherit from class `Executive`",
    "code": "super(Executive, self).__init__(*args)"
  },
  {
    "intent": "Remove the string value `item` from a list of strings `my_sequence`",
    "code": "[item for item in my_sequence if item != 'item']"
  },
  {
    "intent": "randomly select an item from list `foo`",
    "code": "random.choice(foo)"
  },
  {
    "intent": "check if all of the following items in list `['a', 'b']` are in a list `['a', 'b', 'c']`",
    "code": "set(['a', 'b']).issubset(['a', 'b', 'c'])"
  },
  {
    "intent": "Check if all the items in a list `['a', 'b']` exists in another list `l`",
    "code": "set(['a', 'b']).issubset(set(l))"
  },
  {
    "intent": "set the stdin of the process 'grep f' to be b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'",
    "code": "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"
  },
  {
    "intent": "set the stdin of the process 'grep f' to be 'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'",
    "code": "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"
  },
  {
    "intent": "to convert a list of tuples `list_of_tuples` into list of lists",
    "code": "[list(t) for t in zip(*list_of_tuples)]"
  },
  {
    "intent": "group a list `list_of_tuples` of tuples by values",
    "code": "zip(*list_of_tuples)"
  },
  {
    "intent": "merge pandas dataframe `x` with columns 'a' and 'b' and dataframe `y` with column 'y'",
    "code": "pd.merge(y, x, on='k')[['a', 'b', 'y']]"
  },
  {
    "intent": "Split string with comma (,) and remove whitespace from a string 'my_string'",
    "code": "[item.strip() for item in my_string.split(',')]"
  },
  {
    "intent": "Get all object attributes of object `obj`",
    "code": "print((obj.__dict__))"
  },
  {
    "intent": "Get all object attributes of an object",
    "code": "dir()"
  },
  {
    "intent": "Get all object attributes of an object",
    "code": "dir()"
  },
  {
    "intent": "pygobject center window `window`",
    "code": "window.set_position(Gtk.WindowPosition.CENTER)"
  },
  {
    "intent": "change the size of the sci notation to '30' above the y axis in matplotlib `plt`",
    "code": "plt.rc('font', **{'size': '30'})"
  },
  {
    "intent": "check if datafram `df` has any NaN vlaues",
    "code": "df.isnull().values.any()"
  },
  {
    "intent": "unpack the arguments out of list `params` to function `some_func`",
    "code": "some_func(*params)"
  },
  {
    "intent": "decode encodeuricomponent in GAE",
    "code": "urllib.parse.unquote(h.path.encode('utf-8')).decode('utf-8')"
  },
  {
    "intent": "get proportion of rows in dataframe `trace_df` whose values for column `ratio` are greater than 0",
    "code": "(trace_df['ratio'] > 0).mean()"
  },
  {
    "intent": "convert a set of tuples `queryresult` to a string `emaillist`",
    "code": "emaillist = '\\n'.join(item[0] for item in queryresult)"
  },
  {
    "intent": "convert a set of tuples `queryresult` to a list of strings",
    "code": "[item[0] for item in queryresult]"
  },
  {
    "intent": "convert a list of tuples `queryresult` to a string from the first indexes.",
    "code": "emaillist = '\\n'.join([item[0] for item in queryresult])"
  },
  {
    "intent": "get the widget which has currently the focus in tkinter instance `window2`",
    "code": "print(('focus object class:', window2.focus_get().__class__))"
  },
  {
    "intent": "Initialize a list `a` with `10000` items and each item's value `0`",
    "code": "a = [0] * 10000"
  },
  {
    "intent": "Keep only unique words in list of words `words` and join into string",
    "code": "print(' '.join(sorted(set(words), key=words.index)))"
  },
  {
    "intent": "generate 6 random numbers between 1 and 50",
    "code": "random.sample(range(1, 50), 6)"
  },
  {
    "intent": "generate six unique random numbers in the range of 1 to 49.",
    "code": "random.sample(range(1, 50), 6)"
  },
  {
    "intent": "lowercase keys and values in dictionary `{'My Key': 'My Value'}`",
    "code": "{k.lower(): v.lower() for k, v in list({'My Key': 'My Value'}.items())}"
  },
  {
    "intent": "lowercase all keys and values in dictionary `{'My Key': 'My Value'}`",
    "code": "dict((k.lower(), v) for k, v in {'My Key': 'My Value'}.items())"
  },
  {
    "intent": "Convert each key,value pair in a dictionary `{'My Key': 'My Value'}` to lowercase",
    "code": "dict((k.lower(), v.lower()) for k, v in {'My Key': 'My Value'}.items())"
  },
  {
    "intent": "sorting the lists in list of lists `data`",
    "code": "[sorted(item) for item in data]"
  },
  {
    "intent": "SQLite get a list of column names from cursor object `cursor`",
    "code": "names = list(map(lambda x: x[0], cursor.description))"
  },
  {
    "intent": "get the absolute path of a running python script",
    "code": "os.path.abspath(__file__)"
  },
  {
    "intent": "sort 2d array `matrix` by row with index 1",
    "code": "sorted(matrix, key=itemgetter(1))"
  },
  {
    "intent": "Get all indexes of a letter `e` from a string `word`",
    "code": "[index for index, letter in enumerate(word) if letter == 'e']"
  },
  {
    "intent": "decode utf-8 code `x` into a raw unicode literal",
    "code": "print(str(x).decode('raw_unicode_escape'))"
  },
  {
    "intent": "split string 'abcdefg' into a list of characters",
    "code": "re.findall('\\\\w', 'abcdefg')"
  },
  {
    "intent": "check whether a file `fname` exists",
    "code": "os.path.isfile(fname)"
  },
  {
    "intent": "check whether file \"/path/to/file\" exists",
    "code": "my_file = Path('/path/to/file')\nif my_file.is_file():\n    pass"
  },
  {
    "intent": "check whether file `file_path` exists",
    "code": "os.path.exists(file_path)"
  },
  {
    "intent": "check whether a file \"/etc/password.txt\" exists",
    "code": "print(os.path.isfile('/etc/password.txt'))"
  },
  {
    "intent": "check whether a file \"/etc\" exists",
    "code": "print(os.path.isfile('/etc'))"
  },
  {
    "intent": "check whether a path \"/does/not/exist\" exists",
    "code": "print(os.path.exists('/does/not/exist'))"
  },
  {
    "intent": "check whether a file \"/does/not/exist\" exists",
    "code": "print(os.path.isfile('/does/not/exist'))"
  },
  {
    "intent": "check whether a path \"/etc\" exists",
    "code": "print(os.path.exists('/etc'))"
  },
  {
    "intent": "check whether a path \"/etc/password.txt\" exists",
    "code": "print(os.path.exists('/etc/password.txt'))"
  },
  {
    "intent": "split string \"a;bcd,ef g\" on delimiters ';' and ','",
    "code": "\"\"\"a;bcd,ef g\"\"\".replace(';', ' ').replace(',', ' ').split()"
  },
  {
    "intent": "get a list each value `i` in the implicit tuple `range(3)`",
    "code": "list(i for i in range(3))"
  },
  {
    "intent": "add field names as headers in csv constructor `writer`",
    "code": "writer.writeheader()"
  },
  {
    "intent": "flatten a tuple `l`",
    "code": "[(a, b, c) for a, (b, c) in l]"
  },
  {
    "intent": "convert 3652458 to string represent a 32bit hex number",
    "code": "\"\"\"0x{0:08X}\"\"\".format(3652458)"
  },
  {
    "intent": "convert a python dictionary `d` to a list of tuples",
    "code": "[(v, k) for k, v in list(d.items())]"
  },
  {
    "intent": "convert dictionary of pairs `d` to a list of tuples",
    "code": "[(v, k) for k, v in d.items()]"
  },
  {
    "intent": "convert python 2 dictionary `a` to a list of tuples where the value is the first tuple element and the key is the second tuple element",
    "code": "[(v, k) for k, v in a.items()]"
  },
  {
    "intent": "convert a python dictionary 'a' to a list of tuples",
    "code": "[(k, v) for k, v in a.items()]"
  },
  {
    "intent": "convert a list of hex byte strings `['BB', 'A7', 'F6', '9E']` to a list of hex integers",
    "code": "[int(x, 16) for x in ['BB', 'A7', 'F6', '9E']]"
  },
  {
    "intent": "convert the elements of list `L` from hex byte strings to hex integers",
    "code": "[int(x, 16) for x in L]"
  },
  {
    "intent": "assign values to two variables, `var1` and `var2` from user input response to `'Enter two numbers here: ` split on whitespace",
    "code": "var1, var2 = input('Enter two numbers here: ').split()"
  },
  {
    "intent": "Filter a json from a key-value pair as `{'fixed_key_1': 'foo2'}` in Django",
    "code": "Test.objects.filter(actions__contains=[{'fixed_key_1': 'foo2'}])"
  },
  {
    "intent": "create a list containing a four elements long tuples of permutations of binary values",
    "code": "itertools.product(list(range(2)), repeat=4)"
  },
  {
    "intent": "get yesterday's date as a string in `YYYY-MM-DD` format using timedelta",
    "code": "(datetime.now() - timedelta(1)).strftime('%Y-%m-%d')"
  },
  {
    "intent": "Get the dot product of matrix `[1,0,0,1,0,0]` and matrix `[[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]]`",
    "code": "np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])"
  },
  {
    "intent": "convert date strings in pandas dataframe column`df['date']` to pandas timestamps using the format '%d%b%Y'",
    "code": "df['date'] = pd.to_datetime(df['date'], format='%d%b%Y')"
  },
  {
    "intent": "Importing file `file` from folder '/path/to/application/app/folder'",
    "code": "sys.path.insert(0, '/path/to/application/app/folder')\nimport file"
  },
  {
    "intent": "do a `left` merge of dataframes `x` and `y` on the column `state` and sort by `index`",
    "code": "x.reset_index().merge(y, how='left', on='state', sort=False).sort('index')"
  },
  {
    "intent": "Create a default empty json object if no json is available in request parameter `mydata`",
    "code": "json.loads(request.POST.get('mydata', '{}'))"
  },
  {
    "intent": "get a list of tuples of every three consecutive items in list `[1, 2, 3, 4, 5, 6, 7, 8, 9]`",
    "code": "list(zip(*((iter([1, 2, 3, 4, 5, 6, 7, 8, 9]),) * 3)))"
  },
  {
    "intent": "slice list `[1, 2, 3, 4, 5, 6, 7]` into lists of two elements each",
    "code": "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"
  },
  {
    "intent": "Slicing a list into a list of sub-lists",
    "code": "[input[i:i + n] for i in range(0, len(input), n)]"
  },
  {
    "intent": "Sort list `keys` based on its elements' dot-seperated numbers",
    "code": "keys.sort(key=lambda x: map(int, x.split('.')))"
  },
  {
    "intent": "Sort a list of integers `keys` where each value is in string format",
    "code": "keys.sort(key=lambda x: [int(y) for y in x.split('.')])"
  },
  {
    "intent": "convert a 3d array `img` of dimensions 4x2x3 to a 2d array   of dimensions 3x8",
    "code": "img.transpose(2, 0, 1).reshape(3, -1)"
  },
  {
    "intent": "replacing 'ABC' and 'AB' values in column 'BrandName' of dataframe `df` with 'A'",
    "code": "df['BrandName'].replace(['ABC', 'AB'], 'A')"
  },
  {
    "intent": "replace values `['ABC', 'AB']` in a column 'BrandName' of  pandas dataframe `df` with another value 'A'",
    "code": "df['BrandName'] = df['BrandName'].replace(['ABC', 'AB'], 'A')"
  },
  {
    "intent": "Subtract the mean of each row in dataframe `df` from the corresponding row's elements",
    "code": "df.sub(df.mean(axis=1), axis=0)"
  },
  {
    "intent": "remove all non-alphabet chars from string `s`",
    "code": "\"\"\"\"\"\".join([i for i in s if i.isalpha()])"
  },
  {
    "intent": "split a string `s` into integers",
    "code": "l = (int(x) for x in s.split())"
  },
  {
    "intent": "split a string `42 0` by white spaces.",
    "code": "\"\"\"42 0\"\"\".split()"
  },
  {
    "intent": "How to split a string into integers in Python?",
    "code": "map(int, '42 0'.split())"
  },
  {
    "intent": "get indexes of all true boolean values from a list `bool_list`",
    "code": "[i for i, elem in enumerate(bool_list, 1) if elem]"
  },
  {
    "intent": "group dataframe `data` entries by year value of the date in column 'date'",
    "code": "data.groupby(data['date'].map(lambda x: x.year))"
  },
  {
    "intent": "Get the indices in array `b` of each element appearing in array `a`",
    "code": "np.in1d(b, a).nonzero()[0]"
  },
  {
    "intent": "display current time in readable format",
    "code": "time.strftime('%l:%M%p %z on %b %d, %Y')"
  },
  {
    "intent": "rotate x-axis text labels of plot `ax` 45 degrees",
    "code": "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"
  },
  {
    "intent": "append array of strings `['x', 'x', 'x']` into one string",
    "code": "\"\"\"\"\"\".join(['x', 'x', 'x'])"
  },
  {
    "intent": "retrieve all items in an numpy array 'x' except the item of the index 1",
    "code": "x[(np.arange(x.shape[0]) != 1), :, :]"
  },
  {
    "intent": "pull a value with key 'name' from a json object `item`",
    "code": "print(item['name'])"
  },
  {
    "intent": "read a file from redirected stdin and save to variable `result`",
    "code": "result = sys.stdin.read()"
  },
  {
    "intent": "Get all the texts without tags from beautiful soup object `soup`",
    "code": "\"\"\"\"\"\".join(soup.findAll(text=True))"
  },
  {
    "intent": "extract all rows from dataframe `data` where the value of column 'Value' is True",
    "code": "data[data['Value'] == True]"
  },
  {
    "intent": "removing duplicate characters from a string variable \"foo\"",
    "code": "\"\"\"\"\"\".join(set(foo))"
  },
  {
    "intent": "sort objects in model `Profile` based on Theirs `reputation` attribute",
    "code": "sorted(Profile.objects.all(), key=lambda p: p.reputation)"
  },
  {
    "intent": "flatten a dataframe df to a list",
    "code": "df.values.flatten()"
  },
  {
    "intent": "sort list `users` using values associated with key 'id' according to elements in list `order`",
    "code": "users.sort(key=lambda x: order.index(x['id']))"
  },
  {
    "intent": "sort a python list of dictionaries `users` by a given list `order` of ids 'id' with the desired order",
    "code": "users.sort(key=lambda x: order.index(x['id']))"
  },
  {
    "intent": "request URI '<MY_URI>' and pass authorization token 'TOK:<MY_TOKEN>' to the header",
    "code": "r = requests.get('<MY_URI>', headers={'Authorization': 'TOK:<MY_TOKEN>'})"
  },
  {
    "intent": "un-escape a backslash-escaped string in `Hello,\\\\nworld!`",
    "code": "print('\"Hello,\\\\nworld!\"'.decode('string_escape'))"
  },
  {
    "intent": "match regex pattern 'a*?bc*?' on string 'aabcc' with DOTALL enabled",
    "code": "re.findall('a*?bc*?', 'aabcc', re.DOTALL)"
  },
  {
    "intent": "get second array column length of array `a`",
    "code": "a.shape[1]"
  },
  {
    "intent": "use operations like max/min within a row to a dataframe 'd' in pandas",
    "code": "d.apply(lambda row: min([row['A'], row['B']]) - row['C'], axis=1)"
  },
  {
    "intent": "count number of occurrences of a substring 'ab' in a string \"abcdabcva\"",
    "code": "\"\"\"abcdabcva\"\"\".count('ab')"
  },
  {
    "intent": "get a list of values with key 'key' from a list of dictionaries `l`",
    "code": "[d['key'] for d in l if 'key' in d]"
  },
  {
    "intent": "get a list of values for key 'key' from a list of dictionaries `l`",
    "code": "[d['key'] for d in l]"
  },
  {
    "intent": "get a list of values for key \"key\" from a list of dictionaries in `l`",
    "code": "[d['key'] for d in l]"
  },
  {
    "intent": "order a list of lists `l1` by the first value",
    "code": "l1.sort(key=lambda x: int(x[0]))"
  },
  {
    "intent": "order a list of lists `[[1, 'mike'], [1, 'bob']]` by the first value of individual list",
    "code": "sorted([[1, 'mike'], [1, 'bob']])"
  },
  {
    "intent": "replace a string `Abc` in case sensitive way using maketrans",
    "code": "\"\"\"Abc\"\"\".translate(maketrans('abcABC', 'defDEF'))"
  },
  {
    "intent": "dictionary `d` to string, custom format",
    "code": "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"
  },
  {
    "intent": "how to write a unicode csv in Python 2.7",
    "code": "self.writer.writerow([str(s).encode('utf-8') for s in row])"
  },
  {
    "intent": "clear terminal screen on windows",
    "code": "os.system('cls')"
  },
  {
    "intent": "clear the terminal screen in Linux",
    "code": "os.system('clear')"
  },
  {
    "intent": "execute external commands/script `your_own_script` with csh instead of bash",
    "code": "os.system('tcsh your_own_script')"
  },
  {
    "intent": "execute command 'echo $0' in Z shell",
    "code": "os.system(\"zsh -c 'echo $0'\")"
  },
  {
    "intent": "update a list `l1` dictionaries with a key `count` and value from list `l2`",
    "code": "[dict(d, count=n) for d, n in zip(l1, l2)]"
  },
  {
    "intent": "create a list with the sum of respective elements of the tuples of list `l`",
    "code": "[sum(x) for x in zip(*l)]"
  },
  {
    "intent": "sum each value in a list `l` of tuples",
    "code": "map(sum, zip(*l))"
  },
  {
    "intent": "count the number of non-nan elements in a numpy ndarray matrix `data`",
    "code": "np.count_nonzero(~np.isnan(data))"
  },
  {
    "intent": "Convert each list in list `main_list` into a tuple",
    "code": "map(list, zip(*main_list))"
  },
  {
    "intent": "django get the value of key 'title' from POST request `request` if exists, else return empty string ''",
    "code": "request.POST.get('title', '')"
  },
  {
    "intent": "check if string `test.mp3` ends with one of the strings from a tuple `('.mp3', '.avi')`",
    "code": "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"
  },
  {
    "intent": "split a string 's' by space while ignoring spaces within square braces and quotes.",
    "code": "re.findall('\\\\[[^\\\\]]*\\\\]|\"[^\"]*\"|\\\\S+', s)"
  },
  {
    "intent": "get biggest 3 values from each column of the pandas dataframe `data`",
    "code": "data.apply(lambda x: sorted(x, 3))"
  },
  {
    "intent": "permanently set the current directory to the 'C:/Users/Name/Desktop'",
    "code": "os.chdir('C:/Users/Name/Desktop')"
  },
  {
    "intent": "get all characters between two `$` characters in string `string`",
    "code": "re.findall('\\\\$([^$]*)\\\\$', string)"
  },
  {
    "intent": "getting the string between 2 '$' characters in '$sin (x)$ is an function of x'",
    "code": "re.findall('\\\\$(.*?)\\\\$', '$sin (x)$ is an function of x')"
  },
  {
    "intent": "Format a date object `str_data` into iso fomrat",
    "code": "datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()"
  },
  {
    "intent": "get element at index 0 of first row and element at index 1 of second row in array `A`",
    "code": "A[[0, 1], [0, 1]]"
  },
  {
    "intent": "subset numpy array `a` by column and row, returning the values from the first row, first column and the second row, second column and the third row, first column.",
    "code": "a[np.arange(3), (0, 1, 0)]"
  },
  {
    "intent": "Get a list of all keys from dictionary `dictA` where the number of occurrences of value `duck` in that key is more than `1`",
    "code": "[k for k, v in dictA.items() if v.count('duck') > 1]"
  },
  {
    "intent": "Create sub matrix of a list of lists `[[2, 3, 4], [2, 3, 4], [2, 3, 4]]` (without numpy)",
    "code": "[[2, 3, 4], [2, 3, 4], [2, 3, 4]]"
  },
  {
    "intent": "get an element at index `[1,1]`in a numpy array `arr`",
    "code": "print(arr[1, 1])"
  },
  {
    "intent": "Set colorbar range from `0` to `15` for pyplot object `quadmesh` in matplotlib",
    "code": "quadmesh.set_clim(vmin=0, vmax=15)"
  },
  {
    "intent": "read csv file 'my_file.csv' into numpy array",
    "code": "my_data = genfromtxt('my_file.csv', delimiter=',')"
  },
  {
    "intent": "read csv file 'myfile.csv' into array",
    "code": "df = pd.read_csv('myfile.csv', sep=',', header=None)"
  },
  {
    "intent": "read csv file 'myfile.csv' into array",
    "code": "np.genfromtxt('myfile.csv', delimiter=',')"
  },
  {
    "intent": "read csv file 'myfile.csv' into array",
    "code": "np.genfromtxt('myfile.csv', delimiter=',', dtype=None)"
  },
  {
    "intent": "read the first line of a string `my_string`",
    "code": "my_string.splitlines()[0]"
  },
  {
    "intent": "How do I read the first line of a string?",
    "code": "my_string.split('\\n', 1)[0]"
  },
  {
    "intent": "generate a list from a pandas dataframe `df` with the column name and column values",
    "code": "df.values.tolist()"
  },
  {
    "intent": "Replace repeated instances of a character '*' with a single instance in a string 'text'",
    "code": "re.sub('\\\\*\\\\*+', '*', text)"
  },
  {
    "intent": "replace repeated instances of \"*\" with a single instance of \"*\"",
    "code": "re.sub('\\\\*+', '*', text)"
  },
  {
    "intent": "multiply values of dictionary `dict` with their respective values in dictionary `dict2`",
    "code": "dict((k, v * dict2[k]) for k, v in list(dict1.items()) if k in dict2)"
  },
  {
    "intent": "Get a random string of length `length`",
    "code": "return ''.join(random.choice(string.lowercase) for i in range(length))"
  },
  {
    "intent": "Get total number of values in a nested dictionary `food_colors`",
    "code": "sum(len(x) for x in list(food_colors.values()))"
  },
  {
    "intent": "count all elements in a nested dictionary `food_colors`",
    "code": "sum(len(v) for v in food_colors.values())"
  },
  {
    "intent": "apply logical operator 'AND' to all elements in list `a_list`",
    "code": "all(a_list)"
  },
  {
    "intent": "removing vowel characters 'aeiouAEIOU' from string `text`",
    "code": "\"\"\"\"\"\".join(c for c in text if c not in 'aeiouAEIOU')"
  },
  {
    "intent": "Divide elements in list `a` from elements at the same index in list `b`",
    "code": "[(x / y) for x, y in zip(a, b)]"
  },
  {
    "intent": "match regex 'abc(de)fg(123)' on string 'abcdefg123 and again abcdefg123'",
    "code": "re.findall('abc(de)fg(123)', 'abcdefg123 and again abcdefg123')"
  },
  {
    "intent": "apply function `log2` to the grouped values by 'type' in dataframe `df`",
    "code": "df.groupby('type').apply(lambda x: np.mean(np.log2(x['v'])))"
  },
  {
    "intent": "get geys of dictionary `my_dict` that contain any values from list `lst`",
    "code": "[key for key, value in list(my_dict.items()) if set(value).intersection(lst)]"
  },
  {
    "intent": "get list of keys in dictionary `my_dict` whose values contain values from list `lst`",
    "code": "[key for item in lst for key, value in list(my_dict.items()) if item in value]"
  },
  {
    "intent": "Sum elements of tuple `b` to their respective elements of each tuple in list `a`",
    "code": "c = [[(i + j) for i, j in zip(e, b)] for e in a]"
  },
  {
    "intent": "get the common prefix from comparing two absolute paths '/usr/var' and '/usr/var2/log'",
    "code": "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"
  },
  {
    "intent": "get relative path of path '/usr/var' regarding path '/usr/var/log/'",
    "code": "print(os.path.relpath('/usr/var/log/', '/usr/var'))"
  },
  {
    "intent": "filter dataframe `grouped` where the length of each group `x` is bigger than 1",
    "code": "grouped.filter(lambda x: len(x) > 1)"
  },
  {
    "intent": "sort dictionary of lists `myDict` by the third item in each list",
    "code": "sorted(list(myDict.items()), key=lambda e: e[1][2])"
  },
  {
    "intent": "Format string `hello {name}, how are you {name}, welcome {name}` to be interspersed by `name` three times, specifying the value as `john` only once",
    "code": "\"\"\"hello {name}, how are you {name}, welcome {name}\"\"\".format(name='john')"
  },
  {
    "intent": "reorder indexed rows `['Z', 'C', 'A']` based on a list in pandas data frame `df`",
    "code": "df.reindex(['Z', 'C', 'A'])"
  },
  {
    "intent": "check if any values in a list `input_list` is a list",
    "code": "any(isinstance(el, list) for el in input_list)"
  },
  {
    "intent": "get the size of list `items`",
    "code": "len(items)"
  },
  {
    "intent": "get the size of a list `[1,2,3]`",
    "code": "len([1, 2, 3])"
  },
  {
    "intent": "get the size of object `items`",
    "code": "items.__len__()"
  },
  {
    "intent": "function to get the size of object",
    "code": "len()"
  },
  {
    "intent": "get the size of list `s`",
    "code": "len(s)"
  },
  {
    "intent": "sort each row in a pandas dataframe `df` in descending order",
    "code": "df.sort(axis=1, ascending=False)"
  },
  {
    "intent": "Fastest way to sort each row in a pandas dataframe",
    "code": "df.sort(df.columns, axis=1, ascending=False)"
  },
  {
    "intent": "get count of rows in each series grouped by column 'col5' and column 'col2' of dataframe `df`",
    "code": "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"
  },
  {
    "intent": "check if string 'x' is  in list `['x', 'd', 'a', 's', 'd', 's']`",
    "code": "'x' in ['x', 'd', 'a', 's', 'd', 's']"
  },
  {
    "intent": "Delete an item with key \"key\" from `mydict`",
    "code": "mydict.pop('key', None)"
  },
  {
    "intent": "Delete an item with key `key` from `mydict`",
    "code": "del mydict[key]"
  },
  {
    "intent": "Delete an item with key `key` from `mydict`",
    "code": "try:\n    del mydict[key]\nexcept KeyError:\n    pass\ntry:\n    del mydict[key]\nexcept KeyError:\n    pass"
  },
  {
    "intent": "specify multiple positional arguments with argparse",
    "code": "parser.add_argument('input', nargs='+')"
  },
  {
    "intent": "Plot using the color code `#112233` in matplotlib pyplot",
    "code": "pyplot.plot(x, y, color='#112233')"
  },
  {
    "intent": "strip html from strings",
    "code": "re.sub('<[^<]+?>', '', text)"
  },
  {
    "intent": "align values in array `b` to the order of corresponding values in array `a`",
    "code": "a[np.in1d(a, b)]"
  },
  {
    "intent": "split string \"jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,\" on the first occurrence of delimiter '='",
    "code": "\"\"\"jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,\"\"\".split('=', 1)"
  },
  {
    "intent": "print numbers in list `list` with precision of 3 decimal places",
    "code": "print('[%s]' % ', '.join('%.3f' % val for val in list))"
  },
  {
    "intent": "format print output of list of floats `l` to print only up to 3 decimal points",
    "code": "print('[' + ', '.join('%5.3f' % v for v in l) + ']')"
  },
  {
    "intent": "print a list of floating numbers `l` using string formatting",
    "code": "print([('%5.3f' % val) for val in l])"
  },
  {
    "intent": "Change the current directory one level up",
    "code": "os.chdir('..')"
  },
  {
    "intent": "print a unicode string `text`",
    "code": "print(text.encode('windows-1252'))"
  },
  {
    "intent": "convert string representation `s2` of binary string rep of integer to floating point number",
    "code": "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"
  },
  {
    "intent": "convert a binary '-0b1110' to a float number",
    "code": "float(int('-0b1110', 0))"
  },
  {
    "intent": "convert a binary `b8` to a float number",
    "code": "struct.unpack('d', b8)[0]"
  },
  {
    "intent": "plot a bar graph from the column 'color' in the DataFrame 'df'",
    "code": "df.colour.value_counts().plot(kind='bar')"
  },
  {
    "intent": "plot categorical data in series `df` with kind `bar` using pandas and matplotlib",
    "code": "df.groupby('colour').size().plot(kind='bar')"
  },
  {
    "intent": "strip and split each line `line` on white spaces",
    "code": "line.strip().split(' ')"
  },
  {
    "intent": "apply functions `mean` and `std` to each column in dataframe `df`",
    "code": "df.groupby(lambda idx: 0).agg(['mean', 'std'])"
  },
  {
    "intent": "sort dictionary `tag_weight` in reverse order by values cast to integers",
    "code": "sorted(list(tag_weight.items()), key=lambda x: int(x[1]), reverse=True)"
  },
  {
    "intent": "find the largest integer less than `x`",
    "code": "int(math.ceil(x)) - 1"
  },
  {
    "intent": "check if the string `myString` is empty",
    "code": "if (not myString):\n    pass"
  },
  {
    "intent": "check if string `some_string` is empty",
    "code": "if (not some_string):\n    pass"
  },
  {
    "intent": "check if string `my_string` is empty",
    "code": "if (not my_string):\n    pass"
  },
  {
    "intent": "check if string `my_string` is empty",
    "code": "if some_string:\n    pass"
  },
  {
    "intent": "iterate over a dictionary `d` in sorted order",
    "code": "it = iter(sorted(d.items()))"
  },
  {
    "intent": "iterate over a dictionary `d` in sorted order",
    "code": "for (key, value) in sorted(d.items()):\n    pass"
  },
  {
    "intent": "iterate over a dictionary `dict` in sorted order",
    "code": "return sorted(dict.items())"
  },
  {
    "intent": "iterate over a dictionary `dict` in sorted order",
    "code": "return iter(sorted(dict.items()))"
  },
  {
    "intent": "iterate over a dictionary `foo` in sorted order",
    "code": "for (k, v) in sorted(foo.items()):\n    pass"
  },
  {
    "intent": "iterate over a dictionary `foo` sorted by the key",
    "code": "for k in sorted(foo.keys()):\n    pass"
  },
  {
    "intent": "assign the index of the last occurence of `x` in list `s` to the variable `last`",
    "code": "last = len(s) - s[::-1].index(x) - 1"
  },
  {
    "intent": "concatenating values in `list1` to a string",
    "code": "str1 = ''.join(list1)"
  },
  {
    "intent": "concatenating values in list `L` to a string, separate by space",
    "code": "' '.join((str(x) for x in L))"
  },
  {
    "intent": "concatenating values in `list1` to a string",
    "code": "str1 = ''.join((str(e) for e in list1))"
  },
  {
    "intent": "concatenating values in list `L` to a string",
    "code": "makeitastring = ''.join(map(str, L))"
  },
  {
    "intent": "remove None value from list `L`",
    "code": "[x for x in L if x is not None]"
  },
  {
    "intent": "select a random element from array `[1, 2, 3]`",
    "code": "random.choice([1, 2, 3])"
  },
  {
    "intent": "creating a 5x6 matrix filled with `None` and save it as `x`",
    "code": "x = [[None for _ in range(5)] for _ in range(6)]"
  },
  {
    "intent": "create a new 2D array with 2 random rows from array `A`",
    "code": "A[(np.random.choice(A.shape[0], 2, replace=False)), :]"
  },
  {
    "intent": "create a new 2 dimensional array containing two random rows from array `A`",
    "code": "A[(np.random.randint(A.shape[0], size=2)), :]"
  },
  {
    "intent": "combining rows in pandas by adding their values",
    "code": "df.groupby(df.index).sum()"
  },
  {
    "intent": "find all `owl:Class` tags by parsing xml with namespace",
    "code": "root.findall('{http://www.w3.org/2002/07/owl#}Class')"
  },
  {
    "intent": "generate a random string of length `x`  containing lower cased ASCII letters",
    "code": "\"\"\"\"\"\".join(random.choice(string.lowercase) for x in range(X))"
  },
  {
    "intent": "add a path `/path/to/2014_07_13_test` to system path",
    "code": "sys.path.append('/path/to/2014_07_13_test')"
  },
  {
    "intent": "round number `x` to nearest integer",
    "code": "int(round(x))"
  },
  {
    "intent": "round number `h` to nearest integer",
    "code": "h = int(round(h))"
  },
  {
    "intent": "round number 32.268907563 up to 3 decimal points",
    "code": "round(32.268907563, 3)"
  },
  {
    "intent": "round number `value` up to `significantDigit` decimal places",
    "code": "round(value, significantDigit)"
  },
  {
    "intent": "round number 1.0005 up to 3 decimal places",
    "code": "round(1.0005, 3)"
  },
  {
    "intent": "round number 2.0005 up to 3 decimal places",
    "code": "round(2.0005, 3)"
  },
  {
    "intent": "round number 3.0005 up to 3 decimal places",
    "code": "round(3.0005, 3)"
  },
  {
    "intent": "round number 4.0005 up to 3 decimal places",
    "code": "round(4.0005, 3)"
  },
  {
    "intent": "round number 8.005 up to 2 decimal places",
    "code": "round(8.005, 2)"
  },
  {
    "intent": "round number 7.005 up to 2 decimal places",
    "code": "round(7.005, 2)"
  },
  {
    "intent": "round number 6.005 up to 2 decimal places",
    "code": "round(6.005, 2)"
  },
  {
    "intent": "round number 1.005 up to 2 decimal places",
    "code": "round(1.005, 2)"
  },
  {
    "intent": "fill missing value in one column 'Cat1' with the value of another column 'Cat2'",
    "code": "df['Cat1'].fillna(df['Cat2'])"
  },
  {
    "intent": "convert the argument `date` with string formatting in logging",
    "code": "logging.info('date=%s', date)"
  },
  {
    "intent": "Log message of level 'info' with value of `date` in the message",
    "code": "logging.info('date={}'.format(date))"
  },
  {
    "intent": "convert values in dictionary `d` into integers",
    "code": "{k: int(v) for k, v in d.items()}"
  },
  {
    "intent": "sum elements at the same index of each list in list `lists`",
    "code": "map(sum, zip(*lists))"
  },
  {
    "intent": "Convert a string `s` containing hex bytes to a hex string",
    "code": "s.decode('hex')"
  },
  {
    "intent": "convert a string `s` containing hex bytes to a hex string",
    "code": "binascii.a2b_hex(s)"
  },
  {
    "intent": "send data 'HTTP/1.0 200 OK\\r\\n\\r\\n' to socket `connection`",
    "code": "connection.send('HTTP/1.0 200 established\\r\\n\\r\\n')"
  },
  {
    "intent": "send data 'HTTP/1.0 200 OK\\r\\n\\r\\n' to socket `connection`",
    "code": "connection.send('HTTP/1.0 200 OK\\r\\n\\r\\n')"
  },
  {
    "intent": "set the value of cell `['x']['C']` equal to 10 in dataframe `df`",
    "code": "df['x']['C'] = 10"
  },
  {
    "intent": "normalize the dataframe `df` along the rows",
    "code": "np.sqrt(np.square(df).sum(axis=1))"
  },
  {
    "intent": "remove identical items from list `my_list` and sort it alphabetically",
    "code": "sorted(set(my_list))"
  },
  {
    "intent": "find the index of the element with the maximum value from a list 'a'.",
    "code": "max(enumerate(a), key=lambda x: x[1])[0]"
  },
  {
    "intent": "create a list where each element is a value of the key 'Name' for each dictionary `d` in the list `thisismylist`",
    "code": "[d['Name'] for d in thisismylist]"
  },
  {
    "intent": "create a list of tuples with the values of keys 'Name' and 'Age' from each dictionary `d` in the list `thisismylist`",
    "code": "[(d['Name'], d['Age']) for d in thisismylist]"
  },
  {
    "intent": "grab one random item from a database `model` in django/postgresql",
    "code": "model.objects.all().order_by('?')[0]"
  },
  {
    "intent": "run python script 'script2.py' from another python script, passing in 1 as an argument",
    "code": "os.system('script2.py 1')"
  },
  {
    "intent": "python regex for hyphenated words in `text`",
    "code": "re.findall('\\\\w+(?:-\\\\w+)+', text)"
  },
  {
    "intent": "create variable key/value pairs with argparse",
    "code": "parser.add_argument('--conf', nargs=2, action='append')"
  },
  {
    "intent": "Get `3` unique items from a list",
    "code": "random.sample(list(range(1, 16)), 3)"
  },
  {
    "intent": "sort list `strings` in alphabetical order based on the letter after percent character `%` in each element",
    "code": "strings.sort(key=lambda str: re.sub('.*%(.).*', '\\\\1', str))"
  },
  {
    "intent": "sort a list of strings `strings` based on regex match",
    "code": "strings.sort(key=lambda str: re.sub('.*%', '', str))"
  },
  {
    "intent": "Create list `listy` containing 3 empty lists",
    "code": "listy = [[] for i in range(3)]"
  },
  {
    "intent": "sort numpy float array `A` column by column",
    "code": "A = np.array(sorted(A, key=tuple))"
  },
  {
    "intent": "Get a list from two strings `12345` and `ab` with values as each character concatenated",
    "code": "[(x + y) for x in '12345' for y in 'ab']"
  },
  {
    "intent": "trim string \" Hello \"",
    "code": "' Hello '.strip()"
  },
  {
    "intent": "trim string `myString `",
    "code": "myString.strip()"
  },
  {
    "intent": "Trimming a string \" Hello \"",
    "code": "' Hello '.strip()"
  },
  {
    "intent": "Trimming a string \" Hello\"",
    "code": "' Hello'.strip()"
  },
  {
    "intent": "Trimming a string \"Bob has a cat\"",
    "code": "'Bob has a cat'.strip()"
  },
  {
    "intent": "Trimming a string \"          Hello        \"",
    "code": "'          Hello        '.strip()"
  },
  {
    "intent": "Trimming a string `str`",
    "code": "str.strip()"
  },
  {
    "intent": "Trimming \"\\n\" from string `myString`",
    "code": "myString.strip('\\n')"
  },
  {
    "intent": "left trimming \"\\n\\r\" from string `myString`",
    "code": "myString.lstrip('\\n\\r')"
  },
  {
    "intent": "right trimming \"\\n\\t\" from string `myString`",
    "code": "myString.rstrip('\\n\\t')"
  },
  {
    "intent": "Trimming a string \"  Hello\\n\" by space",
    "code": "'  Hello\\n'.strip(' ')"
  },
  {
    "intent": "sort a list of tuples 'unsorted' based on two elements, second and third",
    "code": "sorted(unsorted, key=lambda element: (element[1], element[2]))"
  },
  {
    "intent": "decode string `content` to UTF-8 code",
    "code": "print(content.decode('utf8'))"
  },
  {
    "intent": "find the index of the maximum value in the array `arr` where the boolean condition in array `cond` is true",
    "code": "np.ma.array(np.tile(arr, 2).reshape(2, 3), mask=~cond).argmax(axis=1)"
  },
  {
    "intent": "convert a dataframe `df`'s column `ID` into datetime, after removing the first and last 3 letters",
    "code": "pd.to_datetime(df.ID.str[1:-3])"
  },
  {
    "intent": "read CSV file 'my.csv' into a dataframe `df` with datatype of float for column 'my_column' considering character 'n/a' as NaN value",
    "code": "df = pd.read_csv('my.csv', dtype={'my_column': np.float64}, na_values=['n/a'])"
  },
  {
    "intent": "convert nan values to \u2018n/a\u2019 while reading rows from a csv `read_csv` with pandas",
    "code": "df = pd.read_csv('my.csv', na_values=['n/a'])"
  },
  {
    "intent": "create a list containing all cartesian products of elements in list `a`",
    "code": "list(itertools.product(*a))"
  },
  {
    "intent": "remove uppercased characters in string `s`",
    "code": "re.sub('[^A-Z]', '', s)"
  },
  {
    "intent": "convert string '2011221' into a DateTime object using format '%Y%W%w'",
    "code": "datetime.strptime('2011221', '%Y%W%w')"
  },
  {
    "intent": "read file 'myfile' using encoding 'iso-8859-1'",
    "code": "codecs.open('myfile', 'r', 'iso-8859-1').read()"
  },
  {
    "intent": "create a list containing elements from list `list` that are predicate to function `f`",
    "code": "[f(x) for x in list]"
  },
  {
    "intent": "regex matching 5-digit substrings not enclosed with digits in `s`",
    "code": "re.findall('(?<!\\\\d)\\\\d{5}(?!\\\\d)', s)"
  },
  {
    "intent": "create a list containing elements of list `a` if the sum of the element is greater than 10",
    "code": "[item for item in a if sum(item) > 10]"
  },
  {
    "intent": "convert currency string `dollars` to decimal `cents_int`",
    "code": "cents_int = int(round(float(dollars.strip('$')) * 100))"
  },
  {
    "intent": "remove letters from string `example_line` if the letter exist in list `bad_chars`",
    "code": "\"\"\"\"\"\".join(dropwhile(lambda x: x in bad_chars, example_line[::-1]))[::-1]"
  },
  {
    "intent": "Creating an empty list `l`",
    "code": "l = []"
  },
  {
    "intent": "Creating an empty list `l`",
    "code": "l = list()"
  },
  {
    "intent": "Creating an empty list",
    "code": "list()"
  },
  {
    "intent": "Creating an empty list",
    "code": "[]"
  },
  {
    "intent": "properly quit a program",
    "code": "sys.exit(0)"
  },
  {
    "intent": "add string `-` in `4th` position of a string `s`",
    "code": "s[:4] + '-' + s[4:]"
  },
  {
    "intent": "append 3 lists in one list",
    "code": "[[] for i in range(3)]"
  },
  {
    "intent": "Initialize a list of empty lists `a` of size 3",
    "code": "a = [[] for i in range(3)]"
  },
  {
    "intent": "request URL `url` using http header `{'referer': my_referer}`",
    "code": "requests.get(url, headers={'referer': my_referer})"
  },
  {
    "intent": "set the y axis range to `0, 1000` in subplot using pylab",
    "code": "pylab.ylim([0, 1000])"
  },
  {
    "intent": "convert a column of list in series `s` to dummies",
    "code": "pd.get_dummies(s.apply(pd.Series).stack()).sum(level=0)"
  },
  {
    "intent": "Finding the largest delta between two integers in a list in python",
    "code": "max(abs(x - y) for x, y in zip(values[1:], values[:-1]))"
  },
  {
    "intent": "convert a hex string `x` to string",
    "code": "y = str(int(x, 16))"
  },
  {
    "intent": "check if string `a` is an integer",
    "code": "a.isdigit()"
  },
  {
    "intent": "function to check if a string is a number",
    "code": "isdigit()"
  },
  {
    "intent": "check if string `b` is a number",
    "code": "b.isdigit()"
  },
  {
    "intent": "pandas read comma-separated CSV file `s` and skip commented lines starting with '#'",
    "code": "pd.read_csv(StringIO(s), sep=',', comment='#')"
  },
  {
    "intent": "pandas: change all the values of a column 'Date' into \"int(str(x)[-4:])\"",
    "code": "df['Date'] = df['Date'].apply(lambda x: int(str(x)[-4:]))"
  },
  {
    "intent": "sum a list of numbers `list_of_nums`",
    "code": "sum(list_of_nums)"
  },
  {
    "intent": "Get an item from a list of dictionary `lst` which has maximum value in the key `score` using lambda function",
    "code": "max(lst, key=lambda x: x['score'])"
  },
  {
    "intent": "BeautifulSoup find all tags with attribute 'name' equal to 'description'",
    "code": "soup.findAll(attrs={'name': 'description'})"
  },
  {
    "intent": "remove all spaces from a string converted from dictionary `{'a': 1, 'b': 'as df'}`",
    "code": "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"
  },
  {
    "intent": "convert dictionary `dict` into a string formatted object",
    "code": "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"
  },
  {
    "intent": "concatenate items from list `parts` into a string starting from the second element",
    "code": "\"\"\"\"\"\".join(parts[1:])"
  },
  {
    "intent": "insert a character ',' into a string in front of '+' character in second part of the string",
    "code": "\"\"\",+\"\"\".join(c.rsplit('+', 1))"
  },
  {
    "intent": "delete all rows in a numpy array `a` where any value in a row is zero `0`",
    "code": "a[np.all(a != 0, axis=1)]"
  },
  {
    "intent": "extract only alphabetic characters from a string `your string`",
    "code": "\"\"\" \"\"\".join(re.split('[^a-zA-Z]*', 'your string'))"
  },
  {
    "intent": "Extract only characters from a string as a list",
    "code": "re.split('[^a-zA-Z]*', 'your string')"
  },
  {
    "intent": "get the union set from list of lists `results_list`",
    "code": "results_union = set().union(*results_list)"
  },
  {
    "intent": "get the union of values in list of lists `result_list`",
    "code": "return list(set(itertools.chain(*result_list)))"
  },
  {
    "intent": "check if a numpy array `a1` contains any element of another array `a2`",
    "code": "np.any(np.in1d(a1, a2))"
  },
  {
    "intent": "removing control characters from a string `s`",
    "code": "return ''.join(ch for ch in s if unicodedata.category(ch)[0] != 'C')"
  },
  {
    "intent": "Compare if each value in list `a` is less than respective index value in list `b`",
    "code": "all(i < j for i, j in zip(a, b))"
  },
  {
    "intent": "python selenium click on button '.button.c_button.s_button'",
    "code": "driver.find_element_by_css_selector('.button.c_button.s_button').click()"
  },
  {
    "intent": "python selenium click on button",
    "code": "driver.find_element_by_css_selector('.button .c_button .s_button').click()"
  },
  {
    "intent": "kill a process `make.exe` from python script on windows",
    "code": "os.system('taskkill /im make.exe')"
  },
  {
    "intent": "SQLAlchemy select records of columns of table `my_table` in addition to current date column",
    "code": "print(select([my_table, func.current_date()]).execute())"
  },
  {
    "intent": "remove duplicate characters from string 'ffffffbbbbbbbqqq'",
    "code": "re.sub('([a-z])\\\\1+', '\\\\1', 'ffffffbbbbbbbqqq')"
  },
  {
    "intent": "remove periods inbetween capital letters that aren't immediately preceeded by word character(s) in a string `s` using regular expressions",
    "code": "re.sub('(?<!\\\\w)([A-Z])\\\\.', '\\\\1', s)"
  },
  {
    "intent": "Get a list of strings `split_text` with fixed chunk size `n` from a string `the_list`",
    "code": "split_list = [the_list[i:i + n] for i in range(0, len(the_list), n)]"
  },
  {
    "intent": "match string 'this is my string' with regex '\\\\b(this|string)\\\\b'\r\nthen replace it with regex '<markup>\\\\1</markup>'",
    "code": "re.sub('\\\\b(this|string)\\\\b', '<markup>\\\\1</markup>', 'this is my string')"
  },
  {
    "intent": "output data of the first 7 columns of Pandas dataframe",
    "code": "pandas.set_option('display.max_columns', 7)"
  },
  {
    "intent": "Display maximum output data of columns in dataframe `pandas` that will fit into the screen",
    "code": "pandas.set_option('display.max_columns', None)"
  },
  {
    "intent": "set the value in column 'B' to NaN if the corresponding value in column 'A' is equal to 0 in pandas dataframe `df`",
    "code": "df.ix[df.A == 0, 'B'] = np.nan"
  },
  {
    "intent": "Selecting Element \"//li/label/input\" followed by text \"polishpottery\" with Selenium WebDriver `driver`",
    "code": "driver.find_element_by_xpath(\"//li/label/input[contains(..,'polishpottery')]\")"
  },
  {
    "intent": "Sort a list of dictionaries `mylist` by keys \"weight\" and \"factor\"",
    "code": "mylist.sort(key=operator.itemgetter('weight', 'factor'))"
  },
  {
    "intent": "ordering a list of dictionaries `mylist` by elements 'weight' and 'factor'",
    "code": "mylist.sort(key=lambda d: (d['weight'], d['factor']))"
  },
  {
    "intent": "Convert a list of lists `lol` to a dictionary with key as second value of a list and value as list itself",
    "code": "{x[1]: x for x in lol}"
  },
  {
    "intent": "sort keys of dictionary 'd' based on their values",
    "code": "sorted(d, key=lambda k: d[k][1])"
  },
  {
    "intent": "round 123 to 100",
    "code": "int(round(123, -2))"
  },
  {
    "intent": "create file 'x' if file 'x' does not exist",
    "code": "fd = os.open('x', os.O_WRONLY | os.O_CREAT | os.O_EXCL)"
  },
  {
    "intent": "get a list of last trailing words from another list  of strings`Original_List`",
    "code": "new_list = [x.split()[-1] for x in Original_List]"
  },
  {
    "intent": "Reverse a string 'hello world'",
    "code": "'hello world'[::(-1)]"
  },
  {
    "intent": "Reverse list `s`",
    "code": "s[::(-1)]"
  },
  {
    "intent": "Reverse string 'foo'",
    "code": "''.join(reversed('foo'))"
  },
  {
    "intent": "Reverse a string `string`",
    "code": "''.join(reversed(string))"
  },
  {
    "intent": "Reverse a string \"foo\"",
    "code": "'foo'[::(-1)]"
  },
  {
    "intent": "Reverse a string `a_string`",
    "code": "a_string[::(-1)]"
  },
  {
    "intent": "Reverse a string `a_string`",
    "code": "def reversed_string(a_string):\n    return a_string[::(-1)]"
  },
  {
    "intent": "Reverse a string `s`",
    "code": "''.join(reversed(s))"
  },
  {
    "intent": "generate a string of numbers separated by comma which is divisible by `4` with remainder `1` or `2`.",
    "code": "\"\"\",\"\"\".join(str(i) for i in range(100) if i % 4 in (1, 2))"
  },
  {
    "intent": "convert list `lst` of key, value pairs into a dictionary",
    "code": "dict([(e[0], int(e[1])) for e in lst])"
  },
  {
    "intent": "sorting a list of tuples `list_of_tuples` where each tuple is reversed",
    "code": "sorted(list_of_tuples, key=lambda tup: tup[::-1])"
  },
  {
    "intent": "sorting a list of tuples `list_of_tuples` by second key",
    "code": "sorted(list_of_tuples, key=lambda tup: tup[1])"
  },
  {
    "intent": "Concatenating two one-dimensional NumPy arrays 'a' and 'b'.",
    "code": "numpy.concatenate([a, b])"
  },
  {
    "intent": "writing items in list `thelist` to file `thefile`",
    "code": "for item in thelist:\n    thefile.write(('%s\\n' % item))"
  },
  {
    "intent": "writing items in list `thelist` to file `thefile`",
    "code": "for item in thelist:\n    pass"
  },
  {
    "intent": "serialize `itemlist` to file `outfile`",
    "code": "pickle.dump(itemlist, outfile)"
  },
  {
    "intent": "writing items in list `itemlist` to file `outfile`",
    "code": "outfile.write('\\n'.join(itemlist))"
  },
  {
    "intent": "Update a user's name as `Bob Marley` having id `123` in SQLAlchemy",
    "code": "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"
  },
  {
    "intent": "send cookies `cookie` in a post request to url 'http://wikipedia.org' with the python requests library",
    "code": "r = requests.post('http://wikipedia.org', cookies=cookie)"
  },
  {
    "intent": "insert directory 'libs' at the 0th index of current directory",
    "code": "sys.path.insert(0, 'libs')"
  },
  {
    "intent": "get current date and time",
    "code": "datetime.datetime.now()"
  },
  {
    "intent": "get current time",
    "code": "datetime.datetime.now().time()"
  },
  {
    "intent": "get current time in pretty format",
    "code": "strftime('%Y-%m-%d %H:%M:%S', gmtime())"
  },
  {
    "intent": "get current time in string format",
    "code": "str(datetime.now())"
  },
  {
    "intent": "get current time",
    "code": "datetime.datetime.time(datetime.datetime.now())"
  },
  {
    "intent": "convert hex '\\xff' to integer",
    "code": "ord('\\xff')"
  },
  {
    "intent": "identify duplicated rows in columns 'PplNum' and 'RoomNum' with additional column in dataframe `df`",
    "code": "df.groupby(['PplNum', 'RoomNum']).cumcount() + 1"
  },
  {
    "intent": "get current utc time",
    "code": "datetime.utcnow()"
  },
  {
    "intent": "move last item of array `a` to the first position",
    "code": "a[-1:] + a[:-1]"
  },
  {
    "intent": "Convert dataframe `df` to a pivot table using column 'year', 'month', and 'item' as indexes",
    "code": "df.set_index(['year', 'month', 'item']).unstack(level=-1)"
  },
  {
    "intent": "run a pivot with a multi-index `year` and `month` in a pandas data frame",
    "code": "df.pivot_table(values='value', index=['year', 'month'], columns='item')"
  },
  {
    "intent": "print a rational number `3/2`",
    "code": "print('\\n\\x1b[4m' + '3' + '\\x1b[0m' + '\\n2')"
  },
  {
    "intent": "What is the best way to sort list with custom sorting parameters in Python?",
    "code": "li1.sort(key=lambda x: not x.startswith('b.'))"
  },
  {
    "intent": "iterate backwards from 10 to 0",
    "code": "range(10, 0, -1)"
  },
  {
    "intent": "get value of first child of xml node `name`",
    "code": "name[0].firstChild.nodeValue"
  },
  {
    "intent": "start a new thread for `myfunction` with parameters 'MyStringHere' and 1",
    "code": "thread.start_new_thread(myfunction, ('MyStringHere', 1))"
  },
  {
    "intent": "start a new thread for `myfunction` with parameters 'MyStringHere' and 1",
    "code": "thread.start_new_thread(myfunction, ('MyStringHere', 1))"
  },
  {
    "intent": "get index of the first biggest element in list `a`",
    "code": "a.index(max(a))"
  },
  {
    "intent": "replace periods `.` that are not followed by periods or spaces with a period and a space `. `",
    "code": "re.sub('\\\\.(?=[^ .])', '. ', para)"
  },
  {
    "intent": "convert a string `a` of letters embedded in squared brackets into embedded lists",
    "code": "[i.split() for i in re.findall('\\\\[([^\\\\[\\\\]]+)\\\\]', a)]"
  },
  {
    "intent": "extract dictionary `d` from list `a` where the value associated with the key 'name' of dictionary `d` is equal to 'pluto'",
    "code": "[d for d in a if d['name'] == 'pluto']"
  },
  {
    "intent": "extract dictionary from list of dictionaries based on a key's value.",
    "code": "[d for d in a if d['name'] == 'pluto']"
  },
  {
    "intent": "Retrieve list of values from dictionary 'd'",
    "code": "list(d.values())"
  },
  {
    "intent": "replace occurrences of two whitespaces or more with one whitespace ' ' in string `s`",
    "code": "re.sub(' +', ' ', s)"
  },
  {
    "intent": "Change the mode of file 'my_script.sh' to permission number 484",
    "code": "os.chmod('my_script.sh', 484)"
  },
  {
    "intent": "write pandas dataframe `df` to the file 'c:\\\\data\\\\t.csv' without row names",
    "code": "df.to_csv('c:\\\\data\\\\t.csv', index=False)"
  },
  {
    "intent": "remove all words which contains number from a string `words` using regex",
    "code": "re.sub('\\\\w*\\\\d\\\\w*', '', words).strip()"
  },
  {
    "intent": "control the keyboard and mouse with dogtail in linux",
    "code": "dogtail.rawinput.click(100, 100)"
  },
  {
    "intent": "parse date string '2009/05/13 19:19:30 -0400' using format '%Y/%m/%d %H:%M:%S %z'",
    "code": "datetime.strptime('2009/05/13 19:19:30 -0400', '%Y/%m/%d %H:%M:%S %z')"
  },
  {
    "intent": "Get the position of a regex match for word `is` in a string `String`",
    "code": "re.search('\\\\bis\\\\b', String).start()"
  },
  {
    "intent": "Get the position of a regex match `is` in a string `String`",
    "code": "re.search('is', String).start()"
  },
  {
    "intent": "input an integer tuple from user",
    "code": "tuple(map(int, input().split(',')))"
  },
  {
    "intent": "input a tuple of integers from user",
    "code": "tuple(int(x.strip()) for x in input().split(','))"
  },
  {
    "intent": "replace unicode character '\\u2022' in string 'str' with '*'",
    "code": "str.decode('utf-8').replace('\\u2022', '*').encode('utf-8')"
  },
  {
    "intent": "replace unicode characters ''\\u2022' in string 'str' with '*'",
    "code": "str.decode('utf-8').replace('\\u2022', '*')"
  },
  {
    "intent": "convert ndarray with shape 3x3 to array",
    "code": "np.zeros((3, 3)).ravel()"
  },
  {
    "intent": "get os name",
    "code": "import platform\nplatform.system()"
  },
  {
    "intent": "get os version",
    "code": "import platform\nplatform.release()"
  },
  {
    "intent": "get the name of the OS",
    "code": "print(os.name)"
  },
  {
    "intent": "What is the most pythonic way to exclude elements of a list that start with a specific character?",
    "code": "[x for x in my_list if not x.startswith('#')]"
  },
  {
    "intent": "replace fields delimited by braces {} in string \"Day old bread, 50% sale {0}\" with string 'today'",
    "code": "\"\"\"Day old bread, 50% sale {0}\"\"\".format('today')"
  },
  {
    "intent": "Get a minimum value from a list of tuples `list` with values of type `string` and `float` with nan",
    "code": "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"
  },
  {
    "intent": "Find average of a nested list `a`",
    "code": "a = [(sum(x) / len(x)) for x in zip(*a)]"
  },
  {
    "intent": "Log info message 'Log message' with attributes `{'app_name': 'myapp'}`",
    "code": "logging.info('Log message', extra={'app_name': 'myapp'})"
  },
  {
    "intent": "replace values of dataframe `df` with True if numeric",
    "code": "df.applymap(lambda x: isinstance(x, (int, float)))"
  },
  {
    "intent": "sort list `l` based on its elements' digits",
    "code": "sorted(l, key=lambda x: int(re.search('\\\\d+', x).group(0)))"
  },
  {
    "intent": "close the window in tkinter",
    "code": "self.root.destroy()"
  },
  {
    "intent": "get mean of columns `2, 5, 6, 7, 8` for all rows in dataframe `df`",
    "code": "df.iloc[:, ([2, 5, 6, 7, 8])].mean(axis=1)"
  },
  {
    "intent": "filter dataframe `df` by sub-level index '0630' in pandas",
    "code": "df[df.index.map(lambda x: x[1].endswith('0630'))]"
  },
  {
    "intent": "flask-sqlalchemy delete row `page`",
    "code": "db.session.delete(page)"
  },
  {
    "intent": "Format a string `u'Andr\\xc3\\xa9'` that has unicode characters",
    "code": "\"\"\"\"\"\".join(chr(ord(c)) for c in 'Andr\\xc3\\xa9')"
  },
  {
    "intent": "convert a unicode 'Andr\\xc3\\xa9' to a string",
    "code": "\"\"\"\"\"\".join(chr(ord(c)) for c in 'Andr\\xc3\\xa9').decode('utf8')"
  },
  {
    "intent": "list all files in directory \".\"",
    "code": "for (dirname, dirnames, filenames) in os.walk('.'):\n    for subdirname in dirnames:\n        print(os.path.join(dirname, subdirname))\n    for filename in filenames:\n        pass"
  },
  {
    "intent": "list all files in directory `path`",
    "code": "os.listdir(path)"
  },
  {
    "intent": "rename file `dir` to `dir` + '!'",
    "code": "os.rename(dir, dir + '!')"
  },
  {
    "intent": "Insert a character `-` after every two elements in a string `s`",
    "code": "\"\"\"-\"\"\".join(a + b for a, b in zip(s[::2], s[1::2]))"
  },
  {
    "intent": "printing numbers rounding up to third decimal place",
    "code": "print('%.3f' % 3.1415)"
  },
  {
    "intent": "add variable `var` to key 'f' of first element in JSON data `data`",
    "code": "data[0]['f'] = var"
  },
  {
    "intent": "get the path of module `a_module`",
    "code": "print(a_module.__file__)"
  },
  {
    "intent": "get the path of the current python module",
    "code": "print(os.getcwd())"
  },
  {
    "intent": "get the path of the python module `amodule`",
    "code": "path = os.path.abspath(amodule.__file__)"
  },
  {
    "intent": "fill list `myList` with 4 0's",
    "code": "self.myList.extend([0] * (4 - len(self.myList)))"
  },
  {
    "intent": "drop duplicate indexes in a pandas data frame `df`",
    "code": "df[~df.index.duplicated()]"
  },
  {
    "intent": "unpack elements of list `i` as arguments into function `foo`",
    "code": "foo(*i)"
  },
  {
    "intent": "generate list of numbers in specific format using string formatting precision.",
    "code": "[('%.2d' % i) for i in range(16)]"
  },
  {
    "intent": "sort dictionary `mydict` in descending order based on the sum of each value in it",
    "code": "sorted(iter(mydict.items()), key=lambda tup: sum(tup[1]), reverse=True)[:3]"
  },
  {
    "intent": "get top `3` items from a dictionary `mydict` with largest sum of values",
    "code": "heapq.nlargest(3, iter(mydict.items()), key=lambda tup: sum(tup[1]))"
  },
  {
    "intent": "get index of character 'b' in list '['a', 'b']'",
    "code": "['a', 'b'].index('b')"
  },
  {
    "intent": "set font size of axis legend of plot `plt` to 'xx-small'",
    "code": "plt.setp(legend.get_title(), fontsize='xx-small')"
  },
  {
    "intent": "Python: Convert a string to an integer",
    "code": "int('  23  ')"
  },
  {
    "intent": "extract the 2nd elements from a list of tuples",
    "code": "[x[1] for x in elements]"
  },
  {
    "intent": "get the opposite diagonal of a numpy array `array`",
    "code": "np.diag(np.rot90(array))"
  },
  {
    "intent": "flatten list of tuples `a`",
    "code": "list(chain.from_iterable(a))"
  },
  {
    "intent": "substitute two or more whitespace characters with character '|' in string `line`",
    "code": "re.sub('\\\\s{2,}', '|', line.strip())"
  },
  {
    "intent": "print float `a` with two decimal points",
    "code": "print(('%.2f' % a))"
  },
  {
    "intent": "print float `a` with two decimal points",
    "code": "print(('{0:.2f}'.format(a)))"
  },
  {
    "intent": "print float `a` with two decimal points",
    "code": "print(('{0:.2f}'.format(round(a, 2))))"
  },
  {
    "intent": "print float `a` with two decimal points",
    "code": "print(('%.2f' % round(a, 2)))"
  },
  {
    "intent": "limit float 13.9499999 to two decimal points",
    "code": "('%.2f' % 13.9499999)"
  },
  {
    "intent": "limit float 3.14159 to two decimal points",
    "code": "('%.2f' % 3.14159)"
  },
  {
    "intent": "limit float 13.949999999999999 to two decimal points",
    "code": "float('{0:.2f}'.format(13.95))"
  },
  {
    "intent": "limit float 13.949999999999999 to two decimal points",
    "code": "'{0:.2f}'.format(13.95)"
  },
  {
    "intent": "load a tsv file `c:/~/trainSetRel3.txt` into a pandas data frame",
    "code": "DataFrame.from_csv('c:/~/trainSetRel3.txt', sep='\\t')"
  },
  {
    "intent": "set UTC offset by 9 hrs ahead for date '2013/09/11 00:17'",
    "code": "dateutil.parser.parse('2013/09/11 00:17 +0900')"
  },
  {
    "intent": "pass a list of parameters `((1, 2, 3),) to sql queue 'SELECT * FROM table WHERE column IN %s;'",
    "code": "cur.mogrify('SELECT * FROM table WHERE column IN %s;', ((1, 2, 3),))"
  },
  {
    "intent": "sum all elements of two-dimensions list `[[1, 2, 3, 4], [2, 4, 5, 6]]`]",
    "code": "sum([sum(x) for x in [[1, 2, 3, 4], [2, 4, 5, 6]]])"
  },
  {
    "intent": "Retrieve an arbitrary value from dictionary `dict`",
    "code": "next(iter(dict.values()))"
  },
  {
    "intent": "access an arbitrary value from dictionary `dict`",
    "code": "next(iter(list(dict.values())))"
  },
  {
    "intent": "group dataframe `df` by columns 'Month' and 'Fruit'",
    "code": "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"
  },
  {
    "intent": "sort list `mylist` of tuples by arbitrary key from list `order`",
    "code": "sorted(mylist, key=lambda x: order.index(x[1]))"
  },
  {
    "intent": "sort a list of dictionary `persons` according to the key `['passport']['birth_info']['date']`",
    "code": "sorted(persons, key=lambda x: x['passport']['birth_info']['date'])"
  },
  {
    "intent": "remove the fragment identifier `#something` from a url `http://www.address.com/something#something`",
    "code": "urlparse.urldefrag('http://www.address.com/something#something')"
  },
  {
    "intent": "download to a directory '/path/to/dir/filename.ext' from source 'http://example.com/file.ext'",
    "code": "urllib.request.urlretrieve('http://example.com/file.ext', '/path/to/dir/filename.ext')"
  },
  {
    "intent": "remove all duplicates from a list of sets `L`",
    "code": "list(set(frozenset(item) for item in L))"
  },
  {
    "intent": "remove duplicates from a list of sets 'L'",
    "code": "[set(item) for item in set(frozenset(item) for item in L)]"
  },
  {
    "intent": "terminate process `p`",
    "code": "p.terminate()"
  },
  {
    "intent": "delete all values in a list `mylist`",
    "code": "del mylist[:]"
  },
  {
    "intent": "throw an error window in python in windows",
    "code": "ctypes.windll.user32.MessageBoxW(0, 'Error', 'Error', 0)"
  },
  {
    "intent": "remove empty strings from list `str_list`",
    "code": "str_list = list([_f for _f in str_list if _f])"
  },
  {
    "intent": "remove newlines and whitespace from string `yourstring`",
    "code": "re.sub('[\\\\ \\\\n]{2,}', '', yourstring)"
  },
  {
    "intent": "remove the last dot and all text beyond it in string `s`",
    "code": "re.sub('\\\\.[^.]+$', '', s)"
  },
  {
    "intent": "remove elements from an array `A` that are in array `B`",
    "code": "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"
  },
  {
    "intent": "Write column 'sum' of DataFrame `a` to csv file 'test.csv'",
    "code": "a.to_csv('test.csv', cols=['sum'])"
  },
  {
    "intent": "call a Python script \"test2.py\"",
    "code": "exec(compile(open('test2.py').read(), 'test2.py', 'exec'))"
  },
  {
    "intent": "call a Python script \"test1.py\"",
    "code": "subprocess.call('test1.py', shell=True)"
  },
  {
    "intent": "sort a zipped list `zipped` using lambda function",
    "code": "sorted(zipped, key=lambda x: x[1])"
  },
  {
    "intent": "How do I sort a zipped list in Python?",
    "code": "zipped.sort(key=lambda t: t[1])"
  },
  {
    "intent": "sort a dictionary `y` by value then by key",
    "code": "sorted(list(y.items()), key=lambda x: (x[1], x[0]), reverse=True)"
  },
  {
    "intent": "using beautifulsoup to select div blocks within html `soup`",
    "code": "soup.find_all('div', class_='crBlock ')"
  },
  {
    "intent": "remove elements from list `centroids` the indexes of which are in array `index`",
    "code": "[element for i, element in enumerate(centroids) if i not in index]"
  },
  {
    "intent": "list duplicated elements in two lists `listA` and `listB`",
    "code": "list(set(listA) & set(listB))"
  },
  {
    "intent": "download \"http://randomsite.com/file.gz\" from http and save as \"file.gz\"",
    "code": "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"
  },
  {
    "intent": "download file from http url \"http://randomsite.com/file.gz\" and save as \"file.gz\"",
    "code": "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"
  },
  {
    "intent": "download file from http url `file_url`",
    "code": "file_name = wget.download(file_url)"
  },
  {
    "intent": "set an array of unicode characters `[u'\\xe9', u'\\xe3', u'\\xe2']` as labels in Matplotlib `ax`",
    "code": "ax.set_yticklabels(['\\xe9', '\\xe3', '\\xe2'])"
  },
  {
    "intent": "get a list of all integer points in a `dim` dimensional hypercube with coordinates from `-x` to `y` for all dimensions",
    "code": "list(itertools.product(list(range(-x, y)), repeat=dim))"
  },
  {
    "intent": "convert unicode string `s` into string literals",
    "code": "print(s.encode('unicode_escape'))"
  },
  {
    "intent": "how to format a list of arguments `my_args` into a string",
    "code": "'Hello %s' % ', '.join(my_args)"
  },
  {
    "intent": "search and split string 'aaa bbb ccc ddd eee fff' by delimiter '(ddd)'",
    "code": "re.split('(ddd)', 'aaa bbb ccc ddd eee fff', 1)"
  },
  {
    "intent": "regex search and split string 'aaa bbb ccc ddd eee fff' by delimiter '(d(d)d)'",
    "code": "re.split('(d(d)d)', 'aaa bbb ccc ddd eee fff', 1)"
  },
  {
    "intent": "convert a list of dictionaries `d` to pandas data frame",
    "code": "pd.DataFrame(d)"
  },
  {
    "intent": "split string \"This is a string\" into words that do not contain whitespaces",
    "code": "\"\"\"This is a string\"\"\".split()"
  },
  {
    "intent": "split string \"This     is a     string\" into words that does not contain whitespaces",
    "code": "\"\"\"This     is a     string\"\"\".split()"
  },
  {
    "intent": "python pandas: apply a function with arguments to a series",
    "code": "my_series.apply(your_function, args=(2, 3, 4), extra_kw=1)"
  },
  {
    "intent": "remove all duplicate items from a list `lseperatedOrblist`",
    "code": "woduplicates = list(set(lseperatedOrblist))"
  },
  {
    "intent": "sum of product of combinations in a list `l`",
    "code": "sum([(i * j) for i, j in list(itertools.combinations(l, 2))])"
  },
  {
    "intent": "regular expression for validating string 'user' containing a sequence of characters ending with '-' followed by any number of digits.",
    "code": "re.compile('{}-\\\\d*'.format(user))"
  },
  {
    "intent": "convert all of the items in a list `lst` to float",
    "code": "[float(i) for i in lst]"
  },
  {
    "intent": "multiply all items in a list `[1, 2, 3, 4, 5, 6]` together",
    "code": "from functools import reduce\nreduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])"
  },
  {
    "intent": "write a tuple of tuples `A` to a csv file using python",
    "code": "writer.writerow(A)"
  },
  {
    "intent": "Write all tuple of tuples `A` at once into csv file",
    "code": "writer.writerows(A)"
  },
  {
    "intent": "python, format string \"{} %s {}\" to have 'foo' and 'bar' in the first and second positions",
    "code": "\"\"\"{} %s {}\"\"\".format('foo', 'bar')"
  },
  {
    "intent": "Truncate `\\r\\n` from each string in a list of string `example`",
    "code": "example = [x.replace('\\r\\n', '') for x in example]"
  },
  {
    "intent": "split elements of a list `l` by '\\t'",
    "code": "[i.partition('\\t')[-1] for i in l if '\\t' in i]"
  },
  {
    "intent": "search for regex pattern 'Test(.*)print' in string `testStr` including new line character '\\n'",
    "code": "re.search('Test(.*)print', testStr, re.DOTALL)"
  },
  {
    "intent": "find button that is in li class `next` and assign it to variable `next`",
    "code": "next = driver.find_element_by_css_selector('li.next>a')"
  },
  {
    "intent": "get the  size of file 'C:\\\\Python27\\\\Lib\\\\genericpath.py'",
    "code": "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"
  },
  {
    "intent": "return a string from a regex match with pattern '<img.*?>' in string 'line'",
    "code": "imtag = re.match('<img.*?>', line).group(0)"
  },
  {
    "intent": "Rename a folder `Joe Blow` to `Blow, Joe`",
    "code": "os.rename('Joe Blow', 'Blow, Joe')"
  },
  {
    "intent": "find overlapping matches from a string `hello` using regex",
    "code": "re.findall('(?=(\\\\w\\\\w))', 'hello')"
  },
  {
    "intent": "convert 173 to binary string",
    "code": "bin(173)"
  },
  {
    "intent": "convert binary string '01010101111' to integer",
    "code": "int('01010101111', 2)"
  },
  {
    "intent": "convert binary string '010101' to integer",
    "code": "int('010101', 2)"
  },
  {
    "intent": "convert binary string '0b0010101010' to integer",
    "code": "int('0b0010101010', 2)"
  },
  {
    "intent": "convert 21 to binary string",
    "code": "bin(21)"
  },
  {
    "intent": "convert binary string '11111111' to integer",
    "code": "int('11111111', 2)"
  },
  {
    "intent": "delete all digits in string `s` that are not directly attached to a word character",
    "code": "re.sub('$\\\\d+\\\\W+|\\\\b\\\\d+\\\\b|\\\\W+\\\\d+$', '', s)"
  },
  {
    "intent": "delete digits at the end of string `s`",
    "code": "re.sub('\\\\b\\\\d+\\\\b', '', s)"
  },
  {
    "intent": "Delete self-contained digits from string `s`",
    "code": "s = re.sub('^\\\\d+\\\\s|\\\\s\\\\d+\\\\s|\\\\s\\\\d+$', ' ', s)"
  },
  {
    "intent": "truncate string `s` up to character ':'",
    "code": "s.split(':', 1)[1]"
  },
  {
    "intent": "print a string `s` by splitting with comma `,`",
    "code": "print(s.split(','))"
  },
  {
    "intent": "Create list  by splitting string `mystring` using \",\" as delimiter",
    "code": "mystring.split(',')"
  },
  {
    "intent": "remove parentheses only around single words in a string `s` using regex",
    "code": "re.sub('\\\\((\\\\w+)\\\\)', '\\\\1', s)"
  },
  {
    "intent": "webbrowser open url `url`",
    "code": "webbrowser.open_new(url)"
  },
  {
    "intent": "webbrowser open url 'http://example.com'",
    "code": "webbrowser.open('http://example.com')"
  },
  {
    "intent": "change the background colour of the button `pushbutton` to red",
    "code": "self.pushButton.setStyleSheet('background-color: red')"
  },
  {
    "intent": "apply a list of functions named 'functions' over a list of values named 'values'",
    "code": "[x(y) for x, y in zip(functions, values)]"
  },
  {
    "intent": "modify the width of a text control as `300` keeping default height in wxpython",
    "code": "wx.TextCtrl(self, -1, size=(300, -1))"
  },
  {
    "intent": "display a grayscale image from array of pixels `imageArray`",
    "code": "imshow(imageArray, cmap='Greys_r')"
  },
  {
    "intent": "replace all the nan values with 0 in a pandas dataframe `df`",
    "code": "df.fillna(0)"
  },
  {
    "intent": "export a table dataframe `df` in pyspark to csv 'mycsv.csv'",
    "code": "df.toPandas().to_csv('mycsv.csv')"
  },
  {
    "intent": "Write DataFrame `df` to csv file 'mycsv.csv'",
    "code": "df.write.csv('mycsv.csv')"
  },
  {
    "intent": "get the sum of each second value from a list of tuple `structure`",
    "code": "sum(x[1] for x in structure)"
  },
  {
    "intent": "sum the 3 largest integers in groupby by 'STNAME' and 'COUNTY_POP'",
    "code": "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"
  },
  {
    "intent": "Parse string '21/11/06 16:30' according to format '%d/%m/%y %H:%M'",
    "code": "datetime.strptime('21/11/06 16:30', '%d/%m/%y %H:%M')"
  },
  {
    "intent": "get current script directory",
    "code": "os.path.dirname(os.path.abspath(__file__))"
  },
  {
    "intent": "double each character in string `text.read()`",
    "code": "re.sub('(.)', '\\\\1\\\\1', text.read(), 0, re.S)"
  },
  {
    "intent": "concatenate strings in tuple `('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e')` into a single string",
    "code": "\"\"\"\"\"\".join(('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e'))"
  },
  {
    "intent": "get full path of current directory",
    "code": "os.path.dirname(os.path.abspath(__file__))"
  },
  {
    "intent": "variable number of digits `digits` in variable `value` in format string \"{0:.{1}%}\"",
    "code": "\"\"\"{0:.{1}%}\"\"\".format(value, digits)"
  },
  {
    "intent": "get current requested url",
    "code": "self.request.url"
  },
  {
    "intent": "get a random item from list `choices`",
    "code": "random_choice = random.choice(choices)"
  },
  {
    "intent": "sum the length of all strings in a list `strings`",
    "code": "length = sum(len(s) for s in strings)"
  },
  {
    "intent": "sort a list `s` by first and second attributes",
    "code": "s = sorted(s, key=lambda x: (x[1], x[2]))"
  },
  {
    "intent": "sort a list of lists `s` by second and third element in each list.",
    "code": "s.sort(key=operator.itemgetter(1, 2))"
  },
  {
    "intent": "Mysql commit current transaction",
    "code": "con.commit()"
  },
  {
    "intent": "filtering out strings that contain 'ab' from a list of strings `lst`",
    "code": "[k for k in lst if 'ab' in k]"
  },
  {
    "intent": "find the first letter of each element in string `input`",
    "code": "output = ''.join(item[0].upper() for item in input.split())"
  },
  {
    "intent": "get name of primary field `name` of django model `CustomPK`",
    "code": "CustomPK._meta.pk.name"
  },
  {
    "intent": "count the number of words in a string `s`",
    "code": "len(s.split())"
  },
  {
    "intent": "multiply array `a` and array `b`respective elements then sum each row of the new array",
    "code": "np.einsum('ji,i->j', a, b)"
  },
  {
    "intent": "check python version",
    "code": "sys.version"
  },
  {
    "intent": "check python version",
    "code": "sys.version_info"
  },
  {
    "intent": "format number 1000000000.0 using latex notation",
    "code": "print('\\\\num{{{0:.2g}}}'.format(1000000000.0))"
  },
  {
    "intent": "Initialize a list of empty lists `x` of size 3",
    "code": "x = [[] for i in range(3)]"
  },
  {
    "intent": "apply jinja2 filters `forceescape` and `linebreaks` on variable `my_variable`",
    "code": "{{my_variable | forceescape | linebreaks}}"
  },
  {
    "intent": "zip a list of tuples `[(1, 4), (2, 5), (3, 6)]` into a list of tuples according to original tuple index",
    "code": "zip(*[(1, 4), (2, 5), (3, 6)])"
  },
  {
    "intent": "split a list of tuples `data` into sub-lists of the same tuple field using itertools",
    "code": "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"
  },
  {
    "intent": "Convert a string into a list",
    "code": "list('hello')"
  },
  {
    "intent": "create new column `A_perc` in dataframe `df` with row values equal to the value in column `A` divided by the value in column `sum`",
    "code": "df['A_perc'] = df['A'] / df['sum']"
  },
  {
    "intent": "getting a list of all subdirectories in the directory `directory`",
    "code": "os.walk(directory)"
  },
  {
    "intent": "get a list of all subdirectories in the directory `directory`",
    "code": "[x[0] for x in os.walk(directory)]"
  },
  {
    "intent": "update all values associated with key `i` to string 'updated' if value `j` is not equal to 'None' in dictionary `d`",
    "code": "{i: 'updated' for i, j in list(d.items()) if j != 'None'}"
  },
  {
    "intent": "Filter a dictionary `d` to remove keys with value None and replace other values with 'updated'",
    "code": "dict((k, 'updated') for k, v in d.items() if v is None)"
  },
  {
    "intent": "Filter a dictionary `d` to remove keys with value 'None' and replace other values with 'updated'",
    "code": "dict((k, 'updated') for k, v in d.items() if v != 'None')"
  },
  {
    "intent": "count number of rows in a group `key_columns` in pandas groupby object `df`",
    "code": "df.groupby(key_columns).size()"
  },
  {
    "intent": "return list `result` of sum of elements of each list `b` in list of lists `a`",
    "code": "result = [sum(b) for b in a]"
  },
  {
    "intent": "What's the best way to search for a Python dictionary value in a list of dictionaries?",
    "code": "any(d['site'] == 'Superuser' for d in data)"
  },
  {
    "intent": "create a 2D array of `Node` objects with dimensions `cols` columns and `rows` rows",
    "code": "nodes = [[Node() for j in range(cols)] for i in range(rows)]"
  },
  {
    "intent": "replace extension '.txt' in basename '/home/user/somefile.txt' with extension '.jpg'",
    "code": "print(os.path.splitext('/home/user/somefile.txt')[0] + '.jpg')"
  },
  {
    "intent": "Set the resolution of a monitor as `FULLSCREEN` in pygame",
    "code": "pygame.display.set_mode((0, 0), pygame.FULLSCREEN)"
  },
  {
    "intent": "format float `3.5e+20`  to `$3.5 \\\\times 10^{20}$` and set as title of matplotlib plot `ax`",
    "code": "ax.set_title('$%s \\\\times 10^{%s}$' % ('3.5', '+20'))"
  },
  {
    "intent": "Get the age of directory (or file) `/tmp` in seconds.",
    "code": "print(os.path.getmtime('/tmp'))"
  },
  {
    "intent": "how to get month name of datetime `today`",
    "code": "today.strftime('%B')"
  },
  {
    "intent": "get month name from a datetime object `today`",
    "code": "today.strftime('%B')"
  },
  {
    "intent": "Convert nested list `x` into a flat list",
    "code": "[j for i in x for j in i]"
  },
  {
    "intent": "get each value from a list of lists `a` using itertools",
    "code": "print(list(itertools.chain.from_iterable(a)))"
  },
  {
    "intent": "convert date string 'January 11, 2010'  into day of week",
    "code": "datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%A')"
  },
  {
    "intent": "Convert Date String to Day of Week",
    "code": "datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%a')"
  },
  {
    "intent": "remove item \"b\" in list `a`",
    "code": "a.remove('b')"
  },
  {
    "intent": "remove item `c` in list `a`",
    "code": "a.remove(c)"
  },
  {
    "intent": "delete the element 6 from list `a`",
    "code": "a.remove(6)"
  },
  {
    "intent": "delete the element 6 from list `a`",
    "code": "a.remove(6)"
  },
  {
    "intent": "delete the element `c` from list `a`",
    "code": "if (c in a):\n    a.remove(c)"
  },
  {
    "intent": "delete the element `c` from list `a`",
    "code": "try:\n    a.remove(c)\nexcept ValueError:\n    pass"
  },
  {
    "intent": "Get all matching patterns 'a.*?a' from a string 'a 1 a 2 a 3 a 4 a'.",
    "code": "re.findall('(?=(a.*?a))', 'a 1 a 2 a 3 a 4 a')"
  },
  {
    "intent": "outer product of each column of a 2d `X` array to form a 3d array `X`",
    "code": "np.einsum('ij,kj->jik', X, X)"
  },
  {
    "intent": "Getting the last element of list `some_list`",
    "code": "some_list[(-1)]"
  },
  {
    "intent": "Getting the second to last element of list `some_list`",
    "code": "some_list[(-2)]"
  },
  {
    "intent": "gets the `n` th-to-last element in list `some_list`",
    "code": "some_list[(- n)]"
  },
  {
    "intent": "get the last element in list `alist`",
    "code": "alist[(-1)]"
  },
  {
    "intent": "get the last element in list `astr`",
    "code": "astr[(-1)]"
  },
  {
    "intent": "make a list of integers from 0 to `5` where each second element is a duplicate of the previous element",
    "code": "print([u for v in [[i, i] for i in range(5)] for u in v])"
  },
  {
    "intent": "create a list of integers with duplicate values `[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]`",
    "code": "[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]"
  },
  {
    "intent": "create a list of integers from 1 to 5 with each value duplicated",
    "code": "[(i // 2) for i in range(10)]"
  },
  {
    "intent": "remove first and last lines of string `s`",
    "code": "s[s.find('\\n') + 1:s.rfind('\\n')]"
  },
  {
    "intent": "create dict of squared int values in range of 100",
    "code": "{(x ** 2) for x in range(100)}"
  },
  {
    "intent": "zip lists `[1, 2], [3, 4], [5, 6]` in a list",
    "code": "zip(*[[1, 2], [3, 4], [5, 6]])"
  },
  {
    "intent": "zip lists in a list [[1, 2], [3, 4], [5, 6]]",
    "code": "zip(*[[1, 2], [3, 4], [5, 6]])"
  },
  {
    "intent": "request page 'https://www.mysite.com/' with credentials of username 'username' and password 'pwd'",
    "code": "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"
  },
  {
    "intent": "get a new string from the 3rd character to the end of the string `x`",
    "code": "x[2:]"
  },
  {
    "intent": "get a new string including the first two characters of string `x`",
    "code": "x[:2]"
  },
  {
    "intent": "get a new string including all but the last character of string `x`",
    "code": "x[:(-2)]"
  },
  {
    "intent": "get a new string including the last two characters of string `x`",
    "code": "x[(-2):]"
  },
  {
    "intent": "get a new string with the 3rd to the second-to-last characters of string `x`",
    "code": "x[2:(-2)]"
  },
  {
    "intent": "reverse a string `some_string`",
    "code": "some_string[::(-1)]"
  },
  {
    "intent": "select alternate characters of \"H-e-l-l-o- -W-o-r-l-d\"",
    "code": "'H-e-l-l-o- -W-o-r-l-d'[::2]"
  },
  {
    "intent": "select a substring of `s` beginning at `beginning` of length `LENGTH`",
    "code": "s = s[beginning:(beginning + LENGTH)]"
  },
  {
    "intent": "terminate the program",
    "code": "sys.exit()"
  },
  {
    "intent": "terminate the program",
    "code": "quit()"
  },
  {
    "intent": "Terminating a Python script with error message \"some error message\"",
    "code": "sys.exit('some error message')"
  },
  {
    "intent": "encode value of key `City` in dictionary `data` as `ascii`, ignoring non-ascii characters",
    "code": "data['City'].encode('ascii', 'ignore')"
  },
  {
    "intent": "get current CPU and RAM usage",
    "code": "psutil.cpu_percent()\npsutil.virtual_memory()"
  },
  {
    "intent": "get current RAM usage of current program",
    "code": "pid = os.getpid()\npy = psutil.Process(pid)\nmemoryUse = (py.memory_info()[0] / (2.0 ** 30))"
  },
  {
    "intent": "print cpu and memory usage",
    "code": "print((psutil.cpu_percent()))\nprint((psutil.virtual_memory()))"
  },
  {
    "intent": "read a ragged csv file `D:/Temp/tt.csv` using `names` parameter in pandas",
    "code": "pd.read_csv('D:/Temp/tt.csv', names=list('abcdef'))"
  },
  {
    "intent": "get first non-null value per each row from dataframe `df`",
    "code": "df.stack().groupby(level=0).first()"
  },
  {
    "intent": "print two numbers `10` and `20` using string formatting",
    "code": "\"\"\"{0} {1}\"\"\".format(10, 20)"
  },
  {
    "intent": "replace placeholders in string '{1} {ham} {0} {foo} {1}' with arguments `(10, 20, foo='bar', ham='spam')`",
    "code": "\"\"\"{1} {ham} {0} {foo} {1}\"\"\".format(10, 20, foo='bar', ham='spam')"
  },
  {
    "intent": "create list `changed_list ` containing elements of list `original_list` whilst converting strings containing digits to integers",
    "code": "changed_list = [(int(f) if f.isdigit() else f) for f in original_list]"
  },
  {
    "intent": "get a dictionary with keys from one list `keys` and values from other list `data`",
    "code": "dict(zip(keys, zip(*data)))"
  },
  {
    "intent": "convert string `apple` from iso-8859-1/latin1 to utf-8",
    "code": "apple.decode('iso-8859-1').encode('utf8')"
  },
  {
    "intent": "Exclude column names when writing dataframe `df` to a csv file `filename.csv`",
    "code": "df.to_csv('filename.csv', header=False)"
  },
  {
    "intent": "Escape character '}' in string '{0}:<15}}{1}:<15}}{2}:<8}}' while using function `format` with arguments `('1', '2', '3')`",
    "code": "print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))"
  },
  {
    "intent": "get dictionary with max value of key 'size' in list of dicts `ld`",
    "code": "max(ld, key=lambda d: d['size'])"
  },
  {
    "intent": "format parameters 'b' and 'a' into plcaeholders in string \"{0}\\\\w{{2}}b{1}\\\\w{{2}}quarter\"",
    "code": "\"\"\"{0}\\\\w{{2}}b{1}\\\\w{{2}}quarter\"\"\".format('b', 'a')"
  },
  {
    "intent": "django create a foreign key column `user` and link it to table 'User'",
    "code": "user = models.ForeignKey('User', unique=True)"
  },
  {
    "intent": "write a regex pattern to match even number of letter `A`",
    "code": "re.compile('^([^A]*)AA([^A]|AA)*$')"
  },
  {
    "intent": "join Numpy array `b` with Numpy array 'a' along axis 0",
    "code": "b = np.concatenate((a, a), axis=0)"
  },
  {
    "intent": "custom sort an alphanumeric list `l`",
    "code": "sorted(l, key=lambda x: x.replace('0', 'Z'))"
  },
  {
    "intent": "plot logarithmic axes with matplotlib",
    "code": "ax.set_yscale('log')"
  },
  {
    "intent": "Access environment variable \"HOME\"",
    "code": "os.environ['HOME']"
  },
  {
    "intent": "get value of environment variable \"HOME\"",
    "code": "os.environ['HOME']"
  },
  {
    "intent": "print all environment variables",
    "code": "print(os.environ)"
  },
  {
    "intent": "get all environment variables",
    "code": "os.environ"
  },
  {
    "intent": "get value of the environment variable 'KEY_THAT_MIGHT_EXIST'",
    "code": "print(os.environ.get('KEY_THAT_MIGHT_EXIST'))"
  },
  {
    "intent": "get value of the environment variable 'KEY_THAT_MIGHT_EXIST' with default value `default_value`",
    "code": "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"
  },
  {
    "intent": "get value of the environment variable 'HOME' with default value '/home/username/'",
    "code": "print(os.environ.get('HOME', '/home/username/'))"
  },
  {
    "intent": "create a dictionary containing each string in list `my_list` split by '=' as a key/value pairs",
    "code": "print(dict([s.split('=') for s in my_list]))"
  },
  {
    "intent": "find the index of element closest to number 11.5 in list `a`",
    "code": "min(enumerate(a), key=lambda x: abs(x[1] - 11.5))"
  },
  {
    "intent": "find element `a` that contains string \"TEXT A\" in file `root`",
    "code": "e = root.xpath('.//a[contains(text(),\"TEXT A\")]')"
  },
  {
    "intent": "Find the`a` tag in html `root` which starts with the text `TEXT A`  and assign it to `e`",
    "code": "e = root.xpath('.//a[starts-with(text(),\"TEXT A\")]')"
  },
  {
    "intent": "find the element that holds string 'TEXT A' in file `root`",
    "code": "e = root.xpath('.//a[text()=\"TEXT A\"]')"
  },
  {
    "intent": "create list `c` containing items from list `b` whose index is in list `index`",
    "code": "c = [b[i] for i in index]"
  },
  {
    "intent": "get the dot product of two one dimensional numpy arrays",
    "code": "np.dot(a[:, (None)], b[(None), :])"
  },
  {
    "intent": "multiplication of two 1-dimensional arrays  in numpy",
    "code": "np.outer(a, b)"
  },
  {
    "intent": "execute a file './abc.py' with arguments `arg1` and `arg2` in python shell",
    "code": "subprocess.call(['./abc.py', arg1, arg2])"
  },
  {
    "intent": "Replace NaN values in  column 'value' with the mean of data in column 'group' of dataframe `df`",
    "code": "df[['value']].fillna(df.groupby('group').transform('mean'))"
  },
  {
    "intent": "separate each character in string `s` by '-'",
    "code": "re.sub('(.)(?=.)', '\\\\1-', s)"
  },
  {
    "intent": "concatenate '-' in between characters of string `str`",
    "code": "re.sub('(?<=.)(?=.)', '-', str)"
  },
  {
    "intent": "get the indexes of the x and y axes in Numpy array `np` where variable `a` is equal to variable `value`",
    "code": "i, j = np.where(a == value)"
  },
  {
    "intent": "print letter that appears most frequently in string `s`",
    "code": "print(collections.Counter(s).most_common(1)[0])"
  },
  {
    "intent": "find float number proceeding sub-string `par` in string `dir`",
    "code": "float(re.findall('(?:^|_)' + par + '(\\\\d+\\\\.\\\\d*)', dir)[0])"
  },
  {
    "intent": "Get all the matches from a string `abcd` if it begins with a character `a`",
    "code": "re.findall('[^a]', 'abcd')"
  },
  {
    "intent": "get a list of variables from module 'adfix.py' in current module.",
    "code": "print([item for item in dir(adfix) if not item.startswith('__')])"
  },
  {
    "intent": "get the first element of each tuple in a list `rows`",
    "code": "[x[0] for x in rows]"
  },
  {
    "intent": "get a list `res_list` of the first elements of each tuple in a list of tuples `rows`",
    "code": "res_list = [x[0] for x in rows]"
  },
  {
    "intent": "duplicate data in pandas dataframe `x` for 5 times",
    "code": "pd.concat([x] * 5, ignore_index=True)"
  },
  {
    "intent": "Get a repeated pandas data frame object `x` by `5` times",
    "code": "pd.concat([x] * 5)"
  },
  {
    "intent": "sort json `ips_data` by a key 'data_two'",
    "code": "sorted_list_of_keyvalues = sorted(list(ips_data.items()), key=item[1]['data_two'])"
  },
  {
    "intent": "read json `elevations` to pandas dataframe `df`",
    "code": "pd.read_json(elevations)"
  },
  {
    "intent": "generate a random number in 1 to 7 with a given distribution [0.1, 0.05, 0.05, 0.2, 0.4, 0.2]",
    "code": "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"
  },
  {
    "intent": "Return rows of data associated with the maximum value of column 'Value' in dataframe `df`",
    "code": "df.loc[df['Value'].idxmax()]"
  },
  {
    "intent": "find recurring patterns in a string '42344343434'",
    "code": "re.findall('^(.+?)((.+)\\\\3+)$', '42344343434')[0][:-1]"
  },
  {
    "intent": "convert binary string '\\x00\\x00\\x80?\\x00\\x00\\x00@\\x00\\x00@@\\x00\\x00\\x80@' to numpy array",
    "code": "np.fromstring('\\x00\\x00\\x80?\\x00\\x00\\x00@\\x00\\x00@@\\x00\\x00\\x80@', dtype='<f4')"
  },
  {
    "intent": "convert binary string to numpy array",
    "code": "np.fromstring('\\x00\\x00\\x80?\\x00\\x00\\x00@\\x00\\x00@@\\x00\\x00\\x80@', dtype='>f4')"
  },
  {
    "intent": "insert variables `(var1, var2, var3)` into sql statement 'INSERT INTO table VALUES (?, ?, ?)'",
    "code": "cursor.execute('INSERT INTO table VALUES (?, ?, ?)', (var1, var2, var3))"
  },
  {
    "intent": "Execute a sql statement using variables `var1`, `var2` and `var3`",
    "code": "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))"
  },
  {
    "intent": "How to use variables in SQL statement in Python?",
    "code": "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))"
  },
  {
    "intent": "pandas split strings in column 'stats' by ',' into columns in dataframe `df`",
    "code": "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"
  },
  {
    "intent": "split string in column 'stats' by ',' into separate columns in dataframe `df`",
    "code": "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"
  },
  {
    "intent": "Unpack column 'stats' in dataframe `df` into a series of columns",
    "code": "df['stats'].apply(pd.Series)"
  },
  {
    "intent": "wait for shell command `p` evoked by  subprocess.Popen to complete",
    "code": "p.wait()"
  },
  {
    "intent": "encode string `s` to utf-8 code",
    "code": "s.encode('utf8')"
  },
  {
    "intent": "parse string '01-Jan-1995' into a datetime object using format '%d-%b-%Y'",
    "code": "datetime.datetime.strptime('01-Jan-1995', '%d-%b-%Y')"
  },
  {
    "intent": "copy a file from `src` to `dst`",
    "code": "copyfile(src, dst)"
  },
  {
    "intent": "copy file \"/dir/file.ext\" to \"/new/dir/newname.ext\"",
    "code": "shutil.copy2('/dir/file.ext', '/new/dir/newname.ext')"
  },
  {
    "intent": "copy file '/dir/file.ext' to '/new/dir'",
    "code": "shutil.copy2('/dir/file.ext', '/new/dir')"
  },
  {
    "intent": "print a list of integers `list_of_ints` using string formatting",
    "code": "print(', '.join(str(x) for x in list_of_ints))"
  },
  {
    "intent": "multiply column 'A' and column 'B' by column 'C' in datafram `df`",
    "code": "df[['A', 'B']].multiply(df['C'], axis='index')"
  },
  {
    "intent": "convert string 'a' to hex",
    "code": "hex(ord('a'))"
  },
  {
    "intent": "Get the sum of values to the power of their indices in a list `l`",
    "code": "sum(j ** i for i, j in enumerate(l, 1))"
  },
  {
    "intent": "remove extra white spaces & tabs from a string `s`",
    "code": "\"\"\" \"\"\".join(s.split())"
  },
  {
    "intent": "replace comma in string `s` with empty string ''",
    "code": "s = s.replace(',', '')"
  },
  {
    "intent": "Resample dataframe `frame` to resolution of 1 hour `1H` for timeseries index, summing values in the column `radiation` averaging those in column `tamb`",
    "code": "frame.resample('1H').agg({'radiation': np.sum, 'tamb': np.mean})"
  },
  {
    "intent": "How do I get rid of Python Tkinter root window?",
    "code": "root.destroy()"
  },
  {
    "intent": "create a pandas dataframe `df` from elements of a dictionary `nvalues`",
    "code": "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"
  },
  {
    "intent": "Flask get value of request variable 'firstname'",
    "code": "first_name = request.args.get('firstname')"
  },
  {
    "intent": "Flask get posted form data 'firstname'",
    "code": "first_name = request.form.get('firstname')"
  },
  {
    "intent": "get a list of substrings consisting of the first 5 characters of every string in list `buckets`",
    "code": "[s[:5] for s in buckets]"
  },
  {
    "intent": "sort list `the_list` by the length of string followed by alphabetical order",
    "code": "the_list.sort(key=lambda item: (-len(item), item))"
  },
  {
    "intent": "Set index equal to field 'TRX_DATE' in dataframe `df`",
    "code": "df = df.set_index(['TRX_DATE'])"
  },
  {
    "intent": "List comprehension with an accumulator in range of 10",
    "code": "list(accumulate(list(range(10))))"
  },
  {
    "intent": "How to convert a date string '2013-1-25' in format '%Y-%m-%d' to different format '%m/%d/%y'",
    "code": "datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%m/%d/%y')"
  },
  {
    "intent": "convert a date string '2013-1-25' in format '%Y-%m-%d' to different format '%-m/%d/%y'",
    "code": "datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%-m/%d/%y')"
  },
  {
    "intent": "get a dataframe `df2` that contains all the columns of dataframe `df` that do not end in `prefix`",
    "code": "df2 = df.ix[:, (~df.columns.str.endswith('prefix'))]"
  },
  {
    "intent": "create list `new_list` containing the last 10 elements of list `my_list`",
    "code": "new_list = my_list[-10:]"
  },
  {
    "intent": "get the last 10 elements from a list `my_list`",
    "code": "my_list[-10:]"
  },
  {
    "intent": "convert matlab engine array `x` to a numpy ndarray",
    "code": "np.array(x._data).reshape(x.size[::-1]).T"
  },
  {
    "intent": "select the first row grouped per level 0 of dataframe `df`",
    "code": "df.groupby(level=0, as_index=False).nth(0)"
  },
  {
    "intent": "concatenate sequence of numpy arrays  `LIST` into a one dimensional array along the first axis",
    "code": "numpy.concatenate(LIST, axis=0)"
  },
  {
    "intent": "convert and escape string \"\\\\xc3\\\\x85\u3042\" to UTF-8 code",
    "code": "\"\"\"\\\\xc3\\\\x85\u3042\"\"\".encode('utf-8').decode('unicode_escape')"
  },
  {
    "intent": "encode string \"\\\\xc3\\\\x85\u3042\" to bytes",
    "code": "\"\"\"\\\\xc3\\\\x85\u3042\"\"\".encode('utf-8')"
  },
  {
    "intent": "interleave the elements of two lists `a` and `b`",
    "code": "[j for i in zip(a, b) for j in i]"
  },
  {
    "intent": "merge two lists `a` and `b` into a single list",
    "code": "[j for i in zip(a, b) for j in i]"
  },
  {
    "intent": "delete all occureces of `8` in each string `s` in list `lst`",
    "code": "print([s.replace('8', '') for s in lst])"
  },
  {
    "intent": "Split string `Hello` into a string of letters seperated by `,`",
    "code": "\"\"\",\"\"\".join('Hello')"
  },
  {
    "intent": "in Django, select 100 random records from the database `Content.objects`",
    "code": "Content.objects.all().order_by('?')[:100]"
  },
  {
    "intent": "create a NumPy array containing elements of array `A` as pointed to by index in array `B`",
    "code": "A[np.arange(A.shape[0])[:, (None)], B]"
  },
  {
    "intent": "pivot dataframe `df` so that values for `upc` become column headings and values for `saleid` become the index",
    "code": "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"
  },
  {
    "intent": "match zero-or-more instances of lower case alphabet characters in a string `f233op `",
    "code": "re.findall('([a-z]*)', 'f233op')"
  },
  {
    "intent": "match zero-or-more instances of lower case alphabet characters in a string `f233op `",
    "code": "re.findall('([a-z])*', 'f233op')"
  },
  {
    "intent": "split string 'happy_hats_for_cats' using string '_for_'",
    "code": "re.split('_for_', 'happy_hats_for_cats')"
  },
  {
    "intent": "Split string 'sad_pandas_and_happy_cats_for_people' based on string 'and', 'or' or 'for'",
    "code": "re.split('_(?:for|or|and)_', 'sad_pandas_and_happy_cats_for_people')"
  },
  {
    "intent": "Split a string `l` by multiple words `for` or `or` or `and`",
    "code": "[re.split('_(?:f?or|and)_', s) for s in l]"
  },
  {
    "intent": "zip keys with individual values in lists `k` and `v`",
    "code": "[dict(zip(k, x)) for x in v]"
  },
  {
    "intent": "Sort a list 'lst' in descending order.",
    "code": "sorted(lst, reverse=True)"
  },
  {
    "intent": "sort array `order_array` based on column 'year', 'month' and 'day'",
    "code": "order_array.sort(order=['year', 'month', 'day'])"
  },
  {
    "intent": "Sort a structured numpy array 'df' on multiple columns 'year', 'month' and 'day'.",
    "code": "df.sort(['year', 'month', 'day'])"
  },
  {
    "intent": "check if elements in list `my_list` are coherent in order",
    "code": "return my_list == list(range(my_list[0], my_list[-1] + 1))"
  },
  {
    "intent": "group rows of pandas dataframe `df` with same 'id'",
    "code": "df.groupby('id').agg(lambda x: x.tolist())"
  },
  {
    "intent": "encode `u'X\\xc3\\xbcY\\xc3\\x9f'` as unicode and decode with utf-8",
    "code": "'X\\xc3\\xbcY\\xc3\\x9f'.encode('raw_unicode_escape').decode('utf-8')"
  },
  {
    "intent": "parse string `a` to float",
    "code": "float(a)"
  },
  {
    "intent": "Parse String `s` to Float or Int",
    "code": "try:\n    return int(s)\nexcept ValueError:\n    return float(s)"
  },
  {
    "intent": "check if object `a` has property 'property'",
    "code": "if hasattr(a, 'property'):\n    pass"
  },
  {
    "intent": "check if object `a` has property 'property'",
    "code": "if hasattr(a, 'property'):\n    pass"
  },
  {
    "intent": "get the value of attribute 'property' of object `a` with default value 'default value'",
    "code": "getattr(a, 'property', 'default value')"
  },
  {
    "intent": "delete every 8th column in a numpy array 'a'.",
    "code": "np.delete(a, list(range(0, a.shape[1], 8)), axis=1)"
  },
  {
    "intent": "convert `ms` milliseconds to a datetime object",
    "code": "datetime.datetime.fromtimestamp(ms / 1000.0)"
  },
  {
    "intent": "find the magnitude (length) squared of a vector `vf` field",
    "code": "np.einsum('...j,...j->...', vf, vf)"
  },
  {
    "intent": "request http url `url`",
    "code": "r = requests.get(url)"
  },
  {
    "intent": "request http url `url` with parameters `payload`",
    "code": "r = requests.get(url, params=payload)"
  },
  {
    "intent": "post request url `url` with parameters `payload`",
    "code": "r = requests.post(url, data=payload)"
  },
  {
    "intent": "make an HTTP post request with data `post_data`",
    "code": "post_response = requests.post(url='http://httpbin.org/post', json=post_data)"
  },
  {
    "intent": "django jinja slice list `mylist` by '3:8'",
    "code": "{{(mylist | slice): '3:8'}}"
  },
  {
    "intent": "create dataframe `df` with content of hdf store file '/home/.../data.h5' with key of 'firstSet'",
    "code": "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"
  },
  {
    "intent": "get the largest index of the last occurrence of characters '([{' in string `test_string`",
    "code": "max(test_string.rfind(i) for i in '([{')"
  },
  {
    "intent": "print 'here is your checkmark: ' plus unicode character u'\\u2713'",
    "code": "print('here is your checkmark: ' + '\\u2713')"
  },
  {
    "intent": "print unicode characters in a string `\\u0420\\u043e\\u0441\\u0441\\u0438\\u044f`",
    "code": "print('\\u0420\\u043e\\u0441\\u0441\\u0438\\u044f')"
  },
  {
    "intent": "pads string '5' on the left with 1 zero",
    "code": "print('{0}'.format('5'.zfill(2)))"
  },
  {
    "intent": "Remove duplicates elements from list `sequences` and sort it in ascending order",
    "code": "sorted(set(itertools.chain.from_iterable(sequences)))"
  },
  {
    "intent": "pandas dataframe `df` column 'a' to list",
    "code": "df['a'].values.tolist()"
  },
  {
    "intent": "Get a list of all values in column `a` in pandas data frame `df`",
    "code": "df['a'].tolist()"
  },
  {
    "intent": "escaping quotes in string",
    "code": "replace('\"', '\\\\\"')"
  },
  {
    "intent": "check if all string elements in list `words` are upper-cased",
    "code": "print(all(word[0].isupper() for word in words))"
  },
  {
    "intent": "remove items from dictionary `myDict` if the item's value `val` is equal to 42",
    "code": "myDict = {key: val for key, val in list(myDict.items()) if val != 42}"
  },
  {
    "intent": "Remove all items from a dictionary `myDict` whose values are `42`",
    "code": "{key: val for key, val in list(myDict.items()) if val != 42}"
  },
  {
    "intent": "Determine the byte length of a utf-8 encoded string `s`",
    "code": "return len(s.encode('utf-8'))"
  },
  {
    "intent": "kill a process with id `process.pid`",
    "code": "os.kill(process.pid, signal.SIGKILL)"
  },
  {
    "intent": "get data of columns with Null values in dataframe `df`",
    "code": "df[pd.isnull(df).any(axis=1)]"
  },
  {
    "intent": "strip everything up to and including the character `&` from url `url`, strip the character `=` from the remaining string and concatenate `.html` to the end",
    "code": "url.split('&')[-1].replace('=', '') + '.html'"
  },
  {
    "intent": "Parse a file `sample.xml` using expat parsing in python 3",
    "code": "parser.ParseFile(open('sample.xml', 'rb'))"
  },
  {
    "intent": "Exit script",
    "code": "sys.exit()"
  },
  {
    "intent": "assign value in `group` dynamically to class property `attr`",
    "code": "setattr(self, attr, group)"
  },
  {
    "intent": "decode url-encoded string `some_string` to its character equivalents",
    "code": "urllib.parse.unquote(urllib.parse.unquote(some_string))"
  },
  {
    "intent": "decode a double URL encoded string \r\n'FireShot3%2B%25282%2529.png' to\r\n'FireShot3+(2).png'",
    "code": "urllib.parse.unquote(urllib.parse.unquote('FireShot3%2B%25282%2529.png'))"
  },
  {
    "intent": "change flask security register url to `/create_account`",
    "code": "app.config['SECURITY_REGISTER_URL'] = '/create_account'"
  },
  {
    "intent": "open a file `/home/user/test/wsservice/data.pkl` in binary write mode",
    "code": "output = open('/home/user/test/wsservice/data.pkl', 'wb')"
  },
  {
    "intent": "remove the last element in list `a`",
    "code": "del a[(-1)]"
  },
  {
    "intent": "remove the element in list `a` with index 1",
    "code": "a.pop(1)"
  },
  {
    "intent": "remove the last element in list `a`",
    "code": "a.pop()"
  },
  {
    "intent": "remove the element in list `a` at index `index`",
    "code": "a.pop(index)"
  },
  {
    "intent": "remove the element in list `a` at index `index`",
    "code": "del a[index]"
  },
  {
    "intent": "print a celsius symbol on x axis of a plot `ax`",
    "code": "ax.set_xlabel('Temperature (\\u2103)')"
  },
  {
    "intent": "Print a celsius symbol with matplotlib",
    "code": "ax.set_xlabel('Temperature ($^\\\\circ$C)')"
  },
  {
    "intent": "convert a list of lists `list_of_lists` into a list of strings keeping empty sub-lists as empty string ''",
    "code": "[''.join(l) for l in list_of_lists]"
  },
  {
    "intent": "get a list of all the duplicate items in dataframe `df` using pandas",
    "code": "pd.concat(g for _, g in df.groupby('ID') if len(g) > 1)"
  },
  {
    "intent": "Delete third row in a numpy array `x`",
    "code": "x = numpy.delete(x, 2, axis=1)"
  },
  {
    "intent": "delete first row of array `x`",
    "code": "x = numpy.delete(x, 0, axis=0)"
  },
  {
    "intent": "merge rows from dataframe `df1` with rows from dataframe `df2` and calculate the mean for rows that have the same value of axis 1",
    "code": "pd.concat((df1, df2), axis=1).mean(axis=1)"
  },
  {
    "intent": "Get the average values from two numpy arrays `old_set` and `new_set`",
    "code": "np.mean(np.array([old_set, new_set]), axis=0)"
  },
  {
    "intent": "Matplotlib change marker size to 500",
    "code": "scatter(x, y, s=500, color='green', marker='h')"
  },
  {
    "intent": "Create new list `result` by splitting each item in list `words`",
    "code": "result = [item for word in words for item in word.split(',')]"
  },
  {
    "intent": "convert JSON string '2012-05-29T19:30:03.283Z' into a DateTime object using format '%Y-%m-%dT%H:%M:%S.%fZ'",
    "code": "datetime.datetime.strptime('2012-05-29T19:30:03.283Z', '%Y-%m-%dT%H:%M:%S.%fZ')"
  },
  {
    "intent": "count `True` values associated with key 'one' in dictionary `tadas`",
    "code": "sum(item['one'] for item in list(tadas.values()))"
  },
  {
    "intent": "encode a pdf file `pdf_reference.pdf` with `base64` encoding",
    "code": "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"
  },
  {
    "intent": "split string `a` using new-line character '\\n' as separator",
    "code": "a.rstrip().split('\\n')"
  },
  {
    "intent": "split a string `a` with new line character",
    "code": "a.split('\\n')[:-1]"
  },
  {
    "intent": "return http status code 204 from a django view",
    "code": "return HttpResponse(status=204)"
  },
  {
    "intent": "check if 7 is in `a`",
    "code": "(7 in a)"
  },
  {
    "intent": "check if 'a' is in list `a`",
    "code": "('a' in a)"
  },
  {
    "intent": "sort list `results` by keys value 'year'",
    "code": "sorted(results, key=itemgetter('year'))"
  },
  {
    "intent": "get current url in selenium webdriver `browser`",
    "code": "print(browser.current_url)"
  },
  {
    "intent": "split string `str` with delimiter '; ' or delimiter ', '",
    "code": "re.split('; |, ', str)"
  },
  {
    "intent": "un-escaping characters in a string with python",
    "code": "\"\"\"\\\\u003Cp\\\\u003E\"\"\".decode('unicode-escape')"
  },
  {
    "intent": "convert date string `s` in format pattern '%d/%m/%Y' into a timestamp",
    "code": "time.mktime(datetime.datetime.strptime(s, '%d/%m/%Y').timetuple())"
  },
  {
    "intent": "convert string '01/12/2011' to an integer timestamp",
    "code": "int(datetime.datetime.strptime('01/12/2011', '%d/%m/%Y').strftime('%s'))"
  },
  {
    "intent": "get http header of the key 'your-header-name' in flask",
    "code": "request.headers['your-header-name']"
  },
  {
    "intent": "select records of dataframe `df` where the sum of column 'X' for each value in column 'User' is 0",
    "code": "df.groupby('User')['X'].filter(lambda x: x.sum() == 0)"
  },
  {
    "intent": "Get data of dataframe `df` where the sum of column 'X' grouped by column 'User' is equal to 0",
    "code": "df.loc[df.groupby('User')['X'].transform(sum) == 0]"
  },
  {
    "intent": "Get data from dataframe `df` where column 'X' is equal to 0",
    "code": "df.groupby('User')['X'].transform(sum) == 0"
  },
  {
    "intent": "How do I find an element that contains specific text in Selenium Webdriver (Python)?",
    "code": "driver.find_elements_by_xpath(\"//*[contains(text(), 'My Button')]\")"
  },
  {
    "intent": "convert pandas group by object to multi-indexed dataframe with indices 'Name' and 'Destination'",
    "code": "df.set_index(['Name', 'Destination'])"
  },
  {
    "intent": "coalesce non-word-characters in string `a`",
    "code": "print(re.sub('(\\\\W)\\\\1+', '\\\\1', a))"
  },
  {
    "intent": "open a file \"$file\" under Unix",
    "code": "os.system('start \"$file\"')"
  },
  {
    "intent": "Convert a Unicode string `title` to a 'ascii' string",
    "code": "unicodedata.normalize('NFKD', title).encode('ascii', 'ignore')"
  },
  {
    "intent": "Convert a Unicode string `a` to a 'ascii' string",
    "code": "a.encode('ascii', 'ignore')"
  },
  {
    "intent": "create a list `files` containing all files in directory '.' that starts with numbers between 0 and 9 and ends with the extension '.jpg'",
    "code": "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"
  },
  {
    "intent": "adding a 1-d array `[1, 2, 3, 4, 5, 6, 7, 8, 9]` to a 3-d array `np.zeros((6, 9, 20))`",
    "code": "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"
  },
  {
    "intent": "add array of shape `(6, 9, 20)` to array `[1, 2, 3, 4, 5, 6, 7, 8, 9]`",
    "code": "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"
  },
  {
    "intent": "How can I launch an instance of an application using Python?",
    "code": "os.system('start excel.exe <path/to/file>')"
  },
  {
    "intent": "get the list with the highest sum value in list `x`",
    "code": "print(max(x, key=sum))"
  },
  {
    "intent": "sum the length of lists in list `x` that are more than 1 item in length",
    "code": "sum(len(y) for y in x if len(y) > 1)"
  },
  {
    "intent": "Enclose numbers in quotes in a string `This is number 1 and this is number 22`",
    "code": "re.sub('(\\\\d+)', '\"\\\\1\"', 'This is number 1 and this is number 22')"
  },
  {
    "intent": "multiply the columns of sparse matrix `m` by array `a` then multiply the rows of the resulting matrix by array `a`",
    "code": "numpy.dot(numpy.dot(a, m), a)"
  },
  {
    "intent": "Django check if an object with criteria `name` equal to 'name' and criteria `title` equal to 'title' exists in model `Entry`",
    "code": "Entry.objects.filter(name='name', title='title').exists()"
  },
  {
    "intent": "sort a nested list by the inverse of element 2, then by element 1",
    "code": "sorted(l, key=lambda x: (-int(x[1]), x[0]))"
  },
  {
    "intent": "get domain/host name from request object in Django",
    "code": "request.META['HTTP_HOST']"
  },
  {
    "intent": "get a string `randomkey123xyz987` between two substrings in a string `api('randomkey123xyz987', 'key', 'text')` using regex",
    "code": "re.findall(\"api\\\\('(.*?)'\", \"api('randomkey123xyz987', 'key', 'text')\")"
  },
  {
    "intent": "invoke perl script './uireplace.pl' using perl interpeter '/usr/bin/perl' and send argument `var` to it",
    "code": "subprocess.call(['/usr/bin/perl', './uireplace.pl', var])"
  },
  {
    "intent": "print list of items `myList`",
    "code": "print('\\n'.join(str(p) for p in myList))"
  },
  {
    "intent": "update the dictionary `mydic` with dynamic keys `i` and values with key 'name' from dictionary `o`",
    "code": "mydic.update({i: o['name']})"
  },
  {
    "intent": "split a `utf-8` encoded string `stru` into a list of characters",
    "code": "list(stru.decode('utf-8'))"
  },
  {
    "intent": "convert utf-8 with bom string `s` to utf-8 with no bom `u`",
    "code": "u = s.decode('utf-8-sig')"
  },
  {
    "intent": "Filter model 'Entry' where 'id' is not equal to 3 in Django",
    "code": "Entry.objects.filter(~Q(id=3))"
  },
  {
    "intent": "lookup an attribute in any scope by name 'range'",
    "code": "getattr(__builtins__, 'range')"
  },
  {
    "intent": "restart a computer after `900` seconds using subprocess",
    "code": "subprocess.call(['shutdown', '/r', '/t', '900'])"
  },
  {
    "intent": "shutdown a computer using subprocess",
    "code": "subprocess.call(['shutdown', '/s'])"
  },
  {
    "intent": "abort a computer shutdown using subprocess",
    "code": "subprocess.call(['shutdown', '/a '])"
  },
  {
    "intent": "logoff computer having windows operating system using python",
    "code": "subprocess.call(['shutdown', '/l '])"
  },
  {
    "intent": "shutdown and restart a computer running windows from script",
    "code": "subprocess.call(['shutdown', '/r'])"
  },
  {
    "intent": "erase the contents of a file `filename`",
    "code": "open('filename', 'w').close()"
  },
  {
    "intent": "How to erase the file contents of text file in Python?",
    "code": "open('file.txt', 'w').close()"
  },
  {
    "intent": "convert dataframe `df` to list of dictionaries including the index values",
    "code": "df.to_dict('index')"
  },
  {
    "intent": "Create list of dictionaries from pandas dataframe `df`",
    "code": "df.to_dict('records')"
  },
  {
    "intent": "Group a pandas data frame by monthly frequenct `M` using groupby",
    "code": "df.groupby(pd.TimeGrouper(freq='M'))"
  },
  {
    "intent": "divide the members of a list `conversions` by the corresponding members of another list `trials`",
    "code": "[(c / t) for c, t in zip(conversions, trials)]"
  },
  {
    "intent": "sort dict `data` by value",
    "code": "sorted(data, key=data.get)"
  },
  {
    "intent": "Sort a dictionary `data` by its values",
    "code": "sorted(data.values())"
  },
  {
    "intent": "Get a list of pairs of key-value sorted by values in dictionary `data`",
    "code": "sorted(list(data.items()), key=lambda x: x[1])"
  },
  {
    "intent": "sort dict by value python",
    "code": "sorted(list(data.items()), key=lambda x: x[1])"
  },
  {
    "intent": "display current time",
    "code": "now = datetime.datetime.now().strftime('%H:%M:%S')"
  },
  {
    "intent": "find the index of the second occurrence of the substring `bar` in string `foo bar bar bar`",
    "code": "\"\"\"foo bar bar bar\"\"\".replace('bar', 'XXX', 1).find('bar')"
  },
  {
    "intent": "check if key 'stackoverflow' and key 'google' are presented in dictionary `sites`",
    "code": "set(['stackoverflow', 'google']).issubset(sites)"
  },
  {
    "intent": "replace string ' and ' in string `stuff` with character '/'",
    "code": "stuff.replace(' and ', '/')"
  },
  {
    "intent": "Save array at index 0, index 1 and index 8 of array `np` to tmp file `tmp`",
    "code": "np.savez(tmp, *[getarray[0], getarray[1], getarray[8]])"
  },
  {
    "intent": "substract 1 hour and 10 minutes from current time",
    "code": "t = datetime.datetime.now()\n(t - datetime.timedelta(hours=1, minutes=10))"
  },
  {
    "intent": "subtract 1 hour and 10 minutes from time object `t`",
    "code": "(t - datetime.timedelta(hours=1, minutes=10))"
  },
  {
    "intent": "add 1 hour and 2 minutes to time object `t`",
    "code": "dt = datetime.datetime.combine(datetime.date.today(), t)"
  },
  {
    "intent": "subtract 5 hours from the time object `dt`",
    "code": "dt -= datetime.timedelta(hours=5)"
  },
  {
    "intent": "encode string `data` using hex 'hex' encoding",
    "code": "print(data.encode('hex'))"
  },
  {
    "intent": "Return the decimal value for each hex character in data `data`",
    "code": "print(' '.join([str(ord(a)) for a in data]))"
  },
  {
    "intent": "Get all the items from a list of tuple 'l' where second item in tuple is '1'.",
    "code": "[x for x in l if x[1] == 1]"
  },
  {
    "intent": "Create array `a` containing integers from stdin",
    "code": "a.fromlist([int(val) for val in stdin.read().split()])"
  },
  {
    "intent": "place '\\' infront of each non-letter char in string `line`",
    "code": "print(re.sub('[_%^$]', '\\\\\\\\\\\\g<0>', line))"
  },
  {
    "intent": "Get all `a` tags where the text starts with value `some text` using regex",
    "code": "doc.xpath(\"//a[starts-with(text(),'some text')]\")"
  },
  {
    "intent": "convert a list of lists `a` into list of tuples of appropriate elements form nested lists",
    "code": "zip(*a)"
  },
  {
    "intent": "convert a list of strings `lst` to list of integers",
    "code": "[map(int, sublist) for sublist in lst]"
  },
  {
    "intent": "convert strings in list-of-lists `lst` to ints",
    "code": "[[int(x) for x in sublist] for sublist in lst]"
  },
  {
    "intent": "get index of elements in array `A` that occur in another array `B`",
    "code": "np.where(np.in1d(A, B))[0]"
  },
  {
    "intent": "create a list where each element is a dictionary with keys 'key1' and 'key2' and values corresponding to each value in the lists referenced by keys 'key1' and 'key2' in dictionary `d`",
    "code": "[{'key1': a, 'key2': b} for a, b in zip(d['key1'], d['key2'])]"
  },
  {
    "intent": "Split dictionary of lists into list of dictionaries",
    "code": "map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))"
  },
  {
    "intent": "Get Last Day of the first month in 2002",
    "code": "calendar.monthrange(2002, 1)"
  },
  {
    "intent": "Get Last Day of the second month in 2002",
    "code": "calendar.monthrange(2008, 2)"
  },
  {
    "intent": "Get Last Day of the second month in 2100",
    "code": "calendar.monthrange(2100, 2)"
  },
  {
    "intent": "Get Last Day of the month `month` in year `year`",
    "code": "calendar.monthrange(year, month)[1]"
  },
  {
    "intent": "Get Last Day of the second month in year 2012",
    "code": "monthrange(2012, 2)"
  },
  {
    "intent": "Get Last Day of the first month in year 2000",
    "code": "(datetime.date(2000, 2, 1) - datetime.timedelta(days=1))"
  },
  {
    "intent": "Calling an external command \"ls -l\"",
    "code": "from subprocess import call"
  },
  {
    "intent": "Calling an external command \"some_command with args\"",
    "code": "os.system('some_command with args')"
  },
  {
    "intent": "Calling an external command \"some_command < input_file | another_command > output_file\"",
    "code": "os.system('some_command < input_file | another_command > output_file')"
  },
  {
    "intent": "Calling an external command \"some_command with args\"",
    "code": "stream = os.popen('some_command with args')"
  },
  {
    "intent": "Calling an external command \"echo Hello World\"",
    "code": "print(subprocess.Popen('echo Hello World', shell=True, stdout=subprocess.PIPE).stdout.read())"
  },
  {
    "intent": "Calling an external command \"echo Hello World\"",
    "code": "print(os.popen('echo Hello World').read())"
  },
  {
    "intent": "Calling an external command \"echo Hello World\"",
    "code": "return_code = subprocess.call('echo Hello World', shell=True)"
  },
  {
    "intent": "Calling an external command \"ls\"",
    "code": "p = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\nfor line in p.stdout.readlines():\n    print(line, end=' ')\nretval = p.wait()"
  },
  {
    "intent": "Calling an external command \"ls -l\"",
    "code": "call(['ls', '-l'])"
  },
  {
    "intent": "decode url `url` with utf8 and print it",
    "code": "print(urllib.parse.unquote(url).decode('utf8'))"
  },
  {
    "intent": "decode a urllib escaped url string `url` with `utf8`",
    "code": "url = urllib.parse.unquote(url).decode('utf8')"
  },
  {
    "intent": "delete letters from string '12454v'",
    "code": "\"\"\"\"\"\".join(filter(str.isdigit, '12454v'))"
  },
  {
    "intent": "Update row values for a column `Season` using vectorized string operation in pandas",
    "code": "df['Season'].str.split('-').str[0].astype(int)"
  },
  {
    "intent": "sort a list of tuples `my_list` by second parameter in the tuple",
    "code": "my_list.sort(key=lambda x: x[1])"
  },
  {
    "intent": "find indexes of all occurrences of a substring `tt` in a string `ttt`",
    "code": "[m.start() for m in re.finditer('(?=tt)', 'ttt')]"
  },
  {
    "intent": "find all occurrences of a substring in a string",
    "code": "[m.start() for m in re.finditer('test', 'test test test test')]"
  },
  {
    "intent": "split string `s` based on white spaces",
    "code": "re.findall('\\\\s+|\\\\S+', s)"
  },
  {
    "intent": "set columns `['race_date', 'track_code', 'race_number']` as indexes in dataframe `rdata`",
    "code": "rdata.set_index(['race_date', 'track_code', 'race_number'])"
  },
  {
    "intent": "recursively go through all subdirectories and files in `rootdir`",
    "code": "for (root, subFolders, files) in os.walk(rootdir):\n    pass"
  },
  {
    "intent": "sort a list of dictionary values by 'date' in reverse order",
    "code": "list.sort(key=lambda item: item['date'], reverse=True)"
  },
  {
    "intent": "display first 5 characters of string 'aaabbbccc'",
    "code": "\"\"\"{:.5}\"\"\".format('aaabbbccc')"
  },
  {
    "intent": "unpack hexadecimal string `s` to a list of integer values",
    "code": "struct.unpack('11B', s)"
  },
  {
    "intent": "finding the index of an item 'foo' given a list `['foo', 'bar', 'baz']` containing it",
    "code": "[i for i, j in enumerate(['foo', 'bar', 'baz']) if j == 'foo']"
  },
  {
    "intent": "generate all permutations of list `[1, 2, 3]` and list `[4, 5, 6]`",
    "code": "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"
  },
  {
    "intent": "generate all permutations of a list `[1, 2, 3]`",
    "code": "itertools.permutations([1, 2, 3])"
  },
  {
    "intent": "substitute occurrences of unicode regex pattern u'\\\\p{P}+' with empty string '' in string `text`",
    "code": "return re.sub('\\\\p{P}+', '', text)"
  },
  {
    "intent": "manually throw/raise a `ValueError` exception with the message 'A very specific bad thing happened'",
    "code": "raise ValueError('A very specific bad thing happened')"
  },
  {
    "intent": "throw an exception \"I know Python!\"",
    "code": "raise Exception('I know Python!')"
  },
  {
    "intent": "Manually throw an exception \"I know python!\"",
    "code": "raise Exception('I know python!')"
  },
  {
    "intent": "throw a ValueError with message 'represents a hidden bug, do not catch this'",
    "code": "raise ValueError('represents a hidden bug, do not catch this')"
  },
  {
    "intent": "throw an Exception with message 'This is the exception you expect to handle'",
    "code": "raise Exception('This is the exception you expect to handle')"
  },
  {
    "intent": "throw a value error with message 'A very specific bad thing happened', 'foo', 'bar', 'baz'",
    "code": "raise ValueError('A very specific bad thing happened')"
  },
  {
    "intent": "throw a runtime error with message 'specific message'",
    "code": "raise RuntimeError('specific message')"
  },
  {
    "intent": "throw an assertion error with message \"Unexpected value of 'distance'!\", distance",
    "code": "raise AssertionError(\"Unexpected value of 'distance'!\", distance)"
  },
  {
    "intent": "if Selenium textarea element `foo` is not empty, clear the field",
    "code": "driver.find_element_by_id('foo').clear()"
  },
  {
    "intent": "clear text from textarea 'foo' with selenium",
    "code": "driver.find_element_by_id('foo').clear()"
  },
  {
    "intent": "convert a number 2130706433 to ip string",
    "code": "socket.inet_ntoa(struct.pack('!L', 2130706433))"
  },
  {
    "intent": "Rearrange the columns 'a','b','x','y' of pandas DataFrame `df` in mentioned sequence 'x' ,'y','a' ,'b'",
    "code": "df = df[['x', 'y', 'a', 'b']]"
  },
  {
    "intent": "call base class's __init__ method from the child class `ChildClass`",
    "code": "super(ChildClass, self).__init__(*args, **kwargs)"
  },
  {
    "intent": "sum of all values in a python dict `d`",
    "code": "sum(d.values())"
  },
  {
    "intent": "Sum of all values in a Python dict",
    "code": "sum(d.values())"
  },
  {
    "intent": "convert python dictionary `your_data` to json array",
    "code": "json.dumps(your_data, ensure_ascii=False)"
  },
  {
    "intent": "assign an array of floats in range from 0 to 100 to a variable `values`",
    "code": "values = np.array([i for i in range(100)], dtype=np.float64)"
  },
  {
    "intent": "sort a list of dictionaries `list_of_dct` by values in an order `order`",
    "code": "sorted(list_of_dct, key=lambda x: order.index(list(x.values())[0]))"
  },
  {
    "intent": "change the case of the first letter in string `s`",
    "code": "return s[0].upper() + s[1:]"
  },
  {
    "intent": "join list of numbers `[1,2,3,4] ` to string of numbers.",
    "code": "\"\"\"\"\"\".join([1, 2, 3, 4])"
  },
  {
    "intent": "delete every non `utf-8` characters from a string `line`",
    "code": "line = line.decode('utf-8', 'ignore').encode('utf-8')"
  },
  {
    "intent": "execute a command `command ` in the terminal from a python script",
    "code": "os.system(command)"
  },
  {
    "intent": "MySQL execute query 'SELECT * FROM foo WHERE bar = %s AND baz = %s' with parameters `param1` and `param2`",
    "code": "c.execute('SELECT * FROM foo WHERE bar = %s AND baz = %s', (param1, param2))"
  },
  {
    "intent": "Parse string `datestr` into a datetime object using format pattern '%Y-%m-%d'",
    "code": "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"
  }
]